<?xml version="1.0" encoding="utf-8"?>
<ModelInfo>
	<LODS>
		<!-- Highest LOD -->
		<!-- minimum display size in % (should be bounding sphere vertical screen size, sphere will often be slightly larger than you expect) -->
		<!-- default minSize is 0 -->

		<LOD minSize="100" ModelFile="interior_LOD0.gltf" />
		

	</LODS>


	<Animation name="lever_speed_brake" guid="fb0ef2ea-47a9-41a7-8ad4-3f2a7601024a" length="100" type="Sim" typeParam2="lever_speed_brake" typeParam="AutoPlay" />

	<Animation name="HA420_knob_spd" guid="b1335b93-2ddb-4d20-992c-5d19d4f93b2f" length="100" type="Sim" typeParam2="HA420_knob_spd" typeParam="AutoPlay" />
	<Animation name="HA420_IASMACH" guid="097d2793-9b1f-4292-8beb-56b1ac60b7f6" length="50" type="Sim" typeParam2="HA420_IASMACH" typeParam="AutoPlay" />


	<Animation name="HA420_GPOW" guid="c6494e8d-1da9-417d-ac21-4bf97b428cea" length="50" type="Sim" typeParam2="HA420_GPOW" typeParam="AutoPlay" />
	<Animation name="HA420_BTCOVER" guid="db47830e-05ae-450a-8582-d5c5a32a7481" length="50" type="Sim" typeParam2="HA420_BTCOVER" typeParam="AutoPlay" />
	<Animation name="HA420_BTIE" guid="402d39b6-d66f-4fc0-b31b-1a28274a147a" length="50" type="Sim" typeParam2="HA420_BTIE" typeParam="AutoPlay" />
	<Animation name="HA420_CPCOVER" guid="37afdad0-b5a9-4f34-a558-37dd54242584" length="50" type="Sim" typeParam2="HA420_CPCOVER" typeParam="AutoPlay" />
	<Animation name="HA420_CPOW" guid="6b33037f-0d16-4673-94c3-675ba4e8b43d" length="50" type="Sim" typeParam2="HA420_CPOW" typeParam="AutoPlay" />
	<Animation name="HA420_PDISC" guid="689347b4-a7ca-418a-b970-963be00c6459" length="50" type="Sim" typeParam2="HA420_PDISC" typeParam="AutoPlay" />
	<Animation name="HA420_Starter0" guid="886a6a5c-564c-47cb-9235-7eb9cc392588" length="50" type="Sim" typeParam2="HA420_Starter0" typeParam="AutoPlay" />
	<Animation name="HA420_Starter1" guid="921c1443-69c8-4d75-8e72-76c0306fd35c" length="50" type="Sim" typeParam2="HA420_Starter1" typeParam="AutoPlay" />
	<Animation name="HA420_ParkingBrake" guid="82db8c0d-dc81-4bef-9d53-bb27379c3d0a" length="100" type="Sim" typeParam2="HA420_ParkingBrake" typeParam="AutoPlay" />
	<Animation name="HA420_EmerGear" guid="71556743-b32d-4e9c-9b78-f19f90f13995" length="100" type="Sim" typeParam2="HA420_EmerGear" typeParam="AutoPlay" />

	<Animation name="HA420_throttleLeft" guid="3025084b-37c7-4244-a2da-c76570064f29" length="100" type="Sim" typeParam2="HA420_throttleLeft" typeParam="AutoPlay" />
	<Animation name="HA420_throttleRight" guid="553a36d1-5f1f-40a5-82fc-d4401bc6039a" length="100" type="Sim" typeParam2="HA420_throttleRight" typeParam="AutoPlay" />


	<Animation name="HA420_Throttle_Click_Left" guid="9d676586-0f7d-4697-917f-c609929eb091" length="5" type="Sim" typeParam2="HA420_Throttle_Click_Left" typeParam="AutoPlay" />
	<Animation name="HA420_Throttle_Click_Right" guid="c6e0cfb7-3195-4c0c-8324-345e3c7ef52b" length="100" type="Sim" typeParam2="HA420_Throttle_Click_Right" typeParam="AutoPlay" />


	<PartInfo>
		<Name>HA420_throttleLeft</Name>
		<AnimLength>100</AnimLength>
		<Animation>
			<Parameter>
				<Code>(L:HA420_ThrottlePos_L, number)</Code>
				<Lag>200</Lag>
			</Parameter>
		</Animation>
	</PartInfo>


	<PartInfo>
		<Name>HA420_throttleRight</Name>
		<AnimLength>100</AnimLength>
		<Animation>
			<Parameter>
				<Code>(L:HA420_ThrottlePos_R, number)</Code>
				<Lag>200</Lag>
			</Parameter>
		</Animation>
	</PartInfo>


	<PartInfo>
		<Name>HA420_GPOW</Name>
		<AnimLength>50</AnimLength>
		<Animation>
			<Parameter>
				<Code>(L:GPOW Pushed,bool) 50 *</Code>
				<Lag>250</Lag>
			</Parameter>
		</Animation>
		<MouseRect>
			<Cursor>Hand</Cursor>
			<MouseFlags>LeftSingle</MouseFlags>
			<CallbackCode>
					(M:Event) 'LeftSingle'  scmp 0 == if{ (L:GPOW Pushed,bool) ! (&gt;L:GPOW Pushed,bool) 7 (&gt;L:btnsound) }
				</CallbackCode>
		</MouseRect>
	</PartInfo>

	<PartInfo>
		<Name>HA420_BTCOVER</Name>
		<AnimLength>50</AnimLength>
		<Animation>
			<Parameter>
				<Code>(L:BTCOVER Pushed,bool) 50 *</Code>
				<Lag>250</Lag>
			</Parameter>
		</Animation>
		<MouseRect>
			<Cursor>Hand</Cursor>
			<MouseFlags>RightSingle</MouseFlags>
			<CallbackCode>
					(M:Event) 'RightSingle'  scmp 0 == if{ (L:BTCOVER Pushed,bool) ! (&gt;L:BTCOVER Pushed,bool) 7 (&gt;L:btnsound) }
				</CallbackCode>
		</MouseRect>
	</PartInfo>

	<PartInfo>
		<Name>HA420_BTIE</Name>
		<AnimLength>50</AnimLength>
		<Animation>
			<Parameter>
				<Code>(L:BTIE Pushed,bool) 50 *</Code>
				<Lag>250</Lag>
			</Parameter>
		</Animation>
		<MouseRect>
			<Cursor>Hand</Cursor>
			<MouseFlags>LeftSingle</MouseFlags>
			<CallbackCode>
					(M:Event) 'LeftSingle'  scmp 0 == if{ (L:BTIE Pushed,bool) ! (&gt;L:BTIE Pushed,bool) 7 (&gt;L:btnsound) }
				</CallbackCode>
		</MouseRect>
	</PartInfo>

	<PartInfo>
		<Name>HA420_CPCOVER</Name>
		<AnimLength>50</AnimLength>
		<Animation>
			<Parameter>
				<Code>(L:CPCOVER Pushed,bool) 50 *</Code>
				<Lag>250</Lag>
			</Parameter>
		</Animation>
		<MouseRect>
			<Cursor>Hand</Cursor>
			<MouseFlags>RightSingle</MouseFlags>
			<CallbackCode>
					(M:Event) 'RightSingle'  scmp 0 == if{ (L:CPCOVER Pushed,bool) ! (&gt;L:CPCOVER Pushed,bool) 7 (&gt;L:btnsound) }
				</CallbackCode>
		</MouseRect>
	</PartInfo>

	<PartInfo>
		<Name>HA420_CPOW</Name>
		<AnimLength>50</AnimLength>
		<Animation>
			<Parameter>
				<Code>(L:CPOW Pushed,bool) 50 *</Code>
				<Lag>250</Lag>
			</Parameter>
		</Animation>
		<MouseRect>
			<Cursor>Hand</Cursor>
			<MouseFlags>LeftSingle</MouseFlags>
			<CallbackCode>
					(M:Event) 'LeftSingle'  scmp 0 == if{ (L:CPOW Pushed,bool) ! (&gt;L:CPOW Pushed,bool) 7 (&gt;L:btnsound) }
				</CallbackCode>
		</MouseRect>
	</PartInfo>

	<PartInfo>
		<Name>HA420_PDISC</Name>
		<AnimLength>50</AnimLength>
		<Animation>
			<Parameter>
				<Code>(L:PDISC Pushed,bool) 50 *</Code>
				<Lag>250</Lag>
			</Parameter>
		</Animation>
		<MouseRect>
			<Cursor>Hand</Cursor>
			<MouseFlags>LeftSingle</MouseFlags>
			<CallbackCode>
					(M:Event) 'LeftSingle'  scmp 0 == if{ (L:PDISC Pushed,bool) ! (&gt;L:PDISC Pushed,bool) 7 (&gt;L:btnsound) }
				</CallbackCode>
		</MouseRect>
	</PartInfo>


	<PartInfo>
		<Name>HA420_Starter0</Name>
		<AnimLength>50</AnimLength>
		<Animation>
			<Parameter>
				<Code>(L:ST0 Pushed,bool) 50 *</Code>
				<Lag>250</Lag>
			</Parameter>
		</Animation>
		<MouseRect>
			<Cursor>Hand</Cursor>
			<TooltipText>Engine1 Starter</TooltipText>
			<MouseFlags>LeftSingle</MouseFlags>
			<CallbackCode>
					(M:Event) 'LeftSingle'  scmp 0 == if{ (L:ST0 Pushed,bool) ! (&gt;L:ST0 Pushed,bool) 7 (&gt;L:btnsound) (A:GENERAL ENG COMBUSTION:1,bool) 0 == if{ (A:GENERAL ENG STARTER:1,bool) 0 == if{ (>K:TOGGLE_STARTER1) } } }
				</CallbackCode>
		</MouseRect>
	</PartInfo>

	<PartInfo>
		<Name>HA420_Starter1</Name>
		<AnimLength>50</AnimLength>
		<Animation>
			<Parameter>
				<Code>(L:ST1 Pushed,bool) 50 *</Code>
				<Lag>250</Lag>
			</Parameter>
		</Animation>
		<MouseRect>
			<Cursor>Hand</Cursor>
			<TooltipText>Engine2 Starter</TooltipText>
			<MouseFlags>LeftSingle</MouseFlags>
			<CallbackCode>
					(M:Event) 'LeftSingle'  scmp 0 == if{ (L:ST1 Pushed,bool) ! (&gt;L:ST1 Pushed,bool) 7 (&gt;L:btnsound) (A:GENERAL ENG COMBUSTION:2,bool) 0 == if{ (A:GENERAL ENG STARTER:2,bool) 0 == if{ (>K:TOGGLE_STARTER2) } } }
				</CallbackCode>
		</MouseRect>
	</PartInfo>

	<PartInfo>
		<Name>HA420_ParkingBrake</Name>
		<AnimLength>100</AnimLength>
		<Animation>
			<Parameter>
				<Code>(A:BRAKE PARKING INDICATOR,bool) 100 *</Code>
				<Lag>250</Lag>
			</Parameter>
		</Animation>
		<MouseRect>
			<Cursor>Hand</Cursor>
			<TooltipText>Parking Brake</TooltipText>
			<MouseFlags>RightSingle</MouseFlags>
			<CallbackCode>
					(M:Event) 'RightSingle'  scmp 0 == if{ 7 (&gt;L:btnsound) (>K:PARKING_BRAKES) }
				</CallbackCode>
		</MouseRect>
	</PartInfo>

	<PartInfo>
		<Name>HA420_EmerGear</Name>
		<AnimLength>100</AnimLength>
		<Animation>
			<Parameter>
				<Code>(A:GEAR EMERGENCY HANDLE POSITION,bool) 100 *</Code>
				<Lag>250</Lag>
			</Parameter>
		</Animation>
		<MouseRect>
			<Cursor>Hand</Cursor>
			<TooltipText>Parking Brake</TooltipText>
			<MouseFlags>RightSingle</MouseFlags>
			<CallbackCode>
					(M:Event) 'RightSingle'  scmp 0 == if{ 7 (&gt;L:btnsound) (&gt;K:GEAR_PUMP) }
				</CallbackCode>
		</MouseRect>
	</PartInfo>


	<Behaviors>
		<!-- Includes ###################################### -->
		<Include Path="Asobo\Common.xml" />
		<Include Path="Asobo\GlassCockpit\AS3000.xml" />
		<Include Path="Asobo\GlassCockpit\AS580.xml" />
		<Include Path="Asobo\Exterior.xml" />
		<Include ModelBehaviorFile="ASOBO\Inputs\Helpers.xml" />
		<Include ModelBehaviorFile="Asobo\Common.xml" />
		<Include ModelBehaviorFile="Asobo\GlassCockpit\AS3000.xml" />
		<Include ModelBehaviorFile="WT\G3000\G3000.xml" />
		<Include ModelBehaviorFile="WT\G3000\GTC.xml" />
		<!-- ############################################### -->

		<Component ID="cover1" Node="cover1">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:showCover1,bool)</VISIBILITY_CODE>
			</UseTemplate>
		</Component>

		<Component ID="AT_DECAL" Node="AT_DECAL">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:eliteII,bool)</VISIBILITY_CODE>
			</UseTemplate>
		</Component>

		<Component ID="Decals__FMS_MAN" Node="Decals__FMS_MAN">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:eliteII,bool)</VISIBILITY_CODE>
			</UseTemplate>
		</Component>

		<Component ID="HA420_knob_FMS_MAN" Node="HA420_knob_FMS_MAN">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:eliteII,bool)</VISIBILITY_CODE>
			</UseTemplate>
		</Component>

		<Component ID="CSC_DECAL" Node="CSC_DECAL">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:eliteII,bool) !</VISIBILITY_CODE>
			</UseTemplate>
		</Component>


		<Component ID="cover2" Node="cover2">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:showCover2,bool)</VISIBILITY_CODE>
			</UseTemplate>
		</Component>

		<!-- pilots and pax -->
		<Component ID="PILOT_0" Node="PILOT_0">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(A:CAMERA STATE,number) 3 == (A:CAMERA STATE,number) 5 == or (A:CAMERA STATE,number) 4 == or (A:PAYLOAD STATION WEIGHT:1,pounds) 0 &gt; and</VISIBILITY_CODE>
			</UseTemplate>
		</Component>

		<Component ID="PILOT_1" Node="PILOT_1">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(A:CAMERA STATE,number) 3 == (A:CAMERA STATE,number) 5 == or (A:CAMERA STATE,number) 4 == or (A:PAYLOAD STATION WEIGHT:2,pounds) 0 &gt; and</VISIBILITY_CODE>
			</UseTemplate>
		</Component>


		<Component ID="pax1" Node="pax1">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(A:PAYLOAD STATION WEIGHT:5,pounds) 0 &gt; (L:showPax,bool) and</VISIBILITY_CODE>
			</UseTemplate>
		</Component>

		<Component ID="pax2" Node="pax2">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(A:PAYLOAD STATION WEIGHT:6,pounds) 0 &gt; (L:showPax,bool) and</VISIBILITY_CODE>
			</UseTemplate>
		</Component>

		<Component ID="pax3" Node="pax3">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(A:PAYLOAD STATION WEIGHT:4,pounds) 0 &gt; (L:showPax,bool) and</VISIBILITY_CODE>
			</UseTemplate>
		</Component>

		<Component ID="pax4" Node="pax4">
			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(A:PAYLOAD STATION WEIGHT:7,pounds) 0 &gt; (L:showPax,bool) and</VISIBILITY_CODE>
			</UseTemplate>
		</Component>

		<Component ID="pax5" Node="pax5">
			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(A:PAYLOAD STATION WEIGHT:3,pounds) 0 &gt; (L:showPax,bool) and</VISIBILITY_CODE>
			</UseTemplate>
		</Component>


		<!-- ======Checklist scroll wheel on yoke=================================================================== -->
		<Component ID="checklist_wheel_scrolling" Node="checklist_wheel_push">
			<UseTemplate Name="ASOBO_GT_Knob_Infinite_Push_Timed">

				<ANIM_NAME_PUSH>checklist_wheel_pushIn</ANIM_NAME_PUSH>
				<ANIM_NAME_KNOB>checklist_wheel_scrolling</ANIM_NAME_KNOB>

				<CLOCKWISE_CODE>(&gt;H:AS3000_Electronic_Checklist_1_Scroll_Up)</CLOCKWISE_CODE>
				<ANTICLOCKWISE_CODE>(&gt;H:AS3000_Electronic_Checklist_1_Scroll_Down)</ANTICLOCKWISE_CODE>

				<SHORT_CLICK_CODE>(&gt;H:AS3000_Electronic_Checklist_1_Push)</SHORT_CLICK_CODE>
				<LONG_CLICK_CODE>(&gt;H:AS3000_Electronic_Checklist_1_Push_Long)</LONG_CLICK_CODE>
				<LONG_CLICK_TIME>2</LONG_CLICK_TIME>

				<WWISE_EVENT>AS580_big_knob_turn</WWISE_EVENT>
				<COUNT>36</COUNT>
				<WWISE_EVENT_1>AS580_knob_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>AS580_knob_push_button_off</WWISE_EVENT_2>
			</UseTemplate>
		</Component>


		<!-- ======Checklist scroll wheel right TSC=================================================================== -->

		<Component ID="checklist_TSC_scrolling" Node="TCS_2_scroll_small">
			<UseTemplate Name="ASOBO_GT_Knob_Infinite_Push_Timed">

				<ANIM_NAME_PUSH>TCS_2_pushEmpty</ANIM_NAME_PUSH>
				<ANIM_NAME_KNOB>TCS_2_scroll_small_Rotate</ANIM_NAME_KNOB>

				<CLOCKWISE_CODE>(&gt;H:gauges_ha420_sys_Checklist_scoll_up)</CLOCKWISE_CODE>
				<ANTICLOCKWISE_CODE>(&gt;H:gauges_ha420_sys_Checklist_scoll_down)</ANTICLOCKWISE_CODE>

				<SHORT_CLICK_CODE>(&gt;H:gauges_ha420_sys_Checklist_enter)</SHORT_CLICK_CODE>
				<LONG_CLICK_CODE>(&gt;H:gauges_ha420_sys_Checklist_Longenter)</LONG_CLICK_CODE>
				<LONG_CLICK_TIME>2</LONG_CLICK_TIME>

				<WWISE_EVENT>AS580_big_knob_turn</WWISE_EVENT>
				<COUNT>36</COUNT>
				<WWISE_EVENT_1>AS580_knob_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>AS580_knob_push_button_off</WWISE_EVENT_2>
			</UseTemplate>
		</Component>


		<!-- ======HA420 THROTTLES===========HA420 THROTTLES=========HA420 THROTTLES=======HA420 THROTTLES=============HA420 THROTTLES=================================================================== -->
		<Component ID="testMe">
			<UseTemplate Name="Marwan_Custom_Fadec">
				<THROTTLE_ID>1</THROTTLE_ID>
			</UseTemplate>
		</Component>

		<Component ID="testMe2">
			<UseTemplate Name="Marwan_Custom_Fadec">
				<THROTTLE_ID>2</THROTTLE_ID>
			</UseTemplate>
		</Component>

		<Template Name="Marwan_Custom_Fadec">
			<Parameters Type="Default">
				<INPUT_EVENT_ID_SOURCE>ENGINE1</INPUT_EVENT_ID_SOURCE>
			</Parameters>
			<UseTemplate Name="ASOBO_Interaction_Base_Template">
				<USE_INPUT_EVENT_ID>ENGINE1</USE_INPUT_EVENT_ID>
			</UseTemplate>
		</Template>

		<InputEvent ID="ENGINE1">
			<Presets>
				<Extend Target="ASOBO_GIE_Anim_Handling">
					<Parameters Type="Default">
						<INPUT_EVENT_ID_SOURCE>ENGINE1</INPUT_EVENT_ID_SOURCE>
					</Parameters>
				</Extend>
				<INPUT_EVENT_ID_SOURCE>ENGINE1</INPUT_EVENT_ID_SOURCE>
				<Preset ID="ENGINE1_Throttle_#THROTTLE_ID#">
					<INCREMENT>0.1</INCREMENT>
					<UPPER_LIMIT>16384</UPPER_LIMIT>
					<LOWER_LIMIT>(A:THROTTLE LOWER LIMIT, position 16k)</LOWER_LIMIT>
					<INIT_CODE>(A:GENERAL ENG THROTTLE LEVER POSITION:#THROTTLE_ID#, position 16k) 16384 / s0 (&gt;O:ENGINE_Throttle_#THROTTLE_ID#_Position)</INIT_CODE>

					<Tooltip>
						<Icon>MOVE_AXIS_Y</Icon>
						<Interaction>PRIMARY_DOWN+Y_AXIS</Interaction>
						<InteractionLockable>Y_AXIS</InteractionLockable>
						<TTDescription RPN="True">@TT_Package.ENGINE_PUSH_TOGA_ACTION</TTDescription>
						<TTValue RPN="True">(A:GENERAL ENG THROTTLE LEVER POSITION:1, percent) '%.1f%%' @sprintf</TTValue>
					</Tooltip>
					<Value>
						<Units>percent</Units>
						<Code>(O:ENGINE_Throttle_#THROTTLE_ID#_Position)</Code>
						<Init>(A:GENERAL ENG THROTTLE LEVER POSITION:#THROTTLE_ID#, position 16k) 16384 / (&gt;O:ENGINE_Throttle_#THROTTLE_ID#_Position)</Init>
						<WatchVars>
							<Simvar ID="GENERAL ENG THROTTLE LEVER POSITION:#THROTTLE_ID#" />
						</WatchVars>
					</Value>
					<Inc>
						<Code>(L:THROTTLE#THROTTLE_ID#_SET,number) p0 + (&gt;B:ENGINE1_Throttle_#THROTTLE_ID#_SET)</Code>
						<Parameters>
							<Param Type="Float" RPN="True">p0</Param>
						</Parameters>
						<Bindings>
							<Binding EventID="THROTTLE_INCR">
								<!-- event manipulating all throttles (declared for each throttle preset) -->
								<Param>0.016</Param>
							</Binding>
							<Binding EventID="THROTTLE_INCR_SMALL">
								<!-- event manipulating all throttles (declared for each throttle preset) -->
								<Param>0.016</Param>
							</Binding>
							<Binding EventID="THROTTLE#THROTTLE_ID#_INCR">
								<Param>0.016</Param>
							</Binding>
							<Binding EventID="THROTTLE#THROTTLE_ID#_INCR_SMALL">
								<Param>0.016</Param>
							</Binding>
						</Bindings>
					</Inc>
					<Dec>
						<Code>(L:THROTTLE#THROTTLE_ID#_SET,number) p0 - (&gt;B:ENGINE1_Throttle_#THROTTLE_ID#_SET)</Code>
						<Parameters>
							<Param Type="Float" RPN="True">p0</Param>
						</Parameters>
						<Bindings>

							<Binding EventID="THROTTLE_DECR">
								<!-- event manipulating all throttles (declared for each throttle preset) -->
								<Param>0.016</Param>
							</Binding>
							<Binding EventID="THROTTLE_DECR_SMALL">
								<!-- event manipulating all throttles (declared for each throttle preset) -->
								<Param>0.016</Param>
							</Binding>
							<Binding EventID="THROTTLE#THROTTLE_ID#_DECR">
								<Param>0.016</Param>
							</Binding>
							<Binding EventID="THROTTLE#THROTTLE_ID#_DECR_SMALL">
								<Param>0.016</Param>
							</Binding>

						</Bindings>
					</Dec>
					<Set>
						<Code>p0 0 max 1 min s0 (&gt;L:THROTTLE#THROTTLE_ID#_SET,number) l0 (&gt;O:ENGINE_Throttle_#THROTTLE_ID#_Position)</Code>
						<Parameters>
							<Param Type="Float" RPN="True">p0</Param>
						</Parameters>
						<Bindings>
							<!-- Aliases -->
							<Binding Alias="ENGINE1_All_Throttle_Full_Forward">
								<!-- event manipulating all throttles (declared for each throttle preset) -->
								<Param>1</Param>
							</Binding>
							<Binding Alias="ENGINE1_All_Throttle_Full_Backward">
								<!-- event manipulating all throttles (declared for each throttle preset) -->
								<Param>0</Param>
							</Binding>
							<Binding Alias="ENGINE1_All_Throttle_Idle">
								<!-- event manipulating all throttles (declared for each throttle preset) -->
								<Param>0</Param>
							</Binding>
							<Binding Alias="ENGINE1_Throttle_#THROTTLE_ID#_Full_Forward">
								<Param>1</Param>
							</Binding>
							<Binding Alias="ENGINE1_Throttle_#THROTTLE_ID#_Full_Backward">
								<Param>#LOWER_POSITION_PCT_OVER_100#</Param>
							</Binding>
							<Binding Alias="ENGINE1_Throttle_#THROTTLE_ID#_Idle">
								<Param>0</Param>
							</Binding>
							<!-- EventIDs -->
							<Binding EventID="THROTTLE_FULL">
								<Param>1</Param>
							</Binding>
							<Binding EventID="THROTTLE_CUT">
								<Param>0</Param>
							</Binding>
							<Binding EventID="THROTTLE#THROTTLE_ID#_FULL">
								<Param>1</Param>
							</Binding>
							<Binding EventID="THROTTLE#THROTTLE_ID#_CUT">
								<Param>0</Param>
							</Binding>
							<Binding EventID="THROTTLE#THROTTLE_ID#_SET">
								<Param Type="Float" RPN="True">p1 16384 / 1 + 0.5 *</Param>
							</Binding>
							<Binding EventID="THROTTLE#THROTTLE_ID#_AXIS_SET_EX1">
								<Param Type="Float" RPN="True">p1 16384 / 1 + 0.5 *</Param>
							</Binding>
							<Binding EventID="AXIS_THROTTLE#THROTTLE_ID#_SET">
								<Param Type="Float" RPN="True">p1 16384 / 1 + 0.5 *</Param>
							</Binding>
							<Binding EventID="THROTTLE_SET">
								<Param Type="Float" RPN="True">p1 16384 / 1 + 0.5 *</Param>
							</Binding>
							<Binding EventID="THROTTLE_AXIS_SET_EX1">
								<Param Type="Float" RPN="True">p1 16384 / 1 + 0.5 *</Param>
							</Binding>
							<Binding EventID="AXIS_THROTTLE_SET">
								<Param Type="Float" RPN="True">p1 16384 / 1 + 0.5 *</Param>
							</Binding>
						</Bindings>
					</Set>

				</Preset>
			</Presets>
		</InputEvent>

		<Template Name="Ha420_throttle">

			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIPID>TT:COCKPIT.TOOLTIPS.THROTTLE_CONTROL</TOOLTIPID>
				<CURSOR>Hand</CURSOR>
				<MOUSEFLAGS_DEFAULT_IM>LeftSingle+LeftRelease+LeftDrag+WheelUp+WheelDown</MOUSEFLAGS_DEFAULT_IM>
				<MouseFlags>LeftAll+WheelUp+WheelDown</MouseFlags>
				<CALLBACKCODE>
(M:Event) 'LeftSingle' scmp 0 == if{
									(M:Y) (&gt;L:MOUSEPOSY_#ID#,number)
									
									(L:HA420_ThrottlePos_#ID#, number) 50 == if{ 1 (>L:HA420_Throttle_DecisionPoint_#ID#,number) } els{ 0 (>L:HA420_Throttle_DecisionPoint_#ID#,number) }
									(L:HA420_ThrottlePos_#ID#, number) 50 &gt; if{ 1 (>L:HA420_Throttle_UpperRange_#ID#,number) } els{ 0 (>L:HA420_Throttle_UpperRange_#ID#,number) }
									(L:HA420_ThrottlePos_#ID#, number) 50 &lt; if{ 1 (>L:HA420_Throttle_LowerRange_#ID#,number) } els{ 0 (>L:HA420_Throttle_LowerRange_#ID#,number) }
									1 (>L:HA420_Throttle_Clicking_#ID#, number)
									}

(M:Event) 'LeftRelease' scmp 0 == if{
									(M:Y) (&gt;L:MOUSEPOSY_#ID#,number)
									0 (>L:HA420_Throttle_DecisionPoint_#ID#,number)
									0 (>L:HA420_Throttle_UpperRange_#ID#,number)
									0 (>L:HA420_Throttle_LowerRange_#ID#,number)
									0 (>L:HA420_Throttle_Clicking_#ID#, number)
									}										
(M:Event) 'LeftDrag' scmp 0 == if{ 

									(L:HA420_Throttle_UpperRange_#ID#,number) 1 == if{
																		(M:Y) (L:MOUSEPOSY_#ID#,number) - 3 + 0 &lt; if{ 
																		(L:HA420_ThrottlePos_#ID#, number) (M:Y) (L:MOUSEPOSY_#ID#,number) - abs 0.25 * + 100 min (&gt;L:HA420_ThrottlePos_#ID#, number) (M:Y) (&gt;L:MOUSEPOSY_#ID#,number)
																									}
																			
																		(M:Y) (L:MOUSEPOSY_#ID#,number) - 3 - 0 &gt; if{ 
																		(L:HA420_ThrottlePos_#ID#, number) (M:Y) (L:MOUSEPOSY_#ID#,number) - abs 0.25 * - 50 max (&gt;L:HA420_ThrottlePos_#ID#, number) (M:Y) (&gt;L:MOUSEPOSY_#ID#,number)
																												}
																				}
																				
																				
									(L:HA420_Throttle_LowerRange_#ID#,number) 1 == if{ 
																	(M:Y) (L:MOUSEPOSY_#ID#,number) - 3 + 0 &lt; if{ 1 (>L:HA420ProblemUp#ID#,number) 0 (>L:HA420ProblemDn#ID#,number)
																		(L:HA420_ThrottlePos_#ID#, number) (M:Y) (L:MOUSEPOSY_#ID#,number) - abs 1 * + 50 min (&gt;L:HA420_ThrottlePos_#ID#, number) (M:Y) (&gt;L:MOUSEPOSY_#ID#,number)
																												}

																	(M:Y) (L:MOUSEPOSY_#ID#,number) - 3 - 0 &gt; if{ 0 (>L:HA420ProblemUp#ID#,number) 1 (>L:HA420ProblemDn#ID#,number)
																	(L:HA420_ThrottlePos_#ID#, number) (M:Y) (L:MOUSEPOSY_#ID#,number) - abs 1 * - 0 max (&gt;L:HA420_ThrottlePos_#ID#, number) (M:Y) (&gt;L:MOUSEPOSY_#ID#,number)
																												} 
																			}
																			
																			
																			
									(L:HA420_Throttle_DecisionPoint_#ID#,number) 1 == if{ (M:Y) (L:MOUSEPOSY_#ID#,number) - 3 + 0 &lt; if{ 1 (>L:HA420_Throttle_UpperRange_#ID#,number) 0 (>L:HA420_Throttle_DecisionPoint_#ID#,number) }
																					
																					(M:Y) (L:MOUSEPOSY_#ID#,number) - 3 - 0 &gt; if{ 1 (>L:HA420_Throttle_LowerRange_#ID#,number) 0 (>L:HA420_Throttle_DecisionPoint_#ID#,number) }
																					
																					}

										}


(M:Event) 'WheelUp' scmp 0 == if{ 
									(L:HA420_ThrottlePos_#ID#, number) ++ 100 min (&gt;L:HA420_ThrottlePos_#ID#, number) 
									(L:HA420_ThrottlePos_#ID#, number) 50 - 2 * 163.84 * 16384 / (>L:THROTTLE#ENGID#_SET,number)									
								}

(M:Event) 'WheelDown' scmp 0 == if{  (L:HA420_ThrottlePos_#ID#, number) 51 &gt; if{ 
									(L:HA420_ThrottlePos_#ID#, number) -- 0 max (&gt;L:HA420_ThrottlePos_#ID#, number) 
									(L:HA420_ThrottlePos_#ID#, number) 50 - 2 * 163.84 * 16384 / (>L:THROTTLE#ENGID#_SET,number)
									}
									}
            </CALLBACKCODE>
			</UseTemplate>
		</Template>

		<Component ID="HA420_Throttle_Click_Right" Node="HA420_Throttle_Click_Right">
			<UseTemplate Name="Ha420_throttle">
				<ID>R</ID>
				<ENGID>2</ENGID>
			</UseTemplate>
		</Component>

		<Component ID="HA420_Throttle_Click_Left" Node="HA420_Throttle_Click_Left">
			<UseTemplate Name="Ha420_throttle">
				<ID>L</ID>
				<ENGID>1</ENGID>
			</UseTemplate>
		</Component>

		<Component ID="Update2">
			<UseTemplate Name="ASOBO_GT_Update">
				<FREQUENCY>30</FREQUENCY>
				<UPDATE_CODE>	
			
(*===============================Fadec LOGIC=========================================================================*)
			


			
(*===============================Control checks=========================================================================*)	


		
(L:HA420_THROTTLES_INITITALIZE,BOOL) 1 != if{ 50 (>L:HA420_ThrottlePos_L, number) 50 (>L:HA420_ThrottlePos_R, number) 
												(A:GENERAL ENG FUEL VALVE:2,Bool) 0 == if{ 0 (>L:HA420_ThrottlePos_R, number) }
												(A:GENERAL ENG FUEL VALVE:1,Bool) 0 == if{ 0 (>L:HA420_ThrottlePos_L, number) } 
									
							1 (>L:HA420_THROTTLES_INITITALIZE,BOOL) }
			

			(L:HA420_Throttle_Clicking_R, number) 1 == if{ 
															(L:HA420_ThrottlePos_R, number) 50 - 2 * 163.84 * 16384 / (>L:THROTTLE2_SET,number) 
														} els{ 
					(L:HA420_ThrottlePos_R, number)	 48 &gt; if{
															(L:THROTTLE2_SET,number) 100 * 2 / 50 + (>L:HA420_ThrottlePos_R, number)
																} }
														
			(L:HA420_ThrottlePos_R, number)	 2 &lt; if{ (A:GENERAL ENG FUEL VALVE:2,Bool) 1 == if{ (>K:TOGGLE_FUEL_VALVE_ENG2) } }	

			(L:HA420_ThrottlePos_R, number)	 48 &gt; (L:Block_Throttle_Valve_control_R,bool) 0 == and if{ (A:GENERAL ENG FUEL VALVE:2,Bool) 0 == if{ (>K:TOGGLE_FUEL_VALVE_ENG2) } }		



			(L:HA420_Throttle_Clicking_L, number) 1 == if{ 
															(L:HA420_ThrottlePos_L, number) 50 - 2 * 163.84 * 16384 / (>L:THROTTLE1_SET,number)  
														} els{ 
					(L:HA420_ThrottlePos_L, number)	 48 &gt; if{
															(L:THROTTLE1_SET,number) 100 * 2 / 50 + (>L:HA420_ThrottlePos_L, number)
																} }
														
			(L:HA420_ThrottlePos_L, number)	 2 &lt; if{ (A:GENERAL ENG FUEL VALVE:1,Bool) 1 == if{ (>K:TOGGLE_FUEL_VALVE_ENG1) } }	

			(L:HA420_ThrottlePos_L, number)	 48 &gt;  (L:Block_Throttle_Valve_control_L,bool) 0 == and if{ (A:GENERAL ENG FUEL VALVE:1,Bool) 0 == if{ (>K:TOGGLE_FUEL_VALVE_ENG1) } }	
			</UPDATE_CODE>
			</UseTemplate>
		</Component>

		<Component ID="HA420_throttleLeft" Node="HA420_throttleLeft">
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>HA420_throttleLeft</ANIM_NAME>
				<ANIM_CODE>(L:HA420_ThrottlePos_L, number)</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>100</ANIM_LAG>
			</UseTemplate>
		</Component>

		<Component ID="HA420_throttleRight" Node="HA420_throttleRight">
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>HA420_throttleRight</ANIM_NAME>
				<ANIM_CODE>(L:HA420_ThrottlePos_R, number)</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>100</ANIM_LAG>
			</UseTemplate>
		</Component>

		<Component ID="left_cutoff_shortcut" Node="left_cutoff_shortcut">
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<CURSOR>Hand</CURSOR>
				<TOOLTIPID>%(((L:HA420_ThrottlePos_L, number) 53 &lt; (L:HA420_ThrottlePos_L, number) 48 &gt;= )%{if}Throttle Cutoff%{else}Throttle Idle%{end}</TOOLTIPID>
				<MOUSEFLAGS_DEFAULT_IM>LeftSingle+LeftRelease+LeftDrag+WheelUp+WheelDown</MOUSEFLAGS_DEFAULT_IM>
				<MouseFlags>LeftAll+WheelUp+WheelDown</MouseFlags>
				<CALLBACKCODE>
					(M:Event) 'LeftSingle' scmp 0 == if{ 
														(L:HA420_ThrottlePos_L, number) 48 &gt;= if{ 1 (>L:HA420_Throttle_Clicking_L, number) 0 (>L:HA420_ThrottlePos_L, number) } els{ 1 (>L:HA420_Throttle_Clicking_L, number) 51 (>L:HA420_ThrottlePos_L, number) }
														}
					(M:Event) 'LeftRelease' scmp 0 == if{
														0 (>L:HA420_Throttle_Clicking_L, number)
														}
				</CALLBACKCODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:HA420_ThrottlePos_L, number) 53 &lt;=</VISIBILITY_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Highlight_Template">
				<HIGHLIGHT_NODE_ID>left_cutoff_shortcut</HIGHLIGHT_NODE_ID>
			</UseTemplate>

		</Component>

		<Component ID="right_cutoff_shortcut" Node="right_cutoff_shortcut">
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<CURSOR>Hand</CURSOR>
				<TOOLTIPID>%(((L:HA420_ThrottlePos_R, number) 53 &lt; (L:HA420_ThrottlePos_R, number) 48 &gt;= )%{if}Throttle Cutoff%{else}Throttle Idle%{end}</TOOLTIPID>
				<MOUSEFLAGS_DEFAULT_IM>LeftSingle+LeftRelease+LeftDrag+WheelUp+WheelDown</MOUSEFLAGS_DEFAULT_IM>
				<MouseFlags>LeftAll+WheelUp+WheelDown</MouseFlags>
				<CALLBACKCODE>
					(M:Event) 'LeftSingle' scmp 0 == if{ 
						(L:HA420_ThrottlePos_R, number) 48 &gt;= if{ 1 (>L:HA420_Throttle_Clicking_R, number) 0 (>L:HA420_ThrottlePos_R, number) } els{ 1 (>L:HA420_Throttle_Clicking_R, number) 51 (>L:HA420_ThrottlePos_R, number) }
						}
(M:Event) 'LeftRelease' scmp 0 == if{
						0 (>L:HA420_Throttle_Clicking_R, number)
						}
				</CALLBACKCODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:HA420_ThrottlePos_R, number) 53 &lt;=</VISIBILITY_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Highlight_Template">
				<HIGHLIGHT_NODE_ID>right_cutoff_shortcut</HIGHLIGHT_NODE_ID>
			</UseTemplate>

		</Component>


		<!-- =====================END END END END END END END END END END END ===================================================== -->
		<Component ID="Update">
			<UseTemplate Name="ASOBO_GT_Update">
				<FREQUENCY>30</FREQUENCY>
				<UPDATE_CODE>




	(*======(A:CABIN SEATBELTS ALERT SWITCH) 0 == if { (&gt;K:CABIN_SEATBELTS_ALERT_SWITCH_TOGGLE) } (A:CABIN SEATBELTS ALERT SWITCH) 1 == if { 1 (&gt;L:SimulationInitialized,bool) }========= *)
	
	
	(A:GENERAL ENG COMBUSTION:1,bool) (A:GENERAL ENG COMBUSTION:2,bool) or (A:SIM ON GROUND,bool) ! or (A:BRAKE PARKING INDICATOR,bool) ! or if{ 0 (>L:SIMOPTION STATIC ELEMENTS,bool) }
	(A:GENERAL ENG COMBUSTION:1,bool) (A:GENERAL ENG COMBUSTION:2,bool) or (A:SIM ON GROUND,bool) ! or if{ 0 (>L:HJET_door_front_cargo_open,bool) 0 (>L:HJET_door_RearCargo_open,bool) 0 (>L:HJET_EXIT_OPEN,bool) }
	
 			(B:ENGINE1_Throttle_1) (>L:loveOfMyLife)	


(L:FrameCounter,number) 1 + (>L:FrameCounter,number)	
			
(A:TURB ENG IGNITION SWITCH:1, enum) 0 == if{ 1 (&gt;K:TURBINE_IGNITION_SWITCH_SET1) }
(A:TURB ENG IGNITION SWITCH:2, enum) 0 == if{ 1 (&gt;K:TURBINE_IGNITION_SWITCH_SET2) }		




(A:ELECTRICAL MASTER BATTERY,bool) (A:APU GENERATOR ACTIVE:1,Bool) or (A:GENERAL ENG MASTER ALTERNATOR:1, bool) or (A:GENERAL ENG MASTER ALTERNATOR:2, bool) or (A:ELECTRICAL MAIN BUS VOLTAGE:1,Volts) 21 &gt; and if{ 1 (&gt;K:AVIONICS_MASTER_SET) 1 (>L:HJET_ELECTRICITY_ESTABLISHED,number) } els{ 0 (>L:HJET_ELECTRICITY_ESTABLISHED,number) }
(A:Ambient pressure,inHg) 29.92 / sqrt 0.72 2 pow 4 / 0.72 4 pow 40 / 1  + + sqrt * 0.72 *  661.5 * (>L:!!BARBERPOLE!!!,enum)

(A:ELECTRICAL MASTER BATTERY,bool) (>L:H_ELECTRICAL MASTER BATTERY,bool) 
(A:APU GENERATOR ACTIVE:1,Bool) (>L:H_APU GENERATOR ACTIVE:1,Bool)
(A:GENERAL ENG MASTER ALTERNATOR:1, bool) (>L:H_GENERAL ENG GENERATOR ACTIVE:1, bool)
(A:GENERAL ENG MASTER ALTERNATOR:2, bool) (>L:H_GENERAL ENG GENERATOR ACTIVE:2, bool)
			
		(A:GROUND VELOCITY,Knots) 1.68781 * (A:VERTICAL SPEED,Feet per second) / (>L:GLIDE_RATIO,ENUM)
			
			(A:GENERAL ENG THROTTLE LEVER POSITION:2, position 16k) (>L:Whatislimit!!!, number)
			
			(L:HA420_INITITALIZE,BOOL) 1 != if{
											50 (>L:HA420_ThrottlePos_L, number) 50 (>L:HA420_ThrottlePos_R, number) 
											(A:GENERAL ENG FUEL VALVE:2,Bool) 0 == if{ 0 (>L:HA420_ThrottlePos_R, number) }
											(A:GENERAL ENG FUEL VALVE:1,Bool) 0 == if{ 0 (>L:HA420_ThrottlePos_L, number) }

											(&gt;K:MIXTURE1_RICH)
											(&gt;K:MIXTURE2_RICH)
											(>K:MIXTURE_RICH)
											
											
											1 (&gt;K:AVIONICS_MASTER_SET)
											1 (>L:GENR Pushed,bool)
											1 (>L:GENL Pushed,bool)
											3 (>K:BLEED_AIR_SOURCE_CONTROL_SET)
											3600 (>K:ELEVATOR_TRIM_SET)
											1 (>K:ALL_LIGHTS_TOGGLE)
											1 (>L:XMLVAR_SpeedIsManuallySet)
											1 (>L:HA420_INITITALIZE,BOOL) 
												}
		

	

(A:TURB ENG IGNITION SWITCH EX1:2, enum) (>L:!!FAAACK!!, enum)
			(L:NAV_Pushed,bool) (L:NAV_PushedLF,bool) != if{ 
						
			(L:NAV_Pushed,bool) (>L:NAV_PushedLF,bool) }


			(L:Alt_Pushed,bool) (L:Alt_PushedLF,bool) != if{ 
						
			(L:Alt_Pushed,bool) (>L:Alt_PushedLF,bool) }
			
			(L:FLC_Pushed,bool) (L:FLC_PushedLF,bool) != if{ 
						
			(L:FLC_Pushed,bool) (>L:FLC_PushedLF,bool) }
			
			(L:VS_Pushed,bool) (L:VS_PushedLF,bool) != if{ 
					
			(L:VS_Pushed,bool) (>L:VS_PushedLF,bool) }
			
			
			(L:BM Pushed,bool) (L:BM Pushed LF,bool) != if{ 
						(>K:TOGGLE_MASTER_BATTERY)
			(L:BM Pushed,bool) (>L:BM Pushed LF,bool) }
			

			
			(L:GENL Pushed,bool) (L:GENL Pushed LF,bool) != if{ 
						(>K:TOGGLE_ALTERNATOR1)
			(L:GENL Pushed,bool) (>L:GENL Pushed LF,bool) }
			

			
			(L:GENR Pushed,bool) (L:GENR Pushed LF,bool) != if{ 
						(>K:TOGGLE_ALTERNATOR2)
			(L:GENR Pushed,bool) (>L:GENR Pushed LF,bool) }
			
(*===============================Ground power LOGIC=========================================================================*)
			
			(L:GPOW Pushed,bool) (L:GPOW Pushed LF,bool) != if{ 
						(L:GroundPower,bool) ! (>L:GroundPower,bool) 
						
										
			(L:GPOW Pushed,bool) (>L:GPOW Pushed LF,bool) }

		

			
			(L:BTIE Pushed,bool) (L:BTIE Pushed LF,bool) != if{ 
						(L:HJET_BusTie,bool) ! (>L:HJET_BusTie,bool) 
			(L:BTIE Pushed,bool) (>L:BTIE Pushed LF,bool) }
			

	
	(L:CPOW Pushed,bool) (L:CPOW Pushed LF,bool) != if{ 
				(L:HJET_CabinRelay,bool) ! (>L:HJET_CabinRelay,bool) 
	(L:CPOW Pushed,bool) (>L:CPOW Pushed LF,bool) }
	

	
	(L:PDISC Pushed,bool) (L:PDISC Pushed LF,bool) != if{ 
				(A:GENERAL ENG STARTER:1,bool) 1 == if{ (>K:TOGGLE_STARTER1) } 
				(A:GENERAL ENG STARTER:2,bool) 1 == if{ (>K:TOGGLE_STARTER2) }
	(L:PDISC Pushed,bool) (>L:PDISC Pushed LF,bool) }
	
(*============Nose wheel logic=====================*)	

	
	
(*AFC LOGIC*)
	(L:AFCYAW Pushed,bool) 1 == (L:AFCROLL Pushed,bool) 1 == or (L:AFCPITCH Pushed,bool) 1 == or if{ (A:AUTOPILOT DISENGAGED, Bool) 0 == if{ (&gt;K:AUTOPILOT_DISENGAGE_TOGGLE) } } els{ (A:AUTOPILOT DISENGAGED, Bool) 1 == if{ (&gt;K:AUTOPILOT_DISENGAGE_TOGGLE) }
	
(*FLCH LOGIC*)	

(*============Pressurization logic=====================*)
	 (L:HJET_Pressurisaiton_hold_active,bool) 0 == if{  (A:INDICATED ALTITUDE,feet) 5.375 / (>L:Hjet_Pressurization_Alt_target,enum)
	 } els{ (A:PRESSURIZATION CABIN ALTITUDE,Feet) (>L:Hjet_Pressurization_Alt_target,enum) }
	
	(A:PRESSURIZATION CABIN ALTITUDE,Feet) 14000 > if{ (L:HJET_MASKS_DROPPED,bool) 0 == if{ 1 (>L:HJET_MASKS_DROPPED,bool) } }
	(L:HJET_PRESSURIZATION_CABIN_OXYMASK, number)  1 ==  if{ (L:HJET_MASKS_DROPPED,bool) 0 == if{ 1 (>L:HJET_MASKS_DROPPED,bool) } }
	
	
	 (L:Hjet_Pressurization_Alt_target,enum) 8000 &gt; if{ 8000 (>L:Hjet_Pressurization_Alt_target,enum) }
	 
	 (L:Hjet_Pressurization_Alt_target,enum) (A:PRESSURIZATION CABIN ALTITUDE GOAL,Feet) &gt; if{ (>K:KEY_PRESSURIZATION_PRESSURE_ALT_DEC) } els{ (>K:KEY_PRESSURIZATION_PRESSURE_ALT_INC) }
	
	  0.02 (>L:HJET_Pressurization_KP,enum)
	  (L:Hjet_Pressurization_Alt_target,enum) (A:PRESSURIZATION CABIN ALTITUDE,Feet) - (>L:HJET_Pressurization_error,enum)
	(L:HJET_Pressurization_KP,enum) (L:HJET_Pressurization_error,enum) * (>L:HJET_PRessurisaztion_PID_limit)
	(L:HJET_PRessurisaztion_PID_limit) 16.666 &gt; if{ 16.666  (>L:HJET_PRessurisaztion_PID_limit) }
	(L:HJET_PRessurisaztion_PID_limit) -16.666  &lt; if{ -16.666  (>L:HJET_PRessurisaztion_PID_limit) }
	 
	  (A:PRESSURIZATION PRESSURE DIFFERENTIAL,psi) abs 0.5 &gt; if{
	  (L:HJET_Pressurization_error,enum) 0 &gt; if{
																									
																(A:PRESSURIZATION CABIN ALTITUDE RATE,Feet per second) (L:HJET_PRessurisaztion_PID_limit) &lt; 
																if{
																	(>K:PRESSURIZATION_CLIMB_RATE_INC)
																	1 (>L:HJET_PRESSURIZATION_Fuck1,enum)
																	}
																els{
																	(>K:PRESSURIZATION_CLIMB_RATE_Dec)
																	}
																	


																	} 
												els{
													2 (>L:HJET_PRESSURIZATION_Fuck1,enum)
													(A:PRESSURIZATION CABIN ALTITUDE RATE,Feet per second) (L:HJET_PRessurisaztion_PID_limit) &gt; if{
													(>K:PRESSURIZATION_CLIMB_RATE_DEC)
													} 
													els{
													(>K:PRESSURIZATION_CLIMB_RATE_INC)
													}

													}

													} 
	  (P:Absolute time,seconds) 2 % 0.05 > !
     if{  
	(A:PRESSURIZATION CABIN ALTITUDE RATE,Feet per second) (>L:HJET_Pressurization_Rate,enum) }
	 
	 (A:PRESSURIZATION CABIN ALTITUDE,Feet) (>L:HJET_PRESSURIZATION CABIN ALTITUDE,ENUM)
	 (A:PRESSURIZATION CABIN ALTITUDE GOAL,Feet) (>L:HJET_PRESSURIZATION CABIN ALTITUDE GOAL,ENUM)
	 (A:PRESSURIZATION CABIN ALTITUDE RATE,Feet per second) (>L:HJET_PRESSURIZATION CABIN ALTITUDE RATE,ENUM)
	 (A:PRESSURIZATION PRESSURE DIFFERENTIAL,psi) (>L:HJET_PRESSURIZATION PRESSURE DIFFERENTIAL,ENUM)

(*Pressure dump=====================*)	 

(L:Pressure_Dump_Pushed,bool) (L:Pressure_Dump_Pushed LF,bool) != if{ 
				(&gt;K:PRESSURIZATION_PRESSURE_DUMP_SWITCH) 
	(L:Pressure_Dump_Pushed,bool) (>L:Pressure_Dump_Pushed LF,bool) }

(A:PRESSURIZATION DUMP SWITCH, Bool) (>L:HJET_PRESSURIZATION DUMP SWITCH, Bool)

(*==========Spoiler logic=====================*)	
(A:SPOILERS HANDLE POSITION,Position 16k) (>L:SPOILERS HANDLE POSITION,enum)
(A:GENERAL ENG THROTTLE LEVER POSITION:1,percent) 85 &gt; (A:GENERAL ENG THROTTLE LEVER POSITION:2,percent) 85 &gt; or if{ 
(A:SPOILERS HANDLE POSITION,Position 16k) 0 &gt; if{ 0 (>K:SPOILERS_SET) }

 }
 
 (*==========Monitoring=====================*)	
(L:REVERSION Pushed,bool) (L:REVERSION Pushed LF,bool) != if{ 

			(L:REVERSION Pushed,bool) 1 == if{
			
			(A:INDICATED ALTITUDE,feet) (>L:Monitoring_InitAlt,enum)
												}


	(L:REVERSION Pushed,bool) (>L:REVERSION Pushed LF,bool) }
	
(* ======================###################### ELECTRICAL SYSTEM ################============================================================== *)		
	
	
	
(* ======================GROUND POWER============================================================== *)	
(A:EXTERNAL POWER ON:1, Bool)(>L:MONITOR THE GPU1 power on,BOOL)

(A:EXTERNAL POWER AVAILABLE:1, Bool) (>L:MONITOR gpu available,enum)

(L:RunApuOnce,bool) 0 == if{ (>K:APU_STARTER) 0 (>K:BLEED_AIR_SOURCE_CONTROL_SET) 1 (>L:RunApuOnce,bool) }

(L:GENL Pushed,bool) 1 == (A:GENERAL ENG PCT MAX RPM:1, Percent) 20 &gt; and if{ (A:GENERAL ENG MASTER ALTERNATOR:1, Bool) 0 == if{ (&gt;K:TOGGLE_ALTERNATOR1) } }
(L:GENR Pushed,bool) 1 == (A:GENERAL ENG PCT MAX RPM:2, Percent) 20 &gt; and if{ (A:GENERAL ENG MASTER ALTERNATOR:2, Bool) 0 == if{ (&gt;K:TOGGLE_ALTERNATOR2) } }


(A:GENERAL ENG MASTER ALTERNATOR:1, bool) (A:GENERAL ENG PCT MAX RPM:1, Percent) 40 &gt; and if{ 1 (>L:HJET_GEN1_Active,bool) } els{  0 (>L:HJET_GEN1_Active,bool) } 
(A:GENERAL ENG MASTER ALTERNATOR:2, bool) (A:GENERAL ENG PCT MAX RPM:2, Percent) 40 &gt; and if{ 1 (>L:HJET_GEN2_Active,bool) } els{  0 (>L:HJET_GEN2_Active,bool) } 



(L:HJET_GEN1_Active,bool) 0 == (A:GENERAL ENG PCT MAX RPM:1, Percent) 39 &lt; and if{ (A:GENERAL ENG MASTER ALTERNATOR:1, Bool) 1 == if{ (&gt;K:TOGGLE_ALTERNATOR1) } }
(L:HJET_GEN2_Active,bool) 0 == (A:GENERAL ENG PCT MAX RPM:2, Percent) 39 &lt; and if{ (A:GENERAL ENG MASTER ALTERNATOR:2, Bool) 1 == if{ (&gt;K:TOGGLE_ALTERNATOR2) } }

(A:SIM ON GROUND,bool) 1 == (A:BRAKE PARKING INDICATOR,bool) 1 == (L:HJET_GEN1_Active,bool) 0 == (L:HJET_GEN2_Active,bool) 0 == (L:ENABLE GPU,bool) 1 == and and and and if{ 1 (>L:GroundPowerAvailable,bool) } els{ 0 (>L:GroundPowerAvailable,bool) 0 (>L:GroundPower,bool) }	
	
(L:GroundPower,bool) 1 == if{ 1 (>L:!!!!!!!!BAAAAAAAAAAZZZZZZZZZ,bool) (A:APU GENERATOR SWITCH:1, Bool) 0 == if{ 1 (&gt;K:APU_GENERATOR_SWITCH_TOGGLE) } } els{ 0 (>L:!!!!!!!!BAAAAAAAAAAZZZZZZZZZ,bool) (A:APU GENERATOR SWITCH:1, Bool) 1 == if{ 1 (&gt;K:APU_GENERATOR_SWITCH_TOGGLE) } }	


			
(*  ======================RELAY SWITCHING============================================================== *)	

(L:ElectricalInit,bool) 0 == if{ 1 (>L:HJET_BusTie,bool) 1 (>L:ElectricalInit,bool) }		

(A:ELECTRICAL MASTER BATTERY,bool) 1 ==  if{ (A:GENERAL ENG STARTER:1,bool) 0 == (A:GENERAL ENG STARTER:2,bool) 0 == and if{ 1 (>L:HJET_BatteryRelay1,bool) 1 (>L:HJET_BatteryRelay2,bool) } els{ (L:HJET_GEN1_Active,bool) 0 == (L:HJET_GEN2_Active,bool) 0 == and if{ 1 (>L:HJET_BatteryRelay1,bool) 0 (>L:HJET_BatteryRelay2,bool) } els{ 1 (>L:HJET_BatteryRelay1,bool) 1 (>L:HJET_BatteryRelay2,bool) } } } els{ 0 (>L:HJET_BatteryRelay1,bool) 0 (>L:HJET_BatteryRelay2,bool) }


(L:HJET_GEN1_Active,bool) (>L:HJET_GenRelayL,bool)
(L:HJET_GEN2_Active,bool) (>L:HJET_GenRelayR,bool)




(L:HJET_BatteryRelay1,bool) 1 == (L:HJET_GEN1_Active,bool) 1 == or if{ 1 (>L:HJET_MainBusBar1,bool) 7 (>L:AM I at 7 ,enum) } els{ 0 (>L:HJET_MainBusBar1,bool) 1 (>L:AM I at 1 ,enum) }
(L:HJET_BatteryRelay2,bool) 1 == (L:HJET_GEN2_Active,bool) 1 == or if{ 1 (>L:HJET_MainBusBar2,bool) } els{ 0 (>L:HJET_MainBusBar2,bool) 2 (>L:AM I at 2 ,enum) }






(L:HJET_GEN1_Active,bool) 1 == (L:HJET_GEN2_Active,bool) 0 == and if{ 1 (>L:HJET_AutoBuscond1,bool) } els{ 0 (>L:HJET_AutoBuscond1,bool) }
(L:HJET_GEN2_Active,bool) 1 == (L:HJET_GEN1_Active,bool) 0 == and if{ 1 (>L:HJET_AutoBuscond2,bool) } els{ 0 (>L:HJET_AutoBuscond2,bool) }
(A:GENERAL ENG STARTER:1,bool) 1 == (A:GENERAL ENG STARTER:2,bool) 1 == or if{ 1 (>L:HJET_AutoBuscond3,bool) } els{ 0 (>L:HJET_AutoBuscond3,bool) }
(A:APU GENERATOR ACTIVE,bool) 1 == (A:APU GENERATOR ACTIVE,bool) 1 == and if{ 1 (>L:HJET_MainBusBar2,bool) 1 (>L:HJET_AutoBuscond4,bool) } els{ 0 (>L:HJET_AutoBuscond4,bool) }


(L:HJET_AutoBuscond1,bool) 0 == (L:HJET_AutoBuscond2,bool) 0 == (L:HJET_AutoBuscond3,bool) 0 == (L:HJET_AutoBuscond4,bool) 0 == and and and if{ 0 (>L:HJET_AutoBusTie,bool) } els{ 1 (>L:HJET_AutoBusTie,bool) }
(L:HJET_AutoBusTie,bool) 1 == (L:HJET_BusTie,bool) 1 == and if{ 1 (>L:HJET_BusIsTied,bool) } els{ 0 (>L:HJET_BusIsTied,bool) }

(L:HJET_MainBusBar1,bool) 1 == (L:HJET_BusIsTied,bool) 1 == and if{ 1 (>L:HJET_MainBusBar2,bool) }
(A:APU GENERATOR ACTIVE,bool) 1 == (L:GroundPowerAvailable,bool) 1 == and (L:HJET_MainBusBar1,bool) 1 == (L:HJET_BusIsTied,bool) 1 == and and if{ 1 (>L:HJET_MainBusBar2,bool) 3 (>L:AM I at 3 ,enum) }
(L:HJET_MainBusBar2,bool) 1 == (L:HJET_BusIsTied,bool) 1 == and if{ 1 (>L:HJET_MainBusBar1,bool) 4 (>L:AM I at 4 ,enum) }

(* ======================LOAD SHED *1 Gen off============================================================== *)	


(*  ======================LOAD SHED *2 Gen off============================================================== *)	

(L:HJET_GEN2_Active,bool) 0 == (L:HJET_GEN1_Active,bool) 0 ==  (A:APU GENERATOR ACTIVE,bool) 0 ==  and and if{ 1 (>L:HJET_MainBus1,bool) 1 (>L:HJET_MainBus2,bool) 1 (>L:HJET_Bat1C,bool) 1 (>L:HJET_Bat2C,bool) 1 (>L:HJET_ShedBus,bool) } els{ 
(L:HJET_GEN2_Active,bool) 1 == (L:HJET_GEN1_Active,bool) 1 ==  and (A:APU GENERATOR ACTIVE,bool) 1 ==  or if{ 0 (>L:HJET_MainBus1,bool) 0 (>L:HJET_MainBus2,bool) 0 (>L:HJET_Bat1C,bool) 0 (>L:HJET_Bat2C,bool) 0 (>L:HJET_ShedBus,bool) } }
 }
(L:HJET_AutoBuscond1,bool) (L:HJET_AutoBuscond2,bool) or if{ 1 (>L:HJET_ShedBus,bool) 1 (>L:HJET_CabinRelay,bool) 0 (>L:AirCondState,bool)  0 (>L:HJET_MainBus1,bool) 0 (>L:HJET_MainBus2,bool) 0 (>L:HJET_Bat1C,bool) 0 (>L:HJET_Bat2C,bool) }

(L:HJET_BatteryRelay1,bool)
(L:HJET_BatteryRelay2,bool)
(L:HJET_GenRelayL,bool)
(L:HJET_GenRelayR,bool)
(L:HJET_CabinRelay,bool)
(L:HJET_BusTie,bool)
(L:HJET_AutoBusTie,bool)
(L:HJET_BusIsTied,bool)
(L:HJET_MainBusBar1,bool)
(L:HJET_MainBusBar2,bool)
(L:HJET_Bat1A,bool)
(L:HJET_Bat1B,bool)
(L:HJET_Bat1C,bool)
(L:HJET_MainBus1,bool)
(L:HJET_Bat2A,bool)
(L:HJET_Bat2B,bool)
(L:HJET_Bat2C,bool)
(L:HJET_MainBus2,bool)
(L:HJET_ShedBus,bool)



(*  ======================VOLTAGE============================================================== *)

(A:ELECTRICAL BATTERY VOLTAGE,Volts) (>L:HJET_ELECTRICAL BATTERY VOLTAGE,Volts)
(L:HJET_MainBusBar1,bool) (A:ELECTRICAL MAIN BUS VOLTAGE,Volts) * (>L:HJET_ELECTRICAL MAIN BUS VOLTAGE1,Volts)
(L:HJET_MainBusBar2,bool) (A:ELECTRICAL MAIN BUS VOLTAGE,Volts) * (>L:HJET_ELECTRICAL MAIN BUS VOLTAGE2,Volts)
(A:ELECTRICAL MAIN BUS VOLTAGE,Volts) (>L:HJET_ELECTRICAL MAIN BUS VOLTAGE,Volts)
(A:ELECTRICAL GENALT BUS VOLTAGE:1,Volts) (>L:HJET_ELECTRICAL GENALT BUS VOLTAGE:1,Volts) 
(A:ELECTRICAL GENALT BUS VOLTAGE:2,Volts) (>L:HJET_ELECTRICAL GENALT BUS VOLTAGE:2,Volts) 

(*  ======================CURRENT============================================================== *)	
(A:ELECTRICAL AVIONICS BUS AMPS,Amperes) (>L:HJET_ELECTRICAL AVIONICS BUS AMPS,Amperes)  
(L:HJET_CabinRelay,bool) ! 20 * (L:HJET_GEN1_Active,bool) * (A:ELECTRICAL GENALT BUS AMPS:1,Amperes) + (>L:HJET_ELECTRICAL GENALT BUS AMPS 1,Amperes) 
(A:ELECTRICAL GENALT BUS AMPS:2,Amperes) (>L:HJET_ELECTRICAL GENALT BUS AMPS 2,Amperes)
(A:ELECTRICAL MAIN BUS AMPS:1,Amperes) (>L:HJET_ELECTRICAL MAIN BUS AMPS,Amperes)
(A:ELECTRICAL BATTERY LOAD,Amperes) (>L:HJET_ELECTRICAL BATTERY LOAD,Amperes) 
(A:ELECTRICAL BATTERY BUS AMPS,Amperes) (>L:HJET_ELECTRICAL BATTERY BUS AMPS,Amperes)  

(L:HJET_GEN1_Active,bool) (>L:HJET_GENERAL ENG GENERATOR ACTIVE 1,bool) 
(L:HJET_GEN2_Active,bool) (>L:HJET_GENERAL ENG GENERATOR ACTIVE 2,bool)
 
 
 (*  ################################################## FUEL SYSTEM ############################################### *)	
 

			
 (L:runOnceFuel,bool) ! if{ (A:FUEL TOTAL QUANTITY,gallons) (>L:HJFuel_RefillVariable,enum) (>K:MIXTURE_RICH) 1 (>L:runOnceFuel,bool) }

 (* (A:FUEL TOTAL QUANTITY,gallons) (L:FUEL TOTAL QUANTITY LF,gallons) - abs 7 > if{ 
 
		(A:FUEL TOTAL QUANTITY,gallons) (>L:HJFuel_RefillVariable,enum)
												}
												

 
 	  (P:Absolute time,seconds) 2 % 0.05 > !
     if{ (A:FUEL TOTAL QUANTITY,gallons) (>L:FUEL TOTAL QUANTITY LF,gallons) } *)	
 
			
											
			 
(A:FUEL TANK SELECTOR:1,Enum) (>L:!!!!!!!!!FuelTankSelector1,enum)
(A:FUEL TANK SELECTOR:2,Enum) (>L:!!!!!!!!!FuelTankSelector2,enum)	



(A:GENERAL ENG COMBUSTION:1,bool) if{ (A:GENERAL ENG STARTER:1,bool) 1 == if{ (>K:TOGGLE_STARTER1) } }

(A:GENERAL ENG COMBUSTION:2,bool) if{ (A:GENERAL ENG STARTER:2,bool) 1 == if{ (>K:TOGGLE_STARTER2) } }


	 
(*  Automated Fuel tank transfer *)	


		(L:HJFuel_XfeedActiveL,bool) 0 == (L:HJFuel_XfeedActiveR,bool) 0 == and (L:HJFuel_AutoXfeedActiveL,bool) 0 == and (L:HJFuel_AutoXfeedActiveR,bool) 0 == and if{ 


 (A:FUEL TOTAL QUANTITY,gallons) 20 &gt; if{
(L:HJFuel_FUEL TANK CENTER LEVEL,percent) 90 &gt;= if{ (A:FUEL TANK SELECTOR:2,Enum) 6 != if{ 6 (>K:FUEL_SELECTOR_2_SET) } (A:FUEL TANK SELECTOR:1,Enum) 6 != if{ 6 (>K:FUEL_SELECTOR_SET) } }
													els{
													(L:HJFuel_FUEL TANK CENTER2 LEVEL,percent) 5 &gt; if{ 1 (>L:HJFuel_CTRXfer,bool)
																										(A:FUEL TANK SELECTOR:2,Enum) 7 != if{ 7 (>K:FUEL_SELECTOR_2_SET) } (A:FUEL TANK SELECTOR:1,Enum) 7 != if{ 7 (>K:FUEL_SELECTOR_SET) } }
																										els{ 0 (>L:HJFuel_CTRXfer,bool) (L:HJFuel_FUEL TANK CENTER LEVEL,percent) 5 &gt;= if{ 
																																								(A:FUEL TANK SELECTOR:2,Enum) 6 != if{ 6 (>K:FUEL_SELECTOR_2_SET) } (A:FUEL TANK SELECTOR:1,Enum) 6  != if{ 6 (>K:FUEL_SELECTOR_SET) } }
																																								els{ (A:FUEL TANK SELECTOR:2,Enum) 3 != if{ 3 (>K:FUEL_SELECTOR_2_SET) } (A:FUEL TANK SELECTOR:1,Enum) 2 != if{ 2 (>K:FUEL_SELECTOR_SET) } }
																											}
													}
											} els{ (A:FUEL TANK SELECTOR:2,Enum) 1 != if{ 1 (>K:FUEL_SELECTOR_2_SET) } (A:FUEL TANK SELECTOR:1,Enum) 1 != if{ 1 (>K:FUEL_SELECTOR_SET) } } 
											} els{ (A:FUEL TANK SELECTOR:2,Enum) 1 != if{ 1 (>K:FUEL_SELECTOR_2_SET) } (A:FUEL TANK SELECTOR:1,Enum) 1 != if{ 1 (>K:FUEL_SELECTOR_SET) } }
											
											
											1 (>L:heyIamHere!,ENUM)

(*  Variables Calculations *)		
		 
		(A:Fuel tank center quantity,gallons) 6.7 * 10 / near 10 * (>L:HJFuel_Fuel tank center quantity,enum)
		(A:Fuel tank center2 quantity,gallons) 6.7 * 10 / near 10 * (>L:HJFuel_FUEL TANK CENTER2 QUANTITY,enum)
		(L:HJFuel_FUEL TANK CENTER2 QUANTITY,enum) (L:HJFuel_Fuel tank center quantity,enum) + (>L:HJFuel_FUEL TANK TOTAL CENTER QUANTITY,enum)

		(A:Fuel left quantity,gallons) 6.7 * 10 / near 10 * (>L:HJFuel_Fuel tank left quantity,enum)
		(A:Fuel right quantity,gallons) 6.7 * 10 / near 10 * (>L:HJFuel_Fuel tank right quantity,enum)

		(A:FUEL TOTAL QUANTITY,gallons) 6.7 * 10 / near 10 * (>L:HJFuel_FUEL TOTAL QUANTITY,enum)

		(A:FUEL TANK CENTER LEVEL,percent) (>L:HJFuel_FUEL TANK CENTER LEVEL,percent)
		(A:FUEL TANK CENTER2 LEVEL,percent) (>L:HJFuel_FUEL TANK CENTER2 LEVEL,percent)
		(A:FUEL TANK LEFT MAIN LEVEL,percent) (>L:HJFuel_FUEL TANK LEFT MAIN LEVEL,percent)
		(A:FUEL TANK RIGHT MAIN LEVEL,percent) (>L:HJFuel_FUEL TANK RIGHT MAIN LEVEL,percent)

		(A:FUEL TANK SELECTOR:1,Enum) (>L:HJFuel_FUEL TANK SELECTOR1,Enum)
		(A:FUEL CROSS FEED,Enum) (>L:HJFuel_FUEL CROSS FEED,Enum)


		(A:GENERAL ENG FUEL PUMP SWITCH:1,Bool) (>L:HJFuel_GENERAL ENG FUEL PUMP SWITCH1,Bool)
		(A:GENERAL ENG FUEL PUMP SWITCH:2,Bool) (>L:HJFuel_GENERAL ENG FUEL PUMP SWITCH2,Bool)
 

	2 (>L:heyIamHere2!,ENUM)
	

 (A:GENERAL ENG THROTTLE LEVER POSITION:1, part) -50 * 50 + (>L:HJET_Throttle A,enum)
  (A:GENERAL ENG THROTTLE LEVER POSITION:2, part) -50 * 50 + (>L:HJET_Throttle B,enum)
  
  (A:GENERAL ENG FUEL PRESSURE:1,Psi) (>L:HJFuel_Fuel pressure R,enum)

(*  Fuel Boost pump L action *)		
	
	(L:FuelPL_Knob, number) -1 == if{ (A:GENERAL ENG FUEL PUMP ON:1,bool) if{ (>K:TOGGLE_ELECT_FUEL_PUMP1) } }
	(L:FuelPL_Knob, number) 1 == if{ (A:GENERAL ENG FUEL PUMP ON:1,bool) ! if{ (>K:TOGGLE_ELECT_FUEL_PUMP1) } }
	
	(L:FuelPL_Knob, number) 0 == if{ 
	(A:GENERAL ENG STARTER:1,bool) 1 == (L:HJFuel_XfeedActiveR,bool) 1 == or (L:HJFuel_AutoXfeedActiveR,bool) 1 == or (L:HJFuel_FUEL TANK LEFT MAIN LEVEL,percent) 20 &lt;= or if{ (A:GENERAL ENG FUEL PUMP ON:1,bool) ! if{ (>K:TOGGLE_ELECT_FUEL_PUMP1) } } 
	(A:GENERAL ENG STARTER:1,bool) 0 == (L:HJFuel_XfeedActiveR,bool) 0 == and (L:HJFuel_AutoXfeedActiveR,bool) 0 == and (L:HJFuel_FUEL TANK LEFT MAIN LEVEL,percent) 20 &gt; and if{ (A:GENERAL ENG FUEL PUMP ON:1,bool) if{ (>K:TOGGLE_ELECT_FUEL_PUMP1) } } 
	}
	
	
(*  Fuel Boost pump R action *)		

	(L:FuelPR_Knob, number) -1 == if{ (A:GENERAL ENG FUEL PUMP ON:2,bool) if{ (>K:TOGGLE_ELECT_FUEL_PUMP2) } }
	(L:FuelPR_Knob, number) 1 == if{ (A:GENERAL ENG FUEL PUMP ON:2,bool) ! if{ (>K:TOGGLE_ELECT_FUEL_PUMP2) } }
	
	(L:FuelPR_Knob, number) 0 == if{ 
	(A:GENERAL ENG STARTER:2,bool) 1 == (L:HJFuel_XfeedActiveL,bool) 1 == or (L:HJFuel_AutoXfeedActiveL,bool) 1 == or (L:HJFuel_FUEL TANK RIGHT MAIN LEVEL,percent) 20 &lt;= or if{ (A:GENERAL ENG FUEL PUMP ON:2,bool) ! if{ (>K:TOGGLE_ELECT_FUEL_PUMP2) } } 
	(A:GENERAL ENG STARTER:2,bool) 0 == (L:HJFuel_XfeedActiveL,bool) 0 == and (L:HJFuel_AutoXfeedActiveL,bool) 0 == and (L:HJFuel_FUEL TANK RIGHT MAIN LEVEL,percent) 20 &gt; and if{ (A:GENERAL ENG FUEL PUMP ON:2,bool) if{ (>K:TOGGLE_ELECT_FUEL_PUMP2) } } 
	}
	
	
(*  XFEED action *)		
		
		(* to Left *)	
		(L:FuelXF_Knob, number) -1 == if{ 1 (>L:HJFuel_XfeedActiveL,bool) (A:FUEL TANK SELECTOR:2,Enum) 3 != if{ 3 (>K:FUEL_SELECTOR_2_SET) } (A:FUEL TANK SELECTOR:1,Enum) 3 != if{ 3 (>K:FUEL_SELECTOR_SET) } } els{ 0 (>L:HJFuel_XfeedActiveL,bool) }
		(*  to right *)			
		(L:FuelXF_Knob, number) 1 == if{ 1 (>L:HJFuel_XfeedActiveR,bool) (A:FUEL TANK SELECTOR:1,Enum) 2 != if{ 2 (>K:FUEL_SELECTOR_SET) } (A:FUEL TANK SELECTOR:2,Enum) 2 != if{ 2 (>K:FUEL_SELECTOR_2_SET) } } els{ 0 (>L:HJFuel_XfeedActiveR,bool) }
		(*  Auto *)			
		(L:FuelXF_Knob, number) 0 == if{ 

			(L:HJFuel_Fuel tank left quantity,enum) (L:HJFuel_Fuel tank right quantity,enum) - 20 &gt;= if{ 1 (>L:HJFuel_AutoXfeedActiveR,bool) (A:FUEL TANK SELECTOR:2,Enum) 2 != if{ 2 (>K:FUEL_SELECTOR_2_SET) } (A:FUEL TANK SELECTOR:1,Enum) 2 != if{ 2 (>K:FUEL_SELECTOR_SET) } } els{ 0 (>L:HJFuel_AutoXfeedActiveR,bool) }
			
			(L:HJFuel_Fuel tank right quantity,enum) (L:HJFuel_Fuel tank left quantity,enum) - 20 &gt;= if{ 1 (>L:HJFuel_AutoXfeedActiveL,bool) (A:FUEL TANK SELECTOR:1,Enum) 3 != if{ 3 (>K:FUEL_SELECTOR_SET) } (A:FUEL TANK SELECTOR:2,Enum) 3 != if{ 3 (>K:FUEL_SELECTOR_2_SET) } } els{ 0 (>L:HJFuel_AutoXfeedActiveL,bool) }

		}
		
		3 (>L:heyIamHere3!,ENUM)
		
(*  nose wheel logic *)		
	(L:NWS Pushed,bool) 1 == (A:SIM ON GROUND, Bool) 1 == and if{ 0 (>K:RUDDER_SET) }
	
	
	 (*  ################################################## HYDRAULIC SYSTEM ############################################### *)	
	 (L:HJET_HYD_TOTAL_QUANTIY_PCT,ENUM)
	 (L:HJET_HYD_TOTAL_PRESSURE_PCT,ENUM)
	 (L:HJET_HYD_PRESSURE_ACCUM_R,ENUM)
	 (L:HJET_HYD_PRESSURE_ACCUM_C,ENUM)	
	 (L:HJET_HYD_PRESSURE_ACCUM_D,ENUM)
	 (L:HJET_HYD_PRESSURE_PBRAKE,ENUM)
	 (L:HJET_HYD_PUMP_ON,ENUM)
	 

		(*  ---------RNG----- *)
  (P:Absolute time,seconds) 1 % 0.05 > ! if{		

  (L:INSRandFact31,number) 0 ==
    if{ 
      (P:Absolute Time,seconds) abs 10 / (>L:INSRandFact31,number) 
    }
  767789427 (L:INSRandFact31,number) * 4711345623 + 2000000000 % d (>L:INSRandFact31,number)
  20000000000 / 1 % abs 10 * (>L:Final_random,number) 
		

		(L:Final_random,number) 5 > if{ 1 (>L:Final_random_Sign,enum) } els{ -1 (>L:Final_random_Sign,enum) }
		(L:HJET_DELAY_TIMER,number) 1 + (>L:HJET_DELAY_TIMER,number)
		}
			
			
		
		(*  ---------INIT----- *)
		
		
		(L:HJET_DELAY_TIMER,number) 3 > if{
		
			(L:HJET_INIT_HYD,bool) 0 == if{ 
			
											
											(L:HJET_HYD_TOTAL_PRESSURE_PCT,ENUM) 0 == if{ 22.5 (L:Final_random,number) * (L:Final_random_Sign,enum) * 2725 + (>L:HJET_HYD_TOTAL_PRESSURE_PCT,ENUM) } 
											
											
											
											1 (>L:HJET_INIT_HYD,bool) 
										}
											
											}
		(*  ---------logic----- *)									
		(L:HJET_HYD_INTERIM_TOTAL_PRESSURE_PCT,ENUM) (L:HJET_HYD_TOTAL_PRESSURE_PCT,ENUM) &lt; if{ 1 (>L:HJET_HYD_PUMP_ON,ENUM) (L:HJET_HYD_INTERIM_TOTAL_PRESSURE_PCT,ENUM) 7 + (>L:HJET_HYD_INTERIM_TOTAL_PRESSURE_PCT,ENUM) } else{ 0 (>L:HJET_HYD_PUMP_ON,ENUM) }
	(*  ---------checklist----- *)
 
	
				(L:HJET_Checklist_scoll_up,bool) (L:HJET_Checklist_scoll_up_LF,bool) != if{ 
						(&gt;H:gauges_ha420_sys_Checklist_scoll_up)					
			(L:HJET_Checklist_scoll_up,bool) (>L:HJET_Checklist_scoll_up_LF,bool) }
			
			(L:HJET_Checklist_scoll_dn,bool) (L:HJET_Checklist_scoll_dn_LF,bool) != if{ 
						(&gt;H:gauges_ha420_sys_Checklist_scoll_down)					
			(L:HJET_Checklist_scoll_dn,bool) (>L:HJET_Checklist_scoll_dn_LF,bool) }
			
			(L:HJET_Checklist_enter,bool) (L:HJET_Checklist_enter_LF,bool) != if{ 
						(&gt;H:gauges_ha420_sys_Checklist_enter)					
			(L:HJET_Checklist_enter,bool) (>L:HJET_Checklist_enter_LF,bool) }
			
			(L:HJET_Checklist_Longenter,bool) (L:HJET_Checklist_Longenter_LF,bool) != if{ 
						(&gt;H:gauges_ha420_sys_Checklist_Longenter)					
			(L:HJET_Checklist_Longenter,bool) (>L:HJET_Checklist_Longenter_LF,bool) }
	 
			</UPDATE_CODE>
			</UseTemplate>
		</Component>

		<!-- =============================================Marwan Cutom events ========================================================= -->


		<Component ID="hitbox_Landing_Gear_Lever" Node="hitbox_Landing_Gear_Lever">
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<CURSOR>Hand</CURSOR>
				<TOOLTIPID>Landing Gear</TOOLTIPID>
				<MOUSEFLAGS_DEFAULT_IM>LeftSingle+LeftRelease+LeftDrag+WheelUp+WheelDown</MOUSEFLAGS_DEFAULT_IM>
				<MouseFlags>LeftAll+WheelUp+WheelDown</MouseFlags>
				<CALLBACKCODE>

							(M:Event) 'LeftSingle' scmp 0 == if{ (>K:GEAR_TOGGLE) }
							(M:Event) 'WheelUp' scmp 0 == if{ 
							(A:GEAR HANDLE POSITION,bool) if{ (>K:GEAR_TOGGLE) }
							}

							(M:Event) 'WheelDown' scmp 0 == if{
							(A:GEAR HANDLE POSITION,bool) ! if{ (>K:GEAR_TOGGLE) }
							}		
				</CALLBACKCODE>

			</UseTemplate>


			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>landing_gear_lever</ANIM_NAME>
				<ANIM_CODE>(A:GEAR HANDLE POSITION,bool) 100 *</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>200</ANIM_LAG>

			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_AnimTriggers_SoundEvents_Same">
				<ANIM_NAME>landing_gear_lever</ANIM_NAME>
				<WWISE_EVENT>gear_lever</WWISE_EVENT>
				<NORMALIZED_TIME>0.2</NORMALIZED_TIME>

			</UseTemplate>
		</Component>

		<!-- =============================================stickShaker ========================================================= -->
		<Component ID="stickShakerL" Node="stickShakerL">
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<!-- Throttle and Prop levers SimVars are -25 <=> 100 -->
				<!-- Converted for anim to be between 0 <=> 100 -->
				<ANIM_NAME>stickShakerLAction</ANIM_NAME>
				<ANIM_CODE>(L:HJET_stickShaker,number) (L:StalltestInProgress_0,number) *</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>800</ANIM_LAG>

			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_AnimTriggers_SoundEvents_Same">
				<ANIM_NAME>stickShakerLAction</ANIM_NAME>
				<WWISE_EVENT>custom_sound_ 1</WWISE_EVENT>
				<COUNT>3</COUNT>
				<NORMALIZED_TIME>0.1</NORMALIZED_TIME>

			</UseTemplate>

		</Component>

		<AnimationTriggers Animation="stickShakerLAction">
			<EventTrigger Frame="1" Direction="Forward">
				<SoundEvent WwiseEvent="custom_sound_01" Action="Play" />
			</EventTrigger>

		</AnimationTriggers>


		<Component ID="stickShakerR" Node="stickShakerR">
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<!-- Throttle and Prop levers SimVars are -25 <=> 100 -->
				<!-- Converted for anim to be between 0 <=> 100 -->
				<ANIM_NAME>stickShakerRAction</ANIM_NAME>
				<ANIM_CODE>(L:HJET_stickShaker,number) (L:StalltestInProgress_2,number) *</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>800</ANIM_LAG>

			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_AnimTriggers_SoundEvents_Same">
				<ANIM_NAME>stickShakerRAction</ANIM_NAME>
				<WWISE_EVENT>custom_sound_ 1</WWISE_EVENT>
				<COUNT>3</COUNT>
				<NORMALIZED_TIME>0.1</NORMALIZED_TIME>

			</UseTemplate>

		</Component>

		<AnimationTriggers Animation="stickShakerRAction">
			<EventTrigger Frame="1" Direction="Forward">
				<SoundEvent WwiseEvent="custom_sound_01" Action="Play" />
			</EventTrigger>

		</AnimationTriggers>
		<!-- =============================================toilet door ========================================================= -->
		<Component ID="ToiletDoor" Node="ToiletDoor">
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<CURSOR>Hand</CURSOR>
				<TOOLTIPID>Door: %((L:HJET_TOILET_DOOR_ANIM,bool) 0 == )%{if}Open%{else}Close%{end}</TOOLTIPID>
				<MOUSEFLAGS_DEFAULT_IM>LeftSingle+LeftRelease+LeftDrag+WheelUp+WheelDown</MOUSEFLAGS_DEFAULT_IM>
				<MouseFlags>LeftAll+WheelUp+WheelDown</MouseFlags>
				<CALLBACKCODE>

(M:Event) 'LeftSingle' scmp 0 == if{ (L:HJET_TOILET_DOOR_ANIM,bool) ! (>L:HJET_TOILET_DOOR_ANIM,bool) }
										
				</CALLBACKCODE>

			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<!-- Throttle and Prop levers SimVars are -25 <=> 100 -->
				<!-- Converted for anim to be between 0 <=> 100 -->
				<ANIM_NAME>ToiletDoor</ANIM_NAME>
				<ANIM_CODE>(L:HJET_TOILET_DOOR_ANIM,bool) 100 *</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>500</ANIM_LAG>

			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_AnimTriggers_SoundEvents_Same">
				<ANIM_NAME>ToiletDoor</ANIM_NAME>
				<WWISE_EVENT>battery_switch_off</WWISE_EVENT>
				<COUNT>3</COUNT>
				<NORMALIZED_TIME>0.3</NORMALIZED_TIME>

			</UseTemplate>

		</Component>


		<!-- =============================================Dragging Template ========================================================= -->

		<Template Name="Marwan_Dragging_Template">
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<CURSOR>Hand</CURSOR>
				<TOOLTIPID></TOOLTIPID>
				<MOUSEFLAGS_DEFAULT_IM>LeftSingle+LeftRelease+LeftDrag+WheelUp+WheelDown</MOUSEFLAGS_DEFAULT_IM>
				<MouseFlags>LeftAll+WheelUp+WheelDown</MouseFlags>
				<CALLBACKCODE>

						(M:Event) 'LeftSingle' scmp 0 == if{ (M:#AXIS#) (&gt;L:MOUSE_#LVAR#,number) }

						(M:Event) 'LeftDrag' scmp 0 == if{ 							
												(M:#AXIS#) (L:MOUSE_#LVAR#,number) - 3 + 0 &lt; if{ 
												(L:#LVAR#,number) (M:#AXIS#) (L:MOUSE_#LVAR#,number) - abs -0.1 * #DIR# * + 100 min (&gt;L:#LVAR#, number) (M:#AXIS#) (&gt;L:MOUSE_#LVAR#,number)
																			}
													
												(M:#AXIS#) (L:MOUSE_#LVAR#,number) - 3 - 0 &gt; if{ 
												(L:#LVAR#, number) (M:#AXIS#) (L:MOUSE_#LVAR#,number) - abs -0.1 * #DIR# *  - 0 max (&gt;L:#LVAR#, number) (M:#AXIS#) (&gt;L:MOUSE_#LVAR#,number)
																						}
													}
													
						(M:Event) 'LeftRelease' scmp 0 == if{

									}
										
				</CALLBACKCODE>


			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Anim_Code">

				<ANIM_NAME>#ANIM1#</ANIM_NAME>
				<ANIM_CODE>(L:#LVAR#, number)</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>500</ANIM_LAG>

			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Anim_Code">

				<ANIM_NAME>#ANIM2#</ANIM_NAME>
				<ANIM_CODE>(L:#LVAR#, number)</ANIM_CODE>
				<ANIM_LENGTH>10</ANIM_LENGTH>
				<ANIM_LAG>500</ANIM_LAG>

			</UseTemplate>

		</Template>


		<Component ID="ShadeR" Node="ShadeR">
			<UseTemplate Name="Marwan_Dragging_Template">
				<TOOLTIPID>Shade</TOOLTIPID>
				<ANIM1>shadeRAnimation</ANIM1>
				<ANIM2>shadeRAnimation2</ANIM2>
				<LVAR>shadeR</LVAR>
				<AXIS>X</AXIS>
				<DIR>-1</DIR>

			</UseTemplate>

		</Component>

		<!-- =============================================SunShadeLeft ========================================================= -->

		<Component ID="ShadeL" Node="ShadeL">
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<CURSOR>Hand</CURSOR>
				<TOOLTIPID>Shade: %((L:ShadeLAnim,bool) 0 == )%{if}Open%{else}Close%{end}</TOOLTIPID>
				<MOUSEFLAGS_DEFAULT_IM>LeftSingle+LeftRelease+LeftDrag+WheelUp+WheelDown</MOUSEFLAGS_DEFAULT_IM>
				<MouseFlags>LeftAll+WheelUp+WheelDown</MouseFlags>
				<CALLBACKCODE>

						(M:Event) 'LeftSingle' scmp 0 == if{ (M:X) (&gt;L:MOUSEPOSX_ShadeL,number) }

						(M:Event) 'LeftDrag' scmp 0 == if{ 							
												(M:X) (L:MOUSEPOSX_ShadeL,number) - 3 + 0 &lt; if{ 
												(L:ShadeLAnim,number) (M:X) (L:MOUSEPOSX_ShadeL,number) - abs -0.1 * + 100 min (&gt;L:ShadeLAnim, number) (M:X) (&gt;L:MOUSEPOSX_ShadeL,number)
																			}
													
												(M:X) (L:MOUSEPOSX_ShadeL,number) - 3 - 0 &gt; if{ 
												(L:ShadeLAnim, number) (M:X) (L:MOUSEPOSX_ShadeL,number) - abs -0.1 * - 0 max (&gt;L:ShadeLAnim, number) (M:X) (&gt;L:MOUSEPOSX_ShadeL,number)
																						}
													}
													
						(M:Event) 'LeftRelease' scmp 0 == if{

									}
										
				</CALLBACKCODE>


			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Anim_Code">

				<ANIM_NAME>shadeLAnimation1</ANIM_NAME>
				<ANIM_CODE>(L:ShadeLAnim, number)</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>500</ANIM_LAG>

			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Anim_Code">

				<ANIM_NAME>shadeLAnimation2</ANIM_NAME>
				<ANIM_CODE>(L:ShadeLAnim, number)</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>500</ANIM_LAG>

			</UseTemplate>

		</Component>


		<!-- =============================================SunShaderight ========================================================= -->

		<Component ID="ShadeR" Node="ShadeR">
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<CURSOR>Hand</CURSOR>
				<TOOLTIPID>Shade: %((L:ShadeRAnim,bool) 0 == )%{if}Open%{else}Close%{end}</TOOLTIPID>
				<MOUSEFLAGS_DEFAULT_IM>LeftSingle+LeftRelease+LeftDrag+WheelUp+WheelDown</MOUSEFLAGS_DEFAULT_IM>
				<MouseFlags>LeftAll+WheelUp+WheelDown</MouseFlags>
				<CALLBACKCODE>

(M:Event) 'LeftSingle' scmp 0 == if{ (L:ShadeRAnim,bool) ! (>L:ShadeRAnim,bool) }
										
				</CALLBACKCODE>

			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Anim_Code">

				<ANIM_NAME>shadeRAnimation</ANIM_NAME>
				<ANIM_CODE>(L:ShadeRAnim,bool) 100 *</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>500</ANIM_LAG>

			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Anim_Code">

				<ANIM_NAME>shadeRAnimation2</ANIM_NAME>
				<ANIM_CODE>(L:ShadeRAnim,bool) 100 *</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>500</ANIM_LAG>

			</UseTemplate>

		</Component>
		<!-- =============================================DropMasks========================================================= -->

		<Component ID="DropMaskDoor2" Node="DropMaskDoor2">
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<!-- Throttle and Prop levers SimVars are -25 <=> 100 -->
				<!-- Converted for anim to be between 0 <=> 100 -->
				<ANIM_NAME>DropMaskDoor2</ANIM_NAME>
				<ANIM_CODE>(L:HJET_MASKS_DROPPED,bool) 100 *</ANIM_CODE>
				<ANIM_LENGTH>1</ANIM_LENGTH>
				<ANIM_LAG>20</ANIM_LAG>
			</UseTemplate>

		</Component>

		<Component ID="DropMaskDoor1" Node="DropMaskDoor1">
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<!-- Throttle and Prop levers SimVars are -25 <=> 100 -->
				<!-- Converted for anim to be between 0 <=> 100 -->
				<ANIM_NAME>DropMaskDoor1</ANIM_NAME>
				<ANIM_CODE>(L:HJET_MASKS_DROPPED,bool) 100 *</ANIM_CODE>
				<ANIM_LENGTH>1</ANIM_LENGTH>
				<ANIM_LAG>20</ANIM_LAG>
			</UseTemplate>

		</Component>

		<Component ID="DropMask" Node="DropMask">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:HJET_MASKS_DROPPED,bool)</VISIBILITY_CODE>
			</UseTemplate>
		</Component>


		<!-- =============================================BIRD!========================================================= -->

		<Component ID="birdClick" Node="birdClick">
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<CURSOR>Hand</CURSOR>
				<TOOLTIPID>%((L:BirdVisible,bool) 0 == )%{if}Hide Bird%{else}Show Bird%{end}</TOOLTIPID>
				<MOUSEFLAGS_DEFAULT_IM>LeftSingle+LeftRelease+LeftDrag+WheelUp+WheelDown</MOUSEFLAGS_DEFAULT_IM>
				<MouseFlags>LeftAll+WheelUp+WheelDown</MouseFlags>
				<CALLBACKCODE>

(M:Event) 'LeftSingle' scmp 0 == if{ (L:BirdVisible,bool) ! (>L:BirdVisible,bool) }
										
				</CALLBACKCODE>

			</UseTemplate>


		</Component>


		<Component ID="bird" Node="bird">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:BirdVisible,bool)</VISIBILITY_CODE>
			</UseTemplate>
		</Component>

		<Component ID="birdlr" Node="bird">
			<UseTemplate Name="ASOBO_GT_Anim_Code">

				<ANIM_NAME>birdlr</ANIM_NAME>
				<ANIM_CODE>(A:ACCELERATION BODY X,Feet per second squared) -1.1 * 50 +</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>10</ANIM_LAG>
			</UseTemplate>

		</Component>


		<Component ID="birdfb" Node="birdfb">
			<UseTemplate Name="ASOBO_GT_Anim_Code">

				<ANIM_NAME>birdfb</ANIM_NAME>
				<ANIM_CODE>(A:ACCELERATION BODY Z,Feet per second squared) -8 * (A:ACCELERATION BODY Y,Feet per second squared) 2 * + 50 +</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>100</ANIM_LAG>
			</UseTemplate>

		</Component>


		<!-- =============================================GPU CART========================================================= -->

		<Component ID="interiorwindows" Node="interiorwindows">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(A:CAMERA STATE,NUMBER) 2 ==</VISIBILITY_CODE>
			</UseTemplate>
		</Component>


		<Component ID="exteriorwindows" Node="exteriorwindows">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(A:CAMERA STATE,NUMBER) 2 !=</VISIBILITY_CODE>
			</UseTemplate>
		</Component>

		<Component ID="PAXWINDOWSINTERIOR" Node="PAXWINDOWSINTERIOR">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(A:CAMERA STATE,NUMBER) 2 ==</VISIBILITY_CODE>
			</UseTemplate>
		</Component>


		<!-- =============================================GPU CART========================================================= -->

		<Component ID="SYNOPsCREEN" Node="SYNOPsCREEN">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:synVisible,bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:InitializationCompleted,number) and</VISIBILITY_CODE>
			</UseTemplate>
		</Component>

		<Component ID="SYNOPsCREEN2" Node="SYNOPsCREEN2">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:synVisible,bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:InitializationCompleted,number) and</VISIBILITY_CODE>
			</UseTemplate>
		</Component>

		<Component ID="EicasScreen" Node="EicasScreen">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:HJET_ELECTRICITY_ESTABLISHED,number) (L:InitializationCompleted,number) and</VISIBILITY_CODE>
			</UseTemplate>
		</Component>

		<Component ID="AS1000_PFD_1" Node="AS1000_PFD_1">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:HJET_ELECTRICITY_ESTABLISHED,number) (L:InitializationCompleted,number) and</VISIBILITY_CODE>
			</UseTemplate>
		</Component>

		<Component ID="EADI" Node="EADI">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:HJET_ELECTRICITY_ESTABLISHED,number) (L:InitializationCompleted,number) and</VISIBILITY_CODE>
			</UseTemplate>
		</Component>

		<Component ID="AS1000_PFD_2" Node="AS1000_PFD_2">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:HJET_ELECTRICITY_ESTABLISHED,number) (L:InitializationCompleted,number) and</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="AS1000_MFD" Node="AS1000_MFD">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:HJET_ELECTRICITY_ESTABLISHED,number) (L:InitializationCompleted,number) and</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="AS3000_TSC_1" Node="AS3000_TSC_1">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:HJET_ELECTRICITY_ESTABLISHED,number) (L:InitializationCompleted,number) and</VISIBILITY_CODE>
			</UseTemplate>
		</Component>

		<Component ID="AS3000_TSC_2" Node="AS3000_TSC_2">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:HJET_ELECTRICITY_ESTABLISHED,number) (L:InitializationCompleted,number) and</VISIBILITY_CODE>
			</UseTemplate>
		</Component>

		<Component ID="vnavScreen" Node="vnavScreen">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:show_VSD,bool) (L:WT_INSET_MAP_IS_VISIBLE,bool) (L:WT_MAP_VIEW,bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) (L:InitializationCompleted,number) and and and and</VISIBILITY_CODE>
			</UseTemplate>
		</Component>


		<Component ID="door_container" Node="door_container">
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<!-- Throttle and Prop levers SimVars are -25 <=> 100 -->
				<!-- Converted for anim to be between 0 <=> 100 -->
				<ANIM_NAME>door_container</ANIM_NAME>
				<ANIM_CODE>(L:HJET_EXIT_OPEN, BOOL) 90 *</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>20</ANIM_LAG>

			</UseTemplate>

		</Component>

		<Component ID="DOORSANIM">
			<UseTemplate Name="ASOBO_GT_Anim_Code">

				<ANIM_NAME>MainDoorInteriorAnim</ANIM_NAME>
				<ANIM_CODE>(L:HJET_EXIT_OPEN, BOOL) 100 *</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>20</ANIM_LAG>

			</UseTemplate>


		</Component>


		<!-- ==========fire panel=============== -->
		<Component ID="HA420_FIRE_PANEL">
			<UseTemplate Name="ASOBO_GT_Push_Button_Airliner">
				<COVER_NODE_ID>Guard_Push_FirePanel_L</COVER_NODE_ID>
				<COVER_ANIM_NAME>Guard_Push_FirePanel_L</COVER_ANIM_NAME>
				<NODE_ID>Push_FirePanel_FireBottle_L</NODE_ID>
				<ANIM_NAME>Push_FirePanel_FireBottle_L</ANIM_NAME>
				<LEFT_SINGLE_CODE>
						1 (>L:Block_Throttle_Valve_control_L,bool)
						(A:GENERAL ENG FUEL VALVE:1,Bool) 1 == if{ (>K:TOGGLE_FUEL_VALVE_ENG1) }
			</LEFT_SINGLE_CODE>

				<SEQ1_NODE_ID>Push_FirePanel_FireBottle_L_EMISSIVE</SEQ1_NODE_ID>

				<ONLY_SEQ1 />
				<SEQ1_EMISSIVE_CODE>(A:ENG ON FIRE:1,bool) (L:fireTestInProgress_0) or (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</SEQ1_EMISSIVE_CODE>
				<EMISSIVE_DRIVES_VISIBILITY>True</EMISSIVE_DRIVES_VISIBILITY>
				<NO_EMISSIVE_ON_HELD />

			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Push_Button_Airliner">
				<COVER_NODE_ID>Guard_Push_FirePanel_R</COVER_NODE_ID>
				<COVER_ANIM_NAME>Guard_Push_FirePanel_R</COVER_ANIM_NAME>
				<NODE_ID>Push_FirePanel_FireBottle_R</NODE_ID>
				<ANIM_NAME>Push_FirePanel_FireBottle_R</ANIM_NAME>
				<LEFT_SINGLE_CODE>
						1 (>L:Block_Throttle_Valve_control_R,bool)
						(A:GENERAL ENG FUEL VALVE:2,Bool) 1 == if{ (>K:TOGGLE_FUEL_VALVE_ENG2) }
			</LEFT_SINGLE_CODE>

				<SEQ1_NODE_ID>Push_FirePanel_FireBottle_R_EMISSIVE</SEQ1_NODE_ID>

				<ONLY_SEQ1 />
				<SEQ1_EMISSIVE_CODE>(A:ENG ON FIRE:2,bool) (L:fireTestInProgress_2) or (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</SEQ1_EMISSIVE_CODE>
				<EMISSIVE_DRIVES_VISIBILITY>True</EMISSIVE_DRIVES_VISIBILITY>
				<NO_EMISSIVE_ON_HELD />

			</UseTemplate>


			<Component ID="Push_FirePanel_FireAlarm_L" Node="Push_FirePanel_FireAlarm_L">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>Push_FirePanel_FireAlarm_L</NODE_ID>
					<ANIM_NAME>Push_FirePanel_FireAlarm_L</ANIM_NAME>
					<LEFT_SINGLE_CODE>
					(A:ENG ON FIRE:1,bool) if{ 11 (>K:EXTINGUISH_ENGINE_FIRE) }
			</LEFT_SINGLE_CODE>
					<TOOLTIPID>L Fire bottle</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>

				</UseTemplate>
			</Component>
			<Component ID="Push_FirePanel_FireAlarm_R" Node="Push_FirePanel_FireAlarm_R">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>Push_FirePanel_FireAlarm_R</NODE_ID>
					<ANIM_NAME>Push_FirePanel_FireAlarm_R</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(A:ENG ON FIRE:2,bool) if{ 22 (>K:EXTINGUISH_ENGINE_FIRE) }
			</LEFT_SINGLE_CODE>
					<TOOLTIPID>L Fire bottle</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>

				</UseTemplate>
			</Component>
			<Component ID="Push_FirePanel_FireAlarm_L_EMISSIVE" Node="Push_FirePanel_FireAlarm_L_EMISSIVE">

				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>(A:ENG ON FIRE:1,bool) (A:FIRE BOTTLE DISCHARGED:1,bool) ! and (L:fireTestInProgress_1) or (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or (L:HJET_ELECTRICITY_ESTABLISHED,number) and</VISIBILITY_CODE>
				</UseTemplate>
			</Component>

			<Component ID="Push_FirePanel_FireAlarm_R_EMISSIVE" Node="Push_FirePanel_FireAlarm_R_EMISSIVE">

				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>(A:ENG ON FIRE:2,bool) (A:FIRE BOTTLE DISCHARGED:2,bool) ! and (L:fireTestInProgress_3) or (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or (L:HJET_ELECTRICITY_ESTABLISHED,number) and</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
		</Component>

		<!-- =============================================BATTERY MASTER ========================================================= -->
		<Component ID="HA420_BATTERY_MASTER" Node="HA420_BATTERY_MASTER">
			<UseTemplate Name="ASOBO_GT_Push_Button">
				<NODE_ID>HA420_BATTERY_MASTER</NODE_ID>
				<ANIM_NAME>HA420_BATTERY_MASTER</ANIM_NAME>
				<LEFT_SINGLE_CODE>
						(L:BM Pushed,bool) ! (&gt;L:BM Pushed,bool)
			</LEFT_SINGLE_CODE>
				<TOOLTIPID>%((A:ELECTRICAL MASTER BATTERY, Bool))%{if}TT:COCKPIT.TOOLTIPS.MASTER_SWITCH_BAT_ON%{else}TT:COCKPIT.TOOLTIPS.MASTER_SWITCH_BAT_OFF%{end}</TOOLTIPID>
				<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>

			</UseTemplate>


		</Component>
		<!-- =============================================BATTERY MASTER ========================================================= -->

		<Component ID="HA420_BATTERY_EMISSIVE_OFF" Node="HA420_BATTERY_EMISSIVE_OFF">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(A:ELECTRICAL MASTER BATTERY, Bool) ! (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
			</UseTemplate>
		</Component>

		<Component ID="HA420_BATTERY_EMISSIVE_ON" Node="HA420_BATTERY_EMISSIVE_ON">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(A:ELECTRICAL MASTER BATTERY, Bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
			</UseTemplate>
		</Component>

		<Component ID="ENGINE_Push_Starter_1_Emissive" Node="ENGINE_Push_Starter_1_Emissive">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(A:GENERAL ENG STARTER:1,bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
			</UseTemplate>
		</Component>

		<Component ID="ENGINE_Push_Starter_2_Emissive" Node="ENGINE_Push_Starter_2_Emissive">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(A:GENERAL ENG STARTER:2,bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
			</UseTemplate>
		</Component>


		<Component ID="cockpit_overhead_lights_Left" Node="cockpit_overhead_lights_Left">

			<UseTemplate Name="ASOBO_GT_Material_Emissive_Sim">
				<EMISSIVE_SIMVAR>LIGHT POTENTIOMETER:11</EMISSIVE_SIMVAR>
				<EMISSIVE_SIMVAR_UNITS>percent</EMISSIVE_SIMVAR_UNITS>
				<EMISSIVE_SIMVAR_SCALE>0.01</EMISSIVE_SIMVAR_SCALE>
			</UseTemplate>
		</Component>

		<Component ID="cockpit_overhead_lights_right" Node="cockpit_overhead_lights_right">

			<UseTemplate Name="ASOBO_GT_Material_Emissive_Sim">
				<EMISSIVE_SIMVAR>LIGHT POTENTIOMETER:11</EMISSIVE_SIMVAR>
				<EMISSIVE_SIMVAR_UNITS>percent</EMISSIVE_SIMVAR_UNITS>
				<EMISSIVE_SIMVAR_SCALE>0.01</EMISSIVE_SIMVAR_SCALE>
			</UseTemplate>
		</Component>

		<Component ID="cockpit_overhead_lights_back" Node="cockpit_overhead_lights_back">

			<UseTemplate Name="ASOBO_GT_Material_Emissive_Sim">
				<EMISSIVE_SIMVAR>LIGHT POTENTIOMETER:11</EMISSIVE_SIMVAR>
				<EMISSIVE_SIMVAR_UNITS>percent</EMISSIVE_SIMVAR_UNITS>
				<EMISSIVE_SIMVAR_SCALE>0.01</EMISSIVE_SIMVAR_SCALE>
			</UseTemplate>
		</Component>
		<!-- EMISSIVE CODE IN VC -->

		<Component ID="Decals_Cockpit_Emissive" Node="Decals_Cockpit">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.1 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>

		</Component>


		<Component ID="Cockpit_3d_decals_Emissive" Node="Cockpit_3d_decals">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.12 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>

		</Component>
		<Component ID="baro_decals_Emissive" Node="baro_decals">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.1 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>

		</Component>

		<Component ID="AP_DECAL_Emissive" Node="AP_DECAL">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.1 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="HDG_DECAL_Emissive" Node="HDG_DECAL">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.1 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="YD_DECAL_Emissive" Node="YD_DECAL">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.1 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="FD1_DECAL_Emissive" Node="FD1_DECAL">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.1 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="NAV_DECAL_Emissive" Node="NAV_DECAL">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.1 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="ALT_DECAL_Emissive" Node="ALT_DECAL">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.1 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="VNV_DECAL_Emissive" Node="VNV_DECAL">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.1 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="VS_DECAL_Emissive" Node="VS_DECAL">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.1 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="FLC_DECAL_Emissive" Node="FLC_DECAL">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.1 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="FD2_DECAL_Emissive" Node="FD2_DECAL">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.1 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="APR_DECAL_Emissive" Node="APR_DECAL">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.1 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="CSC_DECAL_Emissive" Node="CSC_DECAL">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.1 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<Component ID="Decals__FMS_MAN_Emissive" Node="Decals__FMS_MAN">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.1 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<Component ID="HA420_knob_FMS_MAN_Emissive" Node="HA420_knob_FMS_MAN">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.1 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<Component ID="AT_DECAL_Emissive" Node="AT_DECAL">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.1 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="BANK_DECAL_Emissive" Node="BANK_DECAL">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.1 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="CPL_DECAL_Emissive" Node="CPL_DECAL">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.1 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>


		<Component ID="VC3_Emissive" Node="VC3">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.1 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>

		</Component>

		<Component ID="VC2_Emissive" Node="VC2">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.1 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>

		</Component>

		<Component ID="paxCabin_Emissive" Node="paxCabin">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>1 (L:PaxCabinLight,number) - (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>

		</Component>


		<Component ID="SYNOPsCREEN_Emissive" Node="SYNOPsCREEN">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.6 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>

		</Component>

		<Component ID="SYNOPsCREEN2_Emissive" Node="SYNOPsCREEN2">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.6 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>

		</Component>

		<Component ID="EicasScreen_Emissive" Node="EicasScreen">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.6 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>

		</Component>

		<Component ID="AS3000_TSC_2_Emissive" Node="AS3000_TSC_2">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.4 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>

		</Component>

		<Component ID="AS3000_TSC_1_Emissive" Node="AS3000_TSC_1">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.4 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>

		</Component>

		<Component ID="vnavScreen_Emissive" Node="vnavScreen">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.6 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>

		</Component>


		<Component ID="KNOB3_ELT_Emissive" Node="KNOB3_ELT">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.4 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<Component ID="Knob_EADI_Baro_Emissive" Node="Knob_EADI_Baro">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.4 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<Component ID="EADI" Node="EADI">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.4 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<Component ID="push_EADI_HPIN_Emissive" Node="push_EADI_HPIN">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.4 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<Component ID="KNOB3_ICEPROTECTION_WINGAI_Emissive" Node="KNOB3_ICEPROTECTION_WINGAI">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.4 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<Component ID="KNOB3_ICEPROTECTION_WINGFLOW_Emissive" Node="KNOB3_ICEPROTECTION_WINGFLOW">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.4 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<Component ID="KNOB3_ICEPROTECTION_TAIL_Emissive" Node="KNOB3_ICEPROTECTION_TAIL">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.4 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<Component ID="KNOB3_FUEL_PUMP_L_Emissive" Node="KNOB3_FUEL_PUMP_L">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.4 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<Component ID="KNOB3_FUEL_XFEED_Emissive" Node="KNOB3_FUEL_XFEED">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.4 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<Component ID="KNOB3_FUEL_PUMP_R_Emissive" Node="KNOB3_FUEL_PUMP_R">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.4 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<Component ID="KNOB3_TRIM_YAW_Emissive" Node="KNOB3_TRIM_YAW">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.4 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>


		<Component ID="altGear_lever_Emissive" Node="altGear_lever">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.4 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<Component ID="emerBrakeEmissive_Emissive" Node="emerBrakeEmissive">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.4 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<Component ID="centrla_eng_starter_Emissive" Node="centrla_eng_starter">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.4 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<Component ID="bads_Emissive" Node="bads">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.4 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<Component ID="elt_pad_Emissive" Node="elt_pad">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.4 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) * (L:HJET_ELECTRICITY_ESTABLISHED,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<!-- =============================================BATTERY MASTER ========================================================= -->


		<!-- =============================================GENERATOR LEFT ========================================================= -->

		<Component ID="HA420_GENL" Node="HA420_GENL">
			<UseTemplate Name="ASOBO_GT_Push_Button">
				<NODE_ID>HA420_GENL</NODE_ID>
				<ANIM_NAME>HA420_GENL</ANIM_NAME>
				<LEFT_SINGLE_CODE>

						(L:GENL Pushed,bool) ! (>L:GENL Pushed,bool)
			</LEFT_SINGLE_CODE>
				<TOOLTIPID>GENL %((L:AFCYAW Pushed,bool))%!2.0f!</TOOLTIPID>
				<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
			</UseTemplate>

		</Component>


		<Component ID="HA420_GENL_EMISSIVE_ON" Node="HA420_GENL_EMISSIVE_ON">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:GENL Pushed,bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
			</UseTemplate>
		</Component>

		<Component ID="HA420_GENL_EMISSIVE_OFF" Node="HA420_GENL_EMISSIVE_OFF">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:GENL Pushed,bool) ! (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<!-- =============================================GENERATOR LEFT ========================================================= -->


		<!-- =============================================GENERATOR RIGHT ========================================================= -->

		<Component ID="HA420_GENR" Node="HA420_GENR">
			<UseTemplate Name="ASOBO_GT_Push_Button">
				<NODE_ID>HA420_GENR</NODE_ID>
				<ANIM_NAME>HA420_GENR</ANIM_NAME>
				<LEFT_SINGLE_CODE>

						(L:GENR Pushed,bool) ! (>L:GENR Pushed,bool)
			</LEFT_SINGLE_CODE>
				<TOOLTIPID>GENR %((L:GENR Pushed,bool))%!2.0f!</TOOLTIPID>
				<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
			</UseTemplate>

		</Component>

		<Component ID="HA420_GENR_EMISSIVE_ON" Node="HA420_GENR_EMISSIVE_ON">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:GENR Pushed,bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
			</UseTemplate>
		</Component>

		<Component ID="HA420_GENR_EMISSIVE_OFF" Node="HA420_GENR_EMISSIVE_OFF">

			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:GENR Pushed,bool) ! (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
			</UseTemplate>
		</Component>


		<Component ID="Marwan_interactions">
			<!-- YOKE -->

			<!-- VNAV light! -->
			<Component ID="vnav_bulb_yellow" Node="vnav_bulb_yellow">
				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>(L:VNAV_ARMED,bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
				</UseTemplate>
			</Component>

			<Component ID="vnav_bulb_green" Node="vnav_bulb_green">
				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>(L:VNAV_ACTIVE,bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
				</UseTemplate>
			</Component>

			<Component ID="vnav_bulb_white" Node="vnav_bulb_white">
				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>(L:VNAV_ACTIVE,bool) ! (L:VNAV_ARMED,bool) ! and (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<Component ID="VNAV_BLUE" Node="VNAV_BLUE">
				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>(L:WT_CONNECTED,bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
				</UseTemplate>
			</Component>

			<!-- custom trim! -->
			<UseTemplate Name="ASOBO_HANDLING_Switch_ElevatorTrim_Template">
				<NODE_ID>nipple_parent</NODE_ID>
				<ANIM_NAME>trim_nipple_pitch</ANIM_NAME>
				<MOMENTARY_MIN_DURATION>0.1</MOMENTARY_MIN_DURATION>
				<UPDATE_COUNT_BEFORE_FAST_MODE>2</UPDATE_COUNT_BEFORE_FAST_MODE>
				<NORMAL_INC_DEGREES>0.02</NORMAL_INC_DEGREES>
				<UPDATE_COUNT_BEFORE_REPEAT>90</UPDATE_COUNT_BEFORE_REPEAT>
				<UPDATE_FREQ>10</UPDATE_FREQ>
				<FAST_MODE_SCALE>4</FAST_MODE_SCALE>
				<TRIM_LIMIT>16</TRIM_LIMIT>
				<ANIM_LAG>2000</ANIM_LAG>
				<IE_ELEVATOR_TRIM>YOKE</IE_ELEVATOR_TRIM>
				<WWISE_EVENT_1>throttle_transition</WWISE_EVENT_1>
				<WWISE_EVENT_2>throttle_transition</WWISE_EVENT_2>
			</UseTemplate>

			<UseTemplate Name="ASOBO_HANDLING_Switch_AileronTrim_Template">
				<NODE_ID>trim_nipple</NODE_ID>
				<ANIM_NAME>trim_nipple_yaw</ANIM_NAME>
				<SWITCH_DIRECTION>Horizontal</SWITCH_DIRECTION>
				<IE_AILERONS_TRIM>Yoke</IE_AILERONS_TRIM>
				<WWISE_EVENT_1>throttle_transition</WWISE_EVENT_1>
				<WWISE_EVENT_2>throttle_transition</WWISE_EVENT_2>
				<ANIM_LAG>2000</ANIM_LAG>
			</UseTemplate>

			<UseTemplate Name="ASOBO_HANDLING_Elevator_Aileron_Trim_Template">
				<TOOLTIP_TITLE>@TT_Package.HANDLING_KNOB_AILERON_TITLE</TOOLTIP_TITLE>
				<NODE_ID>trim_nipple</NODE_ID>
				<ANIM_NAME_L_R>trim_nipple_yaw</ANIM_NAME_L_R>
				<ANIM_NAME_DN_UP>trim_nipple_pitch</ANIM_NAME_DN_UP>
			</UseTemplate>


			<UseTemplate Name="ASOBO_HANDLING_Switch_RudderTrim_Template">
				<NODE_ID>KNOB3_TRIM_YAW</NODE_ID>
				<ANIM_NAME>KNOB3_TRIM_YAW</ANIM_NAME>
				<WWISE_EVENT_1>throttle_transition</WWISE_EVENT_1>
				<WWISE_EVENT_2>throttle_transition</WWISE_EVENT_2>
			</UseTemplate>

			<Component ID="TRIM_THUMB" Node="TRIM_THUMB">
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<CURSOR>Hand</CURSOR>
					<MOUSEFLAGS_DEFAULT_IM>LeftSingle+LeftRelease+LeftDrag+WheelUp+WheelDown</MOUSEFLAGS_DEFAULT_IM>
					<MouseFlags>LeftAll+WheelUp+WheelDown</MouseFlags>
					<CALLBACKCODE>

(M:Event) 'WheelUp' scmp 0 == if{ 
								1 (>L:TRIM_THUMB_dragging_up,bool) (L:TRIM_THUMB, number) -1 &gt; if{ (L:TRIM_THUMB, number) 1 - (>L:TRIM_THUMB, number) 5 (&gt;L:trimTimer) }
								} els{
								0 (>L:TRIM_THUMB_dragging_up,bool)
								}

(M:Event) 'WheelDown' scmp 0 == if{
									1 (>L:TRIM_THUMB_dragging_dn,bool) (L:TRIM_THUMB, number) 1 &lt; if{ (L:TRIM_THUMB, number) 1 + (>L:TRIM_THUMB, number) 5 (&gt;L:trimTimer) }
									} els{
									0 (>L:TRIM_THUMB_dragging_dn,bool)
									}
									
							 (M:Event) 'LeftDrag'    scmi 0 == if{
	1 (&gt;L:draggingIsHappening,bool)						 
	(M:Y) (L:LastPos1) - -5 &lt; if{ 1 (>L:TRIM_THUMB_dragging_up,bool) (L:TRIM_THUMB, number) -1 &gt; if{ (L:TRIM_THUMB, number) 1 - (>L:TRIM_THUMB, number) 1 (&gt;L:trimTimer) } (M:Y) (&gt;L:LastPos1) }
	(M:Y) (L:LastPos1) - 5 &gt; if{ 1 (>L:TRIM_THUMB_dragging_dn,bool) (L:TRIM_THUMB, number) 1 &lt; if{ (L:TRIM_THUMB, number) 1 + (>L:TRIM_THUMB, number) 1 (&gt;L:trimTimer) } (M:Y) (&gt;L:LastPos1) }
	} els{ 
	0 (&gt;L:draggingIsHappening,bool)						 
	}
				
			</CALLBACKCODE>
				</UseTemplate>
				<Update Frequency="10">
	(L:trimTimer) 0 &gt; (L:draggingIsHappening,bool) 0 == and if{ (L:trimTimer) 1 - (&gt;L:trimTimer) }
			(L:TRIM_THUMB_dragging_dn,bool) 0 == (L:TRIM_THUMB_dragging_dn,bool) 0 == and (L:trimTimer) 0 == if{ 0 (>L:TRIM_THUMB, number) }
			(L:TRIM_THUMB, number) -1 == if{ (&gt;K:ELEV_TRIM_DN) }
			(L:TRIM_THUMB, number) 1 == if{ (&gt;K:ELEV_TRIM_UP) }
	</Update>
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<!-- Throttle and Prop levers SimVars are -25 <=> 100 -->
					<!-- Converted for anim to be between 0 <=> 100 -->
					<ANIM_NAME>TRIM_THUMB</ANIM_NAME>
					<ANIM_CODE>(L:TRIM_THUMB, number) 30 * 30 +</ANIM_CODE>
					<ANIM_LENGTH>60</ANIM_LENGTH>
					<ANIM_LAG>500</ANIM_LAG>

				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_AnimTriggers_SoundEvents_Same">
					<ANIM_NAME>TRIM_THUMB</ANIM_NAME>
					<WWISE_EVENT>battery_switch_off</WWISE_EVENT>
					<COUNT>3</COUNT>
					<NORMALIZED_TIME>0.3</NORMALIZED_TIME>
				</UseTemplate>
			</Component>

			<!-- 			<UseTemplate Name="ASOBO_HANDLING_Switch_ElevatorTrim_Template">
	
				<NODE_ID>TRIM_THUMB</NODE_ID>
				<ANIM_NAME>TRIM_THUMB</ANIM_NAME>	
				<MOMENTARY_MIN_DURATION>0.1</MOMENTARY_MIN_DURATION> 
				<TRIM_LIMIT>15</TRIM_LIMIT>
				<IE_ELEVATOR_TRIM>PEDESTRAL</IE_ELEVATOR_TRIM>
				<WWISE_EVENT_1>throttle_transition</WWISE_EVENT_1>
				<WWISE_EVENT_2>throttle_transition</WWISE_EVENT_2>
			
			</UseTemplate> -->


			<!-- 	pitch trim -->

			<Component ID="PUSH_TRIM_PITCH" Node="PUSH_TRIM_PITCH">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>PUSH_TRIM_PITCH</NODE_ID>
					<ANIM_NAME>PUSH_TRIM_PITCH</ANIM_NAME>
					<LEFT_SINGLE_CODE>

								(L:PITCHTRIM Pushed,bool) ! (>L:PITCHTRIM Pushed,bool)
								(A:ELEVATOR TRIM DISABLED, Bool) ! if{ 1 (&gt;K:ELEVATOR_TRIM_DISABLED_SET) (A:AUTOPILOT DISENGAGED, Bool) ! if{ (&gt;K:AUTOPILOT_DISENGAGE_TOGGLE) } } els{ 0 (&gt;K:ELEVATOR_TRIM_DISABLED_SET) }
					</LEFT_SINGLE_CODE>
					<TOOLTIPID>PITCHTRIM %((L:PITCHTRIM Pushed,bool))%!2.0f!</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
				</UseTemplate>

			</Component>

			<Component ID="PUSH_TRIM_PITCH_EMISSIVE_NORM" Node="PUSH_TRIM_PITCH_EMISSIVE_NORM">

				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>(A:ELEVATOR TRIM DISABLED, Bool) ! (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
				</UseTemplate>
			</Component>

			<Component ID="PUSH_TRIM_PITCH_EMISSIVE_STBY" Node="PUSH_TRIM_PITCH_EMISSIVE_STBY">

				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>(A:ELEVATOR TRIM DISABLED, Bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
				</UseTemplate>
			</Component>

			<!-- 	roll trim -->

			<Component ID="PUSH_TRIM_ROLL" Node="PUSH_TRIM_ROLL">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>PUSH_TRIM_ROLL</NODE_ID>
					<ANIM_NAME>PUSH_TRIM_ROLL</ANIM_NAME>
					<LEFT_SINGLE_CODE>

								(L:ROLLTRIM Pushed,bool) ! (>L:ROLLTRIM Pushed,bool)
								(A:AILERON TRIM DISABLED, Bool) ! if{ 1 (&gt;K:AILERON_TRIM_DISABLED_SET) (A:AUTOPILOT DISENGAGED, Bool) ! if{ (&gt;K:AUTOPILOT_DISENGAGE_TOGGLE) } } els{ 0 (&gt;K:AILERON_TRIM_DISABLED_SET) }
					</LEFT_SINGLE_CODE>
					<TOOLTIPID>ROLLTRIM %((L:ROLLTRIM Pushed,bool))%!2.0f!</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
				</UseTemplate>

			</Component>

			<Component ID="PUSH_TRIM_ROLL_EMISSIVE_NORM" Node="PUSH_TRIM_ROLL_EMISSIVE_NORM">

				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>(A:AILERON TRIM DISABLED, Bool) ! (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
				</UseTemplate>
			</Component>

			<Component ID="PUSH_TRIM_ROLL_EMISSIVE_OFF" Node="PUSH_TRIM_ROLL_EMISSIVE_OFF">

				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>(A:AILERON TRIM DISABLED, Bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
				</UseTemplate>
			</Component>

			<!-- 	RUDDER  trim -->

			<Component ID="PUSH_TRIM_YAW" Node="PUSH_TRIM_YAW">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>PUSH_TRIM_YAW</NODE_ID>
					<ANIM_NAME>PUSH_TRIM_YAW</ANIM_NAME>
					<LEFT_SINGLE_CODE>

								(L:YAWTRIM Pushed,bool) ! (>L:YAWTRIM Pushed,bool)
								(A:RUDDER TRIM DISABLED, Bool) ! if{ 1 (&gt;K:RUDDER_TRIM_DISABLED_SET) (A:AUTOPILOT DISENGAGED, Bool) ! if{ (&gt;K:AUTOPILOT_DISENGAGE_TOGGLE) } } els{ 0 (&gt;K:RUDDER_TRIM_DISABLED_SET) }
					</LEFT_SINGLE_CODE>
					<TOOLTIPID>YAWTRIM %((L:YAWTRIM Pushed,bool))%!2.0f!</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
				</UseTemplate>

			</Component>

			<Component ID="PUSH_TRIM_YAW_EMISSIVE_NORM" Node="PUSH_TRIM_YAW_EMISSIVE_NORM">

				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>(A:RUDDER TRIM DISABLED, Bool) ! (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
				</UseTemplate>
			</Component>

			<Component ID="PUSH_TRIM_YAW_EMISSIVE_OFF" Node="PUSH_TRIM_YAW_EMISSIVE_OFF">

				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>(A:RUDDER TRIM DISABLED, Bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<!-- =============================================################_MASTER ALERT_PANEL_##########################========================================================= -->

			<!-- ==========BARO1 =============== -->
			<Component ID="Knob_PilotMaster_Baro" Node="Knob_PilotMaster_Baro">
				<UseTemplate Name="ASOBO_GT_Knob_Infinite_Push">

					<CURSOR_LEFT>TurnLeftSmall</CURSOR_LEFT>
					<CURSOR_RIGHT>TurnRightSmall</CURSOR_RIGHT>
					<ANIM_NAME_KNOB>Knob_PilotMaster_Baro</ANIM_NAME_KNOB>
					<ANIM_NAME_PUSH>Push_PilotMaster_Baro_STD</ANIM_NAME_PUSH>
					<CLOCKWISE_CODE>1 (&gt;K:KOHLSMAN_INC) (&gt;H:AP_BARO_Up)</CLOCKWISE_CODE>
					<ANTICLOCKWISE_CODE>1 (&gt;K:KOHLSMAN_DEC) (&gt;H:AP_BARO_Down)</ANTICLOCKWISE_CODE>
					<LEFT_SINGLE_CODE>
								1 (&gt;K:BAROMETRIC_STD_PRESSURE)
							</LEFT_SINGLE_CODE>
					<ANIMREF_ID>0</ANIMREF_ID>
					<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
					<ANIMCURSOR_MIN>-1</ANIMCURSOR_MIN>
					<ANIMCURSOR_MAX>2</ANIMCURSOR_MAX>
					<WWISE_EVENT>AS580_big_knob_turn</WWISE_EVENT>
					<COUNT>36</COUNT>
					<WWISE_EVENT_1>AS580_knob_push_button_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>AS580_knob_push_button_off</WWISE_EVENT_2>
				</UseTemplate>
			</Component>

			<!-- ==========DISPLAY REVERSION =============== -->
			<Component ID="Push_PilotMaster_Reversion" Node="Push_PilotMaster_Reversion">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>Push_PilotMaster_Reversion</NODE_ID>
					<ANIM_NAME>Push_PilotMaster_Reversion</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(L:REVERSION Pushed,bool) ! (&gt;L:REVERSION Pushed,bool)
			</LEFT_SINGLE_CODE>
					<TOOLTIPID>Reversion %((L:REVERSION Pushed,bool))%!2.0f!</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>

				</UseTemplate>
			</Component>


			<Component ID="Push_CoPilotMaster_Reversion" Node="Push_CoPilotMaster_Reversion">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>Push_CoPilotMaster_Reversion</NODE_ID>
					<ANIM_NAME>Push_CoPilotMaster_Reversion</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(L:REVERSION Pushed,bool) ! (&gt;L:REVERSION Pushed,bool)
			</LEFT_SINGLE_CODE>
					<TOOLTIPID>Reversion %((L:REVERSION Pushed,bool))%!2.0f!</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>

				</UseTemplate>
			</Component>

			<Component ID="Push_PilotMaster_Reversion_EMISSIVE_REV" Node="Push_PilotMaster_Reversion_EMISSIVE_REV">
				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>(L:REVERSION Pushed,bool) (L:REVERSION Pushed LF,bool) != (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
				</UseTemplate>
			</Component>


			<Component ID="Push_COPilotMaster_Reversion_EMISSIVE_REV" Node="Push_COPilotMaster_Reversion_EMISSIVE_REV">
				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>(L:REVERSION Pushed,bool) (L:REVERSION Pushed LF,bool) != (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
				</UseTemplate>
			</Component>

			<!-- ==========CHIME MUTE =============== -->
			<Component ID="Push_PilotMaster_Chime" Node="Push_PilotMaster_Chime">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>Push_PilotMaster_Chime</NODE_ID>
					<ANIM_NAME>Push_PilotMaster_Chime</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(>H:HPFD_WARNING_MUTE) 
			</LEFT_SINGLE_CODE>
					<TOOLTIPID>MUTE %((L:CHIME Pushed,bool))%!2.0f!</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>

				</UseTemplate>
			</Component>

			<Component ID="Push_CoPilotMaster_Chime" Node="Push_CoPilotMaster_Chime">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>Push_CoPilotMaster_Chime</NODE_ID>
					<ANIM_NAME>Push_CoPilotMaster_Chime</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(>H:HPFD_WARNING_MUTE) 
			</LEFT_SINGLE_CODE>
					<TOOLTIPID>MUTE %((L:CHIME Pushed,bool))%!2.0f!</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>

				</UseTemplate>
			</Component>

			<Component ID="Push_COPilotMaster_Chime_EMESSIVE_MUTE" Node="Push_COPilotMaster_Chime_EMESSIVE_MUTE">
				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>(L:HJET_MUTE_VISIBLE,bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
				</UseTemplate>
			</Component>


			<Component ID="Push_PilotMaster_Chime_EMESSIVE_MUTE" Node="Push_PilotMaster_Chime_EMESSIVE_MUTE">
				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>(L:HJET_MUTE_VISIBLE,bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
				</UseTemplate>
			</Component>

			<!-- ==========MASTER ALERT =============== -->


			<UseTemplate Name="ASOBO_SAFETY_Push_WarningCaution_Template">
				<NODE_ID>Push_PilotMaster_reset</NODE_ID>
				<ANIM_NAME>Push_PilotMaster_reset</ANIM_NAME>
				<SEQ1_NODE_ID>Push_PilotMaster_reset_EMESSIVE_CAUTTION</SEQ1_NODE_ID>
				<SEQ2_NODE_ID>Push_PilotMaster_reset_EMESSIVE_WARNING</SEQ2_NODE_ID>
				<EMISSIVE_DRIVES_VISIBILITY>True</EMISSIVE_DRIVES_VISIBILITY>
				<NO_EMISSIVE_ON_HELD />
				<PUSH_EVENT>(&gt;K:MASTER_WARNING_ACKNOWLEDGE) (&gt;K:MASTER_CAUTION_ACKNOWLEDGE) (&gt;H:HPFD_Master_Warning_Push)</PUSH_EVENT>

			</UseTemplate>


			<Component ID="Push_PilotMaster_reset_EMESSIVE_CAUTTION" Node="Push_PilotMaster_reset_EMESSIVE_CAUTTION">
				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>(L:HJET_Master_Caution_Active) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
				</UseTemplate>
			</Component>

			<Component ID="Push_PilotMaster_reset_EMESSIVE_WARNING" Node="Push_PilotMaster_reset_EMESSIVE_WARNING">
				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>(L:HJET_Master_Warning_Active) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
				</UseTemplate>
			</Component>


			<UseTemplate Name="ASOBO_SAFETY_Push_WarningCaution_Template">
				<NODE_ID>Push_CoPilotMaster_Reset</NODE_ID>
				<ANIM_NAME>Push_CoPilotMaster_Reset</ANIM_NAME>
				<SEQ1_NODE_ID>Push_COPilotMaster_reset_EMESSIVE_CAUTTION</SEQ1_NODE_ID>
				<SEQ2_NODE_ID>Push_COPilotMaster_reset_EMESSIVE_WARNING</SEQ2_NODE_ID>
				<EMISSIVE_DRIVES_VISIBILITY>True</EMISSIVE_DRIVES_VISIBILITY>
				<NO_EMISSIVE_ON_HELD />

			</UseTemplate>


			<Component ID="Push_COPilotMaster_reset_EMESSIVE_CAUTTION" Node="Push_COPilotMaster_reset_EMESSIVE_CAUTTION">
				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>(L:HJET_Master_Caution_Active) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
				</UseTemplate>
			</Component>

			<Component ID="Push_COPilotMaster_reset_EMESSIVE_WARNING" Node="Push_COPilotMaster_reset_EMESSIVE_WARNING">
				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>(L:HJET_Master_Warning_Active) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
				</UseTemplate>
			</Component>


			<!-- =============================================################_AUTOPILOT_##########################========================================================= -->

			<!-- COURSE 1 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<UseTemplate Name="WT_G3000_Knob_Course_Template">
				<ID>1</ID>
				<NODE_ID>knob_autopilot_CRS1</NODE_ID>
				<ANIM_NAME>knob_autopilot_CRS1</ANIM_NAME>
				<ANIM_NAME_PUSH>knob_crs1_push</ANIM_NAME_PUSH>
				<PUSH />
			</UseTemplate>

			<!-- COURSE 2 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<UseTemplate Name="WT_G3000_Knob_Course_Template">
				<ID>2</ID>
				<NODE_ID>knob_autopilot_CRS2</NODE_ID>
				<ANIM_NAME>knob_autopilot_CRS2</ANIM_NAME>
				<ANIM_NAME_PUSH>CRS2_container</ANIM_NAME_PUSH>
				<PUSH />
			</UseTemplate>

			<!-- APPROACH - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

			<Component ID="push_autopilot_APPR" Node="push_autopilot_APPR">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>push_autopilot_APPR</NODE_ID>
					<ANIM_NAME>push_autopilot_APPR</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(&gt;K:AP_APR_HOLD)
			</LEFT_SINGLE_CODE>
					<TOOLTIPID>Approach Hold %((L:CHIME Pushed,bool))%!2.0f!</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>

				</UseTemplate>
			</Component>

			<!-- <UseTemplate Name="ASOBO_AUTOPILOT_Push_Approach_Template">
	<ANIM_NAME>push_autopilot_APPR</ANIM_NAME>
	<NODE_ID>push_autopilot_APPR</NODE_ID>
	<TOOLTIPID>%((A:AUTOPILOT APPROACH HOLD, bool))%{if}TT:COCKPIT.TOOLTIPS.AUTOPILOT_PANEL_APR_ON%{else}TT:COCKPIT.TOOLTIPS.AUTOPILOT_PANEL_APR_OFF%{end}</TOOLTIPID>
</UseTemplate> -->

			<!-- FLIGHT DIRECTOR - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<!-- 	<UseTemplate Name="ASOBO_AUTOPILOT_Push_FlightDirector_Template">
		<ANIM_NAME>push_autopilot_fd2</ANIM_NAME>
		<NODE_ID>push_autopilot_fd2</NODE_ID>	
	</UseTemplate>
	
	<UseTemplate Name="ASOBO_AUTOPILOT_Push_FlightDirector_Template">
		<ANIM_NAME>push_autopilot_fd</ANIM_NAME>
		<NODE_ID>push_autopilot_fd</NODE_ID>	
	</UseTemplate> -->

			<Component ID="push_autopilot_fd" Node="push_autopilot_fd">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>push_autopilot_fd</NODE_ID>
					<ANIM_NAME>push_autopilot_fd</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(&gt;K:TOGGLE_FLIGHT_DIRECTOR)
			</LEFT_SINGLE_CODE>
					<TOOLTIPID>Flight Director toggle</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>

				</UseTemplate>
			</Component>


			<Component ID="push_autopilot_fd2" Node="push_autopilot_fd2">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>push_autopilot_fd2</NODE_ID>
					<ANIM_NAME>push_autopilot_fd2</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(&gt;K:TOGGLE_FLIGHT_DIRECTOR)
			</LEFT_SINGLE_CODE>
					<TOOLTIPID>Flight Director toggle</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>

				</UseTemplate>
			</Component>


			<!-- SPEED KNOB - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<Component ID="HA420_knob_spd" Node="HA420_knob_spd">
				<UseTemplate Name="ASOBO_AUTOPILOT_Knob_Speed_Template">
					<ANIM_NAME_KNOB>HA420_knob_spd</ANIM_NAME_KNOB>
					<ANIM_NAME_MODE>AUTOPILOT_Knob_Speed_Mode</ANIM_NAME_MODE>
					<ANIM_NAME_PUSH>HA420_IASMACH</ANIM_NAME_PUSH>
					<NODE_ID_KNOB>HA420_knob_spd</NODE_ID_KNOB>
					<NODE_ID_MODE>HA420_knob_spd</NODE_ID_MODE>
					<ROTATION_SPEED>-10</ROTATION_SPEED>
					<USE_SIMVAR_FOR_MACH />


				</UseTemplate>
			</Component>

			<Component ID="HA420_knob_FMS_MAN" Node="HA420_knob_FMS_MAN">
				<UseTemplate Name="ASOBO_GT_Switch_Code">

					<ANIM_NAME>HA420_knob_FMS_MAN</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(L:HJET_THROTTLE_MAN,bool) ! (>L:HJET_THROTTLE_MAN,bool)
			</LEFT_SINGLE_CODE>
					<ANIM_CODE>(L:HJET_THROTTLE_MAN,bool) 100 *</ANIM_CODE>

					<TOOLTIPID>FMS/MAN: %((L:HJET_THROTTLE_MAN,bool))%{if}Select FMS%{else}Select MAN%{end}</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
				</UseTemplate>
			</Component>

			<!-- CSC - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<Component ID="push_autopilot_CSC" Node="push_autopilot_CSC">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>push_autopilot_CSC</NODE_ID>
					<ANIM_NAME>push_autopilot_CSC</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(L:CSC Pushed,bool) ! (&gt;L:CSC Pushed,bool)
			</LEFT_SINGLE_CODE>
					<TOOLTIPID>CSC %((L:CSC Pushed,bool))%!2.0f!</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>

				</UseTemplate>
			</Component>


			<!-- <UseTemplate Name="ASOBO_AUTOPILOT_Push_AutoThrottle_Template">
				<NODE_ID>push_autopilot_CSC</NODE_ID>
				<ANIM_NAME>push_autopilot_CSC</ANIM_NAME>
				<TYPE>AS01B</TYPE>
			</UseTemplate> -->

			<!-- CSC - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<Component ID="push_autopilot_CPL" Node="push_autopilot_CPL">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>push_autopilot_CPL</NODE_ID>
					<ANIM_NAME>push_autopilot_CPL</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(L:CPL Pushed,bool) ! (&gt;L:CPL Pushed,bool)
			</LEFT_SINGLE_CODE>
					<TOOLTIPID>CPL %((L:CPL Pushed,bool))%!2.0f!</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>

				</UseTemplate>
			</Component>

			<!-- VNAV - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<UseTemplate Name="ASOBO_AUTOPILOT_Push_Vertical_Navigation_Template">
				<ANIM_NAME>push_autopilot_VNVAction</ANIM_NAME>
				<NODE_ID>push_autopilot_VNV</NODE_ID>
			</UseTemplate>

			<!-- NAV - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<!-- 		<UseTemplate Name="ASOBO_AUTOPILOT_Push_Navigation_Template">
			<ANIM_NAME>push_autopilot_nav</ANIM_NAME>
			<NODE_ID>push_autopilot_nav</NODE_ID>
		</UseTemplate> -->

			<Component ID="push_autopilot_nav" Node="push_autopilot_nav">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>push_autopilot_nav</NODE_ID>
					<ANIM_NAME>push_autopilot_nav</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(&gt;K:AP_NAV1_HOLD)
			</LEFT_SINGLE_CODE>
					<TOOLTIPID>NAV</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>

				</UseTemplate>
			</Component>
			<!-- =============================================################_EADI_##########################========================================================= -->

			<Component ID="Knob_EADI_Baro" Node="Knob_EADI_Baro">
				<UseTemplate Name="ASOBO_GT_Knob_Infinite_Push">

					<CURSOR_LEFT>TurnLeftSmall</CURSOR_LEFT>
					<CURSOR_RIGHT>TurnRightSmall</CURSOR_RIGHT>
					<ANIM_NAME>Knob_EADI_Baro</ANIM_NAME>
					<ANIM_NAME_PUSH>Knob_EADI_Baro</ANIM_NAME_PUSH>
					<CLOCKWISE_CODE>2 (&gt;K:KOHLSMAN_INC) (&gt;H:AP_BARO_Up)</CLOCKWISE_CODE>
					<ANTICLOCKWISE_CODE>2 (&gt;K:KOHLSMAN_DEC) (&gt;H:AP_BARO_Down)</ANTICLOCKWISE_CODE>
					<LEFT_SINGLE_CODE>
								2 (&gt;K:BAROMETRIC_STD_PRESSURE)
							</LEFT_SINGLE_CODE>
					<ANIMREF_ID>0</ANIMREF_ID>
					<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
					<ANIMCURSOR_MIN>-1</ANIMCURSOR_MIN>
					<ANIMCURSOR_MAX>2</ANIMCURSOR_MAX>
					<WWISE_EVENT>AS580_big_knob_turn</WWISE_EVENT>
					<COUNT>36</COUNT>
					<WWISE_EVENT_1>AS580_knob_push_button_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>AS580_knob_push_button_off</WWISE_EVENT_2>
				</UseTemplate>
			</Component>


			<!-- HPIN - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<Component ID="push_EADI_HPIN" Node="push_EADI_HPIN">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>push_EADI_HPIN</NODE_ID>
					<ANIM_NAME>push_EADI_HPIN</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(L:HPIN Pushed,bool) ! (&gt;L:HPIN Pushed,bool)
						(L:useHpaUnits,bool) ! (&gt;L:useHpaUnits,bool)
			</LEFT_SINGLE_CODE>
					<TOOLTIPID>HPIN %((L:HPIN Pushed,bool))%!2.0f!</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>

				</UseTemplate>
			</Component>

			<!-- NAV - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<Component ID="push_EADI_NAV" Node="push_EADI_NAV">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>push_EADI_NAV</NODE_ID>
					<ANIM_NAME>push_EADI_NAV</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(L:EADINAV Pushed,bool) ! (&gt;L:EADINAV Pushed,bool)
			</LEFT_SINGLE_CODE>
					<TOOLTIPID>EADINAV %((L:EADINAV Pushed,bool))%!2.0f!</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
				</UseTemplate>
			</Component>


			<!-- =============================================################_AFC_SERVO_POWER##########################========================================================= -->

			<!-- PITCH - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<Component ID="push_AFC_Pitch" Node="push_AFC_Pitch">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>push_AFC_Pitch</NODE_ID>
					<ANIM_NAME>push_AFC_Pitch</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(L:AFCPITCH Pushed,bool) ! (&gt;L:AFCPITCH Pushed,bool)
			</LEFT_SINGLE_CODE>
					<TOOLTIPID>AFCPITCH %((L:AFCPITCH Pushed,bool))%!2.0f!</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
				</UseTemplate>
				<Component ID="push_AFC_Pitch_EMISSIVE" Node="push_AFC_Pitch_EMISSIVE">
					<UseTemplate Name="ASOBO_GT_Visibility_Code">
						<VISIBILITY_CODE>(L:AFCPITCH Pushed,bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
			</Component>

			<!-- ROLL - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<Component ID="push_AFC_Roll" Node="push_AFC_Roll">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>push_AFC_Roll</NODE_ID>
					<ANIM_NAME>push_AFC_Roll</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(L:AFCROLL Pushed,bool) ! (&gt;L:AFCROLL Pushed,bool)
			</LEFT_SINGLE_CODE>
					<TOOLTIPID>AFCROLL %((L:AFCROLL Pushed,bool))%!2.0f!</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
				</UseTemplate>

				<Component ID="push_AFC_Roll_Emissive" Node="push_AFC_Roll_Emissive">
					<UseTemplate Name="ASOBO_GT_Visibility_Code">
						<VISIBILITY_CODE>(L:AFCROLL Pushed,bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
					</UseTemplate>
				</Component>

			</Component>

			<!-- YAW - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<Component ID="push_AFC_Yaw" Node="push_AFC_Yaw">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>push_AFC_Yaw</NODE_ID>
					<ANIM_NAME>push_AFC_Yaw</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(L:AFCYAW Pushed,bool) ! (&gt;L:AFCYAW Pushed,bool)
			</LEFT_SINGLE_CODE>
					<TOOLTIPID>AFCYAW %((L:AFCYAW Pushed,bool))%!2.0f!</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
				</UseTemplate>
				<Component ID="push_AFC_Yaw_Emissive" Node="push_AFC_Yaw_Emissive">
					<UseTemplate Name="ASOBO_GT_Visibility_Code">
						<VISIBILITY_CODE>(L:AFCYAW Pushed,bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
			</Component>
			<!-- =============================================ElECTRICAL PANEL ========================================================= -->

			<!-- EXTERNAL POWER - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

			<Component ID="Push_ELECTRICAL_ExternalPower" Node="Push_ELECTRICAL_ExternalPower">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>Push_ELECTRICAL_ExternalPower</NODE_ID>
					<ANIM_NAME>Push_ELECTRICAL_ExternalPower</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(L:GPOW Pushed,bool) ! (&gt;L:GPOW Pushed,bool)
			</LEFT_SINGLE_CODE>
					<TOOLTIPID>GPOW %((L:GPOW Pushed,bool))%!2.0f!</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
				</UseTemplate>
				<Component ID="HA420_GPOWER_EMISSIVE_ON" Node="HA420_GPOWER_EMISSIVE_ON">
					<UseTemplate Name="ASOBO_GT_Visibility_Code">
						<VISIBILITY_CODE>(A:APU GENERATOR SWITCH:1, Bool) (L:GroundPowerAvailable,bool) 1 == and (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
					</UseTemplate>
				</Component>

				<Component ID="HA420_GPOWER_EMISSIVE_AVAIL" Node="HA420_GPOWER_EMISSIVE_AVAIL">
					<UseTemplate Name="ASOBO_GT_Visibility_Code">
						<VISIBILITY_CODE>(A:APU GENERATOR SWITCH:1, Bool) ! (L:GroundPowerAvailable,bool) 1 == and (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
					</UseTemplate>
				</Component>


			</Component>


			<!-- ELT - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<UseTemplate Name="ASOBO_SAFETY_Switch_ELT_Template">

				<NODE_ID>KNOB3_ELT</NODE_ID>
				<ANIM_NAME>KNOB3_ELT</ANIM_NAME>
				<EMISSIVE_NODE_ID>ELT_EMISSIVE_LED</EMISSIVE_NODE_ID>

			</UseTemplate>

			<!-- NWSs - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<Component ID="Push_GEAR_NWS" Node="Push_GEAR_NWS">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>Push_GEAR_NWS</NODE_ID>
					<ANIM_NAME>Push_GEAR_NWS</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(L:NWS Pushed,bool) ! (&gt;L:NWS Pushed,bool)
			</LEFT_SINGLE_CODE>
					<TOOLTIPID>NWS %((L:NWS Pushed,bool))%!2.0f!</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
				</UseTemplate>
				<Component ID="Push_GEAR_NWS_EMISSIVE_ON" Node="Push_GEAR_NWS_EMISSIVE_ON">
					<UseTemplate Name="ASOBO_GT_Visibility_Code">
						<VISIBILITY_CODE>(L:NWS Pushed,bool) ! (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
					</UseTemplate>
				</Component>

				<Component ID="Push_GEAR_NWS_EMISSIVE_OFF" Node="Push_GEAR_NWS_EMISSIVE_OFF">
					<UseTemplate Name="ASOBO_GT_Visibility_Code">
						<VISIBILITY_CODE>(L:NWS Pushed,bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
			</Component>

			<!-- ==========Bus tie =============== -->
			<UseTemplate Name="ASOBO_GT_Push_Button_Airliner">
				<COVER_NODE_ID>COVER_ELECTRICAL_BUS_TIE</COVER_NODE_ID>
				<COVER_ANIM_NAME>COVER_ELECTRICAL_BUS_TIE</COVER_ANIM_NAME>
				<NODE_ID>Push_ELECTRICAL_BusTie</NODE_ID>
				<ANIM_NAME>Push_ELECTRICAL_BusTie</ANIM_NAME>
				<LEFT_SINGLE_CODE>
						(L:BTIE Pushed,bool) ! (>L:BTIE Pushed,bool)
			</LEFT_SINGLE_CODE>

				<SEQ1_NODE_ID>HA420_BTIE_EMISSIVE_OPEN</SEQ1_NODE_ID>

				<ONLY_SEQ1 />
				<SEQ1_EMISSIVE_CODE>(L:HJET_BusTie,bool) ! (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</SEQ1_EMISSIVE_CODE>
				<EMISSIVE_DRIVES_VISIBILITY>True</EMISSIVE_DRIVES_VISIBILITY>
				<NO_EMISSIVE_ON_HELD />

			</UseTemplate>


			<!-- ==========Cabin power =============== -->
			<UseTemplate Name="ASOBO_GT_Push_Button_Airliner">
				<COVER_NODE_ID>COVER_ELECTRICAL_CabinPow</COVER_NODE_ID>
				<COVER_ANIM_NAME>COVER_ELECTRICAL_CabinPow</COVER_ANIM_NAME>
				<NODE_ID>Push_ELECTRICAL_CabinPow</NODE_ID>
				<ANIM_NAME>Push_ELECTRICAL_CabinPow</ANIM_NAME>
				<LEFT_SINGLE_CODE>
						(L:CPOW Pushed,bool) ! (>L:CPOW Pushed,bool)
			</LEFT_SINGLE_CODE>

				<SEQ1_NODE_ID>HA420_CPOWER_EMISSIVE_OFF</SEQ1_NODE_ID>

				<ONLY_SEQ1 />
				<SEQ1_EMISSIVE_CODE>(L:HJET_CabinRelay,bool) (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</SEQ1_EMISSIVE_CODE>
				<EMISSIVE_DRIVES_VISIBILITY>True</EMISSIVE_DRIVES_VISIBILITY>
				<NO_EMISSIVE_ON_HELD />

			</UseTemplate>

			<!-- =============================================fuel central ========================================================= -->
			<!-- Cross feed knob - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

			<Component ID="KNOB3_FUEL_XFEED" Node="KNOB3_FUEL_XFEED">
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<CURSOR>Hand</CURSOR>
					<MOUSEFLAGS_DEFAULT_IM>LeftSingle+LeftRelease+LeftDrag+WheelUp+WheelDown</MOUSEFLAGS_DEFAULT_IM>
					<MouseFlags>LeftAll+WheelUp+WheelDown</MouseFlags>
					<CALLBACKCODE>

	(M:Event) 'WheelUp' scmp 0 == if{ 
										(L:FuelXF_Knob, number) 1 &lt; if{ (L:FuelXF_Knob, number) 1 + (>L:FuelXF_Knob, number) }
									}

	(M:Event) 'WheelDown' scmp 0 == if{
											(L:FuelXF_Knob, number) -1 &gt; if{ (L:FuelXF_Knob, number) 1 - (>L:FuelXF_Knob, number) }
										}
										
				</CALLBACKCODE>

				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<!-- Throttle and Prop levers SimVars are -25 <=> 100 -->
					<!-- Converted for anim to be between 0 <=> 100 -->
					<ANIM_NAME>KNOB3_FUEL_XFEED</ANIM_NAME>
					<ANIM_CODE>(L:FuelXF_Knob, number) 30 * 30 +</ANIM_CODE>
					<ANIM_LENGTH>60</ANIM_LENGTH>
					<ANIM_LAG>500</ANIM_LAG>

				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_AnimTriggers_SoundEvents_Same">
					<ANIM_NAME>KNOB3_FUEL_XFEED</ANIM_NAME>
					<WWISE_EVENT>battery_switch_off</WWISE_EVENT>
					<COUNT>3</COUNT>
					<NORMALIZED_TIME>0.3</NORMALIZED_TIME>

				</UseTemplate>

			</Component>

			<!-- LEFT PUMP knob - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

			<Component ID="KNOB3_FUEL_PUMP_L" Node="KNOB3_FUEL_PUMP_L">
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<CURSOR>Hand</CURSOR>
					<MOUSEFLAGS_DEFAULT_IM>LeftSingle+LeftRelease+LeftDrag+WheelUp+WheelDown</MOUSEFLAGS_DEFAULT_IM>
					<MouseFlags>LeftAll+WheelUp+WheelDown</MouseFlags>
					<CALLBACKCODE>

	(M:Event) 'WheelUp' scmp 0 == if{ 
										(L:FuelPL_Knob, number) 1 &lt; if{ (L:FuelPL_Knob, number) 1 + (>L:FuelPL_Knob, number) }
									}

	(M:Event) 'WheelDown' scmp 0 == if{
											(L:FuelPL_Knob, number) -1 &gt; if{ (L:FuelPL_Knob, number) 1 - (>L:FuelPL_Knob, number) }
										}
										
				</CALLBACKCODE>

				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<!-- Throttle and Prop levers SimVars are -25 <=> 100 -->
					<!-- Converted for anim to be between 0 <=> 100 -->
					<ANIM_NAME>KNOB3_FUEL_PUMP_L</ANIM_NAME>
					<ANIM_CODE>(L:FuelPL_Knob, number) 30 * 30 +</ANIM_CODE>
					<ANIM_LENGTH>60</ANIM_LENGTH>
					<ANIM_LAG>500</ANIM_LAG>

				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_AnimTriggers_SoundEvents_Same">
					<ANIM_NAME>KNOB3_FUEL_PUMP_L</ANIM_NAME>
					<WWISE_EVENT>battery_switch_off</WWISE_EVENT>
					<COUNT>3</COUNT>
					<NORMALIZED_TIME>0.3</NORMALIZED_TIME>

				</UseTemplate>

			</Component>


			<!-- right PUMP knob - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

			<Component ID="KNOB3_FUEL_PUMP_R" Node="KNOB3_FUEL_PUMP_R">
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<CURSOR>Hand</CURSOR>
					<MOUSEFLAGS_DEFAULT_IM>LeftSingle+LeftRelease+LeftDrag+WheelUp+WheelDown</MOUSEFLAGS_DEFAULT_IM>
					<MouseFlags>LeftAll+WheelUp+WheelDown</MouseFlags>
					<CALLBACKCODE>

	(M:Event) 'WheelUp' scmp 0 == if{ 
										(L:FuelPR_Knob, number) 1 &lt; if{ (L:FuelPR_Knob, number) 1 + (>L:FuelPR_Knob, number) }
									}

	(M:Event) 'WheelDown' scmp 0 == if{
											(L:FuelPR_Knob, number) -1 &gt; if{ (L:FuelPR_Knob, number) 1 - (>L:FuelPR_Knob, number) }
										}
										
				</CALLBACKCODE>

				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<!-- Throttle and Prop levers SimVars are -25 <=> 100 -->
					<!-- Converted for anim to be between 0 <=> 100 -->
					<ANIM_NAME>KNOB3_FUEL_PUMP_R</ANIM_NAME>
					<ANIM_CODE>(L:FuelPR_Knob, number) 30 * 30 +</ANIM_CODE>
					<ANIM_LENGTH>60</ANIM_LENGTH>
					<ANIM_LAG>500</ANIM_LAG>

				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_AnimTriggers_SoundEvents_Same">
					<ANIM_NAME>KNOB3_FUEL_PUMP_R</ANIM_NAME>
					<WWISE_EVENT>battery_switch_off</WWISE_EVENT>
					<COUNT>3</COUNT>
					<NORMALIZED_TIME>0.3</NORMALIZED_TIME>

				</UseTemplate>

			</Component>


			<!-- =============================================PRESSURIZATION PANEL ========================================================= -->
			<!-- Pressure control mode switch - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

			<Component ID="Push_Oxygen_controlMode" Node="Push_Oxygen_controlMode">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>Push_Oxygen_controlMode</NODE_ID>
					<ANIM_NAME>Push_Oxygen_controlMode</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(L:HJET_Pressurisaiton_hold_active,bool) ! (>L:HJET_Pressurisaiton_hold_active,bool)
			</LEFT_SINGLE_CODE>
					<TOOLTIPID>Pressure control mode: %((L:HJET_Pressurisaiton_hold_active,bool))%{if}Push Norm%{else}Push Hold%{end}</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
				</UseTemplate>
				<Component ID="Push_Oxygen_controlMode_EMISSIVE_NORM" Node="Push_Oxygen_controlMode_EMISSIVE_NORM">
					<UseTemplate Name="ASOBO_GT_Visibility_Code">
						<VISIBILITY_CODE>(L:HJET_Pressurisaiton_hold_active,bool) ! (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
					</UseTemplate>
				</Component>

				<Component ID="Push_Oxygen_controlMode_EMISSIVE_HOLD" Node="Push_Oxygen_controlMode_EMISSIVE_HOLD">
					<UseTemplate Name="ASOBO_GT_Visibility_Code">
						<VISIBILITY_CODE>(L:HJET_Pressurisaiton_hold_active,bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
			</Component>

			<!-- Pressure dump switch - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<UseTemplate Name="ASOBO_GT_Push_Button_Airliner">
				<COVER_NODE_ID>Cover_Oxygen_CabinDump</COVER_NODE_ID>
				<COVER_ANIM_NAME>Cover_Oxygen_CabinDump</COVER_ANIM_NAME>
				<NODE_ID>Push_Oxygen_CabinDump</NODE_ID>
				<ANIM_NAME>Push_Oxygen_CabinDump</ANIM_NAME>
				<LEFT_SINGLE_CODE>
						(L:Pressure_Dump_Pushed,bool) ! (>L:Pressure_Dump_Pushed,bool)
			</LEFT_SINGLE_CODE>
				<TOOLTIPID>%((A:PRESSURIZATION DUMP SWITCH, bool))%{if}TT:COCKPIT.TOOLTIPS.PRESSURIZATION_PANEL_DUMP_BUTTON_ON%{else}TT:COCKPIT.TOOLTIPS.PRESSURIZATION_PANEL_DUMP_BUTTON_OFF%{end}</TOOLTIPID>
				<SEQ1_NODE_ID>Push_Oxygen_CabinDump_EMISSIVE_NORM</SEQ1_NODE_ID>
				<SEQ2_NODE_ID>Push_Oxygen_CabinDump_EMISSIVE_DUMP</SEQ2_NODE_ID>

				<SEQ1_EMISSIVE_CODE>(L:Pressure_Dump_Pushed,bool) ! (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</SEQ1_EMISSIVE_CODE>
				<SEQ2_EMISSIVE_CODE>(L:Pressure_Dump_Pushed,bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</SEQ2_EMISSIVE_CODE>
				<EMISSIVE_DRIVES_VISIBILITY>True</EMISSIVE_DRIVES_VISIBILITY>
				<NO_EMISSIVE_ON_HELD />

			</UseTemplate>

			<!-- oxy mask audio - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

			<Component ID="Push_Oxygen_audio" Node="Push_Oxygen_audio">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>Push_Oxygen_audio</NODE_ID>
					<ANIM_NAME>Push_Oxygen_audio</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(L:HJET_OxyMaskAudio,bool) ! (>L:HJET_OxyMaskAudio,bool)
			</LEFT_SINGLE_CODE>
					<TOOLTIPID>Oxygen mask audio: %((L:HJET_OxyMaskAudio,bool))%{if}Push Norm%{else}Push EMERGENCY%{end}</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
				</UseTemplate>
				<Component ID="Push_Oxygen_audio_EMISSIVE_NORM" Node="Push_Oxygen_audio_EMISSIVE_NORM">
					<UseTemplate Name="ASOBO_GT_Visibility_Code">
						<VISIBILITY_CODE>(L:HJET_OxyMaskAudio,bool) ! (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
					</UseTemplate>
				</Component>

				<Component ID="Push_Oxygen_audio_EMISSIVE_EMER" Node="Push_Oxygen_audio_EMISSIVE_EMER">
					<UseTemplate Name="ASOBO_GT_Visibility_Code">
						<VISIBILITY_CODE>(L:HJET_OxyMaskAudio,bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
			</Component>

			<!-- oxy supply - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

			<Component ID="Lever_Oxygen_CabinSupply" Node="Lever_Oxygen_CabinSupply">
				<UseTemplate Name="ASOBO_GT_Switch_Code">

					<ANIM_NAME>Lever_Oxygen_CabinSupply</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(L:HJET_OxySupply,bool) ! (>L:HJET_OxySupply,bool)
			</LEFT_SINGLE_CODE>
					<ANIM_CODE>(L:HJET_OxySupply,bool) 100 *</ANIM_CODE>

					<TOOLTIPID>Oxygen supply: %((L:HJET_OxySupply,bool))%{if}Pull off%{else}Push on%{end}</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
				</UseTemplate>

			</Component>

			<!-- right PUMP knob - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

			<Component ID="Knob3_Oxygen_DropMask" Node="Knob3_Oxygen_DropMask">
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<CURSOR>Hand</CURSOR>
					<MOUSEFLAGS_DEFAULT_IM>LeftSingle+LeftRelease+LeftDrag+WheelUp+WheelDown</MOUSEFLAGS_DEFAULT_IM>
					<MouseFlags>LeftAll+WheelUp+WheelDown</MouseFlags>
					<CALLBACKCODE>

	(M:Event) 'WheelUp' scmp 0 == if{ 
										(L:HJET_PRESSURIZATION_CABIN_OXYMASK, number) 1 &lt; if{ (L:HJET_PRESSURIZATION_CABIN_OXYMASK, number) 1 + (>L:HJET_PRESSURIZATION_CABIN_OXYMASK, number) }
									}

	(M:Event) 'WheelDown' scmp 0 == if{
											(L:HJET_PRESSURIZATION_CABIN_OXYMASK, number) -1 &gt; if{ (L:HJET_PRESSURIZATION_CABIN_OXYMASK, number) 1 - (>L:HJET_PRESSURIZATION_CABIN_OXYMASK, number) }
										}
										
				</CALLBACKCODE>
					<TOOLTIPID>Cabin mask: %((L:HJET_PRESSURIZATION_CABIN_OXYMASK, number) -1 == )%{if}off%{else}%((L:HJET_PRESSURIZATION_CABIN_OXYMASK, number) 0 == )%{if}Norm%{else}%((L:HJET_PRESSURIZATION_CABIN_OXYMASK, number) 1 == )%{if}Drop Mask%{end}</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<!-- Throttle and Prop levers SimVars are -25 <=> 100 -->
					<!-- Converted for anim to be between 0 <=> 100 -->
					<ANIM_NAME>Knob3_Oxygen_DropMask</ANIM_NAME>
					<ANIM_CODE>(L:HJET_PRESSURIZATION_CABIN_OXYMASK, number) 30 * 30 +</ANIM_CODE>
					<ANIM_LENGTH>60</ANIM_LENGTH>
					<ANIM_LAG>500</ANIM_LAG>

				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_AnimTriggers_SoundEvents_Same">
					<ANIM_NAME>Knob3_Oxygen_DropMask</ANIM_NAME>
					<WWISE_EVENT>battery_switch_off</WWISE_EVENT>
					<COUNT>3</COUNT>
					<NORMALIZED_TIME>0.3</NORMALIZED_TIME>

				</UseTemplate>

			</Component>


			<!-- Speed brake button - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

			<Component ID="lever_speed_brake" Node="lever_speed_brake">
				<UseTemplate Name="ASOBO_GT_Switch_Code">

					<ANIM_NAME>lever_speed_brake</ANIM_NAME>
					<LEFT_SINGLE_CODE>(A:SPOILERS HANDLE POSITION,Position 16k) 100 &lt; if{ 16384 (>K:SPOILERS_SET) }
							els{ (>K:SPOILERS_SET) }
			</LEFT_SINGLE_CODE>
					<ANIM_CODE>(A:SPOILERS HANDLE POSITION,Position 16k) 16384 / 100 *</ANIM_CODE>

					<TOOLTIPID>Spoiler: %((A:SPOILERS HANDLE POSITION,Position 16k) 0 &gt; )%{if}Retract%{else}Extend%{end}</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
				</UseTemplate>

			</Component>
			<Component ID="main_door" Node="main_door">
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<!-- Throttle and Prop levers SimVars are -25 <=> 100 -->
					<!-- Converted for anim to be between 0 <=> 100 -->
					<ANIM_NAME>mian_door</ANIM_NAME>
					<ANIM_CODE>(L:HJET_EXIT_OPEN, BOOL) 90 *</ANIM_CODE>
					<ANIM_LENGTH>100</ANIM_LENGTH>
					<ANIM_LAG>20</ANIM_LAG>

				</UseTemplate>
			</Component>


			<!-- =============================================PENUMATIC PANEL ENGINE PEDESTALS ========================================================= -->
			<!-- RIGHT ENGINE BLEED BUTTON - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

			<Component ID="PUSH_PNEUMATIC_BLEEDS_R" Node="PUSH_PNEUMATIC_BLEEDS_R">
				<UseTemplate Name="ASOBO_ELECTRICAL_Engine_Bleed_SubTemplate">
					<ID>2</ID>
					<INTERACTION_TYPE>Push</INTERACTION_TYPE>
					<NODE_ID>PUSH_PNEUMATIC_BLEEDS_R</NODE_ID>
					<ANIM_NAME>PUSH_PNEUMATIC_BLEEDS_R</ANIM_NAME>

				</UseTemplate>
			</Component>


			<Component ID="PUSH_PNEUMATIC_BLEEDS_R_EMISSIVE_NORM" Node="PUSH_PNEUMATIC_BLEEDS_R_EMISSIVE_NORM">
				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>(A:BLEED AIR ENGINE:2, Bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
				</UseTemplate>
			</Component>

			<Component ID="PUSH_PNEUMATIC_BLEEDS_R_EMISSIVE_OFF" Node="PUSH_PNEUMATIC_BLEEDS_R_EMISSIVE_OFF">
				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>(A:BLEED AIR ENGINE:2, Bool) ! (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<!-- LEFT ENGINE BLEED BUTTON- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<Component ID="PUSH_PNEUMATIC_BLEEDS_L" Node="PUSH_PNEUMATIC_BLEEDS_L">
				<UseTemplate Name="ASOBO_ELECTRICAL_Engine_Bleed_SubTemplate">
					<ID>1</ID>
					<INTERACTION_TYPE>Push</INTERACTION_TYPE>
					<NODE_ID>PUSH_PNEUMATIC_BLEEDS_L</NODE_ID>
					<ANIM_NAME>PUSH_PNEUMATIC_BLEEDS_L</ANIM_NAME>

				</UseTemplate>
			</Component>


			<Component ID="PUSH_PNEUMATIC_BLEEDS_L_EMISSIVE_NORM" Node="PUSH_PNEUMATIC_BLEEDS_L_EMISSIVE_NORM">

				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>(A:BLEED AIR ENGINE:1, Bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<Component ID="PUSH_PNEUMATIC_BLEEDS_L_EMISSIVE_OFF" Node="PUSH_PNEUMATIC_BLEEDS_L_EMISSIVE_OFF">
				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>(A:BLEED AIR ENGINE:1, Bool) ! (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
				</UseTemplate>
			</Component>


			<!--cabin inflow L - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

			<Component ID="PUSH_PNEUMATIC_CFLOW_L" Node="PUSH_PNEUMATIC_CFLOW_L">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>PUSH_PNEUMATIC_CFLOW_L</NODE_ID>
					<ANIM_NAME>PUSH_PNEUMATIC_CFLOW_L</ANIM_NAME>
					<LEFT_SINGLE_CODE>
								(L:HJET_CFLOWL,bool) ! (>L:HJET_CFLOWL,bool)
					</LEFT_SINGLE_CODE>
					<TOOLTIPID>Cabin flow left: %((L:HJET_CFLOWL,bool) !)%{if}Push Off%{else}Push NORM%{end}</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
				</UseTemplate>
				<Component ID="PUSH_PNEUMATIC_CFLOW_L_EMISSIVE_NORM" Node="PUSH_PNEUMATIC_CFLOW_L_EMISSIVE_NORM">
					<UseTemplate Name="ASOBO_GT_Visibility_Code">
						<VISIBILITY_CODE>(L:HJET_CFLOWL,bool) ! (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
					</UseTemplate>
				</Component>

				<Component ID="PUSH_PNEUMATIC_CFLOW_L_EMISSIVE_OFF" Node="PUSH_PNEUMATIC_CFLOW_L_EMISSIVE_OFF">
					<UseTemplate Name="ASOBO_GT_Visibility_Code">
						<VISIBILITY_CODE>(L:HJET_CFLOWL,bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
			</Component>

			<!--cabin inflow R - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

			<Component ID="PUSH_PNEUMATIC_CFLOW_R" Node="PUSH_PNEUMATIC_CFLOW_R">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>PUSH_PNEUMATIC_CFLOW_R</NODE_ID>
					<ANIM_NAME>PUSH_PNEUMATIC_CFLOW_R</ANIM_NAME>
					<LEFT_SINGLE_CODE>
								(L:HJET_CFLOWR,bool) ! (>L:HJET_CFLOWR,bool)
					</LEFT_SINGLE_CODE>
					<TOOLTIPID>Cabin flow right: %((L:HJET_CFLOWR,bool) !)%{if}Push Off%{else}Push NORM%{end}</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
				</UseTemplate>
				<Component ID="PUSH_PNEUMATIC_CFLOW_R_EMISSIVE_NORM" Node="PUSH_PNEUMATIC_CFLOW_R_EMISSIVE_NORM">
					<UseTemplate Name="ASOBO_GT_Visibility_Code">
						<VISIBILITY_CODE>(L:HJET_CFLOWR,bool) ! (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
					</UseTemplate>
				</Component>

				<Component ID="PUSH_PNEUMATIC_CFLOW_R_EMISSIVE_OFF" Node="PUSH_PNEUMATIC_CFLOW_R_EMISSIVE_OFF">
					<UseTemplate Name="ASOBO_GT_Visibility_Code">
						<VISIBILITY_CODE>(L:HJET_CFLOWR,bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
			</Component>


			<!-- =============================================ANTI ICE ========================================================= -->

			<!--wing AI - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<Component ID="KNOB3_ICEPROTECTION_WINGAI" Node="KNOB3_ICEPROTECTION_WINGAI">
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<CURSOR>Hand</CURSOR>
					<MOUSEFLAGS_DEFAULT_IM>LeftSingle+LeftRelease+LeftDrag+WheelUp+WheelDown</MOUSEFLAGS_DEFAULT_IM>
					<MouseFlags>LeftAll+WheelUp+WheelDown</MouseFlags>
					<CALLBACKCODE>

	(M:Event) 'WheelUp' scmp 0 == if{ 
										(L:WingAI_Knob, number) 1 &lt; if{ (L:WingAI_Knob, number) 1 + (>L:WingAI_Knob, number) }
									}

	(M:Event) 'WheelDown' scmp 0 == if{
											(L:WingAI_Knob, number) -1 &gt; if{ (L:WingAI_Knob, number) 1 - (>L:WingAI_Knob, number) }
										}
										
				</CALLBACKCODE>

				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<!-- Throttle and Prop levers SimVars are -25 <=> 100 -->
					<!-- Converted for anim to be between 0 <=> 100 -->
					<ANIM_NAME>KNOB3_ICEPROTECTION_WINGAI</ANIM_NAME>
					<ANIM_CODE>(L:WingAI_Knob, number) 30 * 30 +</ANIM_CODE>
					<ANIM_LENGTH>60</ANIM_LENGTH>
					<ANIM_LAG>500</ANIM_LAG>

				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_AnimTriggers_SoundEvents_Same">
					<ANIM_NAME>KNOB3_ICEPROTECTION_WINGAI</ANIM_NAME>
					<WWISE_EVENT>battery_switch_off</WWISE_EVENT>
					<COUNT>3</COUNT>
					<NORMALIZED_TIME>0.3</NORMALIZED_TIME>

				</UseTemplate>

			</Component>

			<!--wing flow - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<Component ID="KNOB3_ICEPROTECTION_WINGFLOW" Node="KNOB3_ICEPROTECTION_WINGFLOW">
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<CURSOR>Hand</CURSOR>
					<MOUSEFLAGS_DEFAULT_IM>LeftSingle+LeftRelease+LeftDrag+WheelUp+WheelDown</MOUSEFLAGS_DEFAULT_IM>
					<MouseFlags>LeftAll+WheelUp+WheelDown</MouseFlags>
					<CALLBACKCODE>

	(M:Event) 'WheelUp' scmp 0 == if{ 
										(L:WingFlow_Knob, number) 1 &lt; if{ (L:WingFlow_Knob, number) 1 + (>L:WingFlow_Knob, number) }
									}

	(M:Event) 'WheelDown' scmp 0 == if{
											(L:WingFlow_Knob, number) -1 &gt; if{ (L:WingFlow_Knob, number) 1 - (>L:WingFlow_Knob, number) }
										}
										
				</CALLBACKCODE>

				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<!-- Throttle and Prop levers SimVars are -25 <=> 100 -->
					<!-- Converted for anim to be between 0 <=> 100 -->
					<ANIM_NAME>KNOB3_ICEPROTECTION_WINGFLOW</ANIM_NAME>
					<ANIM_CODE>(L:WingFlow_Knob, number) 30 * 30 +</ANIM_CODE>
					<ANIM_LENGTH>60</ANIM_LENGTH>
					<ANIM_LAG>500</ANIM_LAG>

				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_AnimTriggers_SoundEvents_Same">
					<ANIM_NAME>KNOB3_ICEPROTECTION_WINGFLOW</ANIM_NAME>
					<WWISE_EVENT>battery_switch_off</WWISE_EVENT>
					<COUNT>3</COUNT>
					<NORMALIZED_TIME>0.3</NORMALIZED_TIME>

				</UseTemplate>

			</Component>

			<!--Engine AI left - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

			<Component ID="PUSH_ICEPROTECTION_ENGINEAI_L" Node="PUSH_ICEPROTECTION_ENGINEAI_L">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>PUSH_ICEPROTECTION_ENGINEAI_L</NODE_ID>
					<ANIM_NAME>PUSH_ICEPROTECTION_ENGINEAI_L</ANIM_NAME>
					<LEFT_SINGLE_CODE>
								(L:HJET_EngineAI_L,bool) ! (>L:HJET_EngineAI_L,bool)
					</LEFT_SINGLE_CODE>
					<TOOLTIPID>Engine Anti Ice Left: %((L:HJET_EngineAI_L,bool) !)%{if}Push Off%{else}Push NORM%{end}</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
				</UseTemplate>
				<Component ID="PUSH_ICEPROTECTION_ENGINEAI_L_EMISSIVE_ON" Node="PUSH_ICEPROTECTION_ENGINEAI_L_EMISSIVE_ON">
					<UseTemplate Name="ASOBO_GT_Visibility_Code">
						<VISIBILITY_CODE>(L:HJET_EngineAI_L,bool)  (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
					</UseTemplate>
				</Component>

				<Component ID="PUSH_ICEPROTECTION_ENGINEAI_L_EMISSIVE_OFF" Node="PUSH_ICEPROTECTION_ENGINEAI_L_EMISSIVE_OFF">
					<UseTemplate Name="ASOBO_GT_Visibility_Code">
						<VISIBILITY_CODE>(L:HJET_EngineAI_L,bool) ! (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
			</Component>


			<!--Engine AI Right - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

			<Component ID="PUSH_ICEPROTECTION_ENGINEAI_R" Node="PUSH_ICEPROTECTION_ENGINEAI_R">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>PUSH_ICEPROTECTION_ENGINEAI_R</NODE_ID>
					<ANIM_NAME>PUSH_ICEPROTECTION_ENGINEAI_R</ANIM_NAME>
					<LEFT_SINGLE_CODE>
								(L:HJET_EngineAI_R,bool) ! (>L:HJET_EngineAI_R,bool)
					</LEFT_SINGLE_CODE>
					<TOOLTIPID>Engine Anti Ice Right: %((L:HJET_EngineAI_R,bool) !)%{if}Push Off%{else}Push NORM%{end}</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
				</UseTemplate>
				<Component ID="PUSH_ICEPROTECTION_ENGINEAI_R_EMISSIVE_ON" Node="PUSH_ICEPROTECTION_ENGINEAI_R_EMISSIVE_ON">
					<UseTemplate Name="ASOBO_GT_Visibility_Code">
						<VISIBILITY_CODE>(L:HJET_EngineAI_R,bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
					</UseTemplate>
				</Component>

				<Component ID="PUSH_ICEPROTECTION_ENGINEAI_R_EMISSIVE_OFF" Node="PUSH_ICEPROTECTION_ENGINEAI_R_EMISSIVE_OFF">
					<UseTemplate Name="ASOBO_GT_Visibility_Code">
						<VISIBILITY_CODE>(L:HJET_EngineAI_R,bool) ! (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
			</Component>

			<!--Tail DeIce - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<Component ID="KNOB3_ICEPROTECTION_TAIL" Node="KNOB3_ICEPROTECTION_TAIL">
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<CURSOR>Hand</CURSOR>
					<MOUSEFLAGS_DEFAULT_IM>LeftSingle+LeftRelease+LeftDrag+WheelUp+WheelDown</MOUSEFLAGS_DEFAULT_IM>
					<MouseFlags>LeftAll+WheelUp+WheelDown</MouseFlags>
					<CALLBACKCODE>

	(M:Event) 'WheelUp' scmp 0 == if{ 
										(L:TailDeIce_Knob, number) 1 &lt; if{ (L:TailDeIce_Knob, number) 1 + (>L:TailDeIce_Knob, number) }
									}

	(M:Event) 'WheelDown' scmp 0 == if{
											(L:TailDeIce_Knob, number) -1 &gt; if{ (L:TailDeIce_Knob, number) 1 - (>L:TailDeIce_Knob, number) }
										}
										
				</CALLBACKCODE>

				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<!-- Throttle and Prop levers SimVars are -25 <=> 100 -->
					<!-- Converted for anim to be between 0 <=> 100 -->
					<ANIM_NAME>KNOB3_ICEPROTECTION_TAIL</ANIM_NAME>
					<ANIM_CODE>(L:TailDeIce_Knob, number) 30 * 30 +</ANIM_CODE>
					<ANIM_LENGTH>60</ANIM_LENGTH>
					<ANIM_LAG>500</ANIM_LAG>

				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_AnimTriggers_SoundEvents_Same">
					<ANIM_NAME>KNOB3_ICEPROTECTION_TAIL</ANIM_NAME>
					<WWISE_EVENT>battery_switch_off</WWISE_EVENT>
					<COUNT>3</COUNT>
					<NORMALIZED_TIME>0.3</NORMALIZED_TIME>

				</UseTemplate>

			</Component>


			<!--windsheild deice 1 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

			<Component ID="PUSH_WINDOWHEAT_L" Node="PUSH_WINDOWHEAT_L">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>PUSH_WINDOWHEAT_L</NODE_ID>
					<ANIM_NAME>PUSH_WINDOWHEAT_L</ANIM_NAME>
					<LEFT_SINGLE_CODE>
								(L:HJET_WindSheildHeat_L,bool) ! (>L:HJET_WindSheildHeat_L,bool)
					</LEFT_SINGLE_CODE>
					<TOOLTIPID>Winsheild Anti Ice Left: %((L:HJET_WindSheildHeat_L,bool) !)%{if}Push Off%{else}Push NORM%{end}</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
				</UseTemplate>
				<Component ID="PUSH_WINDOWHEAT_L_EMISSIVE_NORM" Node="PUSH_WINDOWHEAT_L_EMISSIVE_NORM">
					<UseTemplate Name="ASOBO_GT_Visibility_Code">
						<VISIBILITY_CODE>(L:HJET_WindSheildHeat_L,bool) ! (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
					</UseTemplate>
				</Component>

				<Component ID="PUSH_WINDOWHEAT_L_EMISSIVE_OFF" Node="PUSH_WINDOWHEAT_L_EMISSIVE_OFF">
					<UseTemplate Name="ASOBO_GT_Visibility_Code">
						<VISIBILITY_CODE>(L:HJET_WindSheildHeat_L,bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
			</Component>

			<!--windsheild deice R - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

			<Component ID="PUSH_WINDOWHEAT_R" Node="PUSH_WINDOWHEAT_R">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>PUSH_WINDOWHEAT_R</NODE_ID>
					<ANIM_NAME>PUSH_WINDOWHEAT_R</ANIM_NAME>
					<LEFT_SINGLE_CODE>
								(L:HJET_WindSheildHeat_R,bool) ! (>L:HJET_WindSheildHeat_R,bool)
					</LEFT_SINGLE_CODE>
					<TOOLTIPID>Winsheild Anti Ice Right: %((L:HJET_WindSheildHeat_R,bool) !)%{if}Push Off%{else}Push NORM%{end}</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
				</UseTemplate>
				<Component ID="PUSH_WINDOWHEAT_R_EMISSIVE_NORM" Node="PUSH_WINDOWHEAT_R_EMISSIVE_NORM">
					<UseTemplate Name="ASOBO_GT_Visibility_Code">
						<VISIBILITY_CODE>(L:HJET_WindSheildHeat_R,bool) ! (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
					</UseTemplate>
				</Component>

				<Component ID="PUSH_WINDOWHEAT_R_EMISSIVE_OFF" Node="PUSH_WINDOWHEAT_R_EMISSIVE_OFF">
					<UseTemplate Name="ASOBO_GT_Visibility_Code">
						<VISIBILITY_CODE>(L:HJET_WindSheildHeat_R,bool) (L:HJET_ELECTRICITY_ESTABLISHED,number) and (L:lightTestInProgress_6) or (L:lightTestInProgress_0) or</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
			</Component>

			<Component ID="toga_button_l" Node="toga_button_l">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>toga_button_l</NODE_ID>
					<ANIM_NAME>toga_button_lAction</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(&gt;K:AUTO_THROTTLE_TO_GA)

					</LEFT_SINGLE_CODE>
					<TOOLTIPID>%((L:HJET_TOGA_ACTIVE,bool) !)%{if}Activate TOGA%{else}Deactivate TOGA%{end}</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
				</UseTemplate>
			</Component>


			<UseTemplate Name="ASOBO_ENGINE_PUSH_Starter_Template">

				<ID>1</ID>

			</UseTemplate>


			<UseTemplate Name="ASOBO_ENGINE_PUSH_Starter_Template">

				<ID>2</ID>

			</UseTemplate>


		</Component>

		<!-- =============================================END Marwan Cutom events END ========================================================= -->

		<!-- INSTRUMENT ################################# -->
		<Component ID="INSTRUMENT">
			<UseTemplate Name="ASOBO_INSTRUMENT_Dial_Compass_Template">
				<ANIM_NAME>cylinder_compass</ANIM_NAME>
				<NODE_ID>cylinder_compass</NODE_ID>
			</UseTemplate>
			<CameraTitle>Pilot</CameraTitle>
		</Component>


		<Component ID="AS3000_GTC2">

			<UseTemplate Name="WT_G3000_GTC_Vertical_SubTemplate">
				<ID>2</ID>
				<INPUT_EVENT_ID_SOURCE>AS3000_TSC_Vertical_2</INPUT_EVENT_ID_SOURCE>
				<KEY_PREFIX>AS3000_TSC_Vertical_2</KEY_PREFIX>
				<NODE_ID_RIGHT_OUTER_KNOB>AS580_KNOB_01_2</NODE_ID_RIGHT_OUTER_KNOB>
				<ANIM_NAME_RIGHT_OUTER_KNOB>AS580_KNOB_01_2</ANIM_NAME_RIGHT_OUTER_KNOB>

				<NODE_ID_RIGHT_INNER_KNOB>AS580_KNOB_02_Small_2</NODE_ID_RIGHT_INNER_KNOB>
				<ANIM_NAME_RIGHT_INNER_KNOB>AS580_KNOB_02_Small_2</ANIM_NAME_RIGHT_INNER_KNOB>
				<ANIM_NAME_RIGHT_INNER_KNOB_PUSH>AS580_push_KNOB_02_Small_2</ANIM_NAME_RIGHT_INNER_KNOB_PUSH>

				<NODE_ID_LEFT_JOYSTICK>AS580_KNOB_02_2</NODE_ID_LEFT_JOYSTICK>
				<PAN_NODE_ID_LEFT_JOYSTICK>GTC_L_PAN</PAN_NODE_ID_LEFT_JOYSTICK>
				<ANIM_NAME_LEFT_JOYSTICK_KNOB>AS580_KNOB_02_2</ANIM_NAME_LEFT_JOYSTICK_KNOB>
				<ANIM_NAME_LEFT_JOYSTICK_PUSH>AS580_KNOB_02_2</ANIM_NAME_LEFT_JOYSTICK_PUSH>
				<ANIM_NAME_LEFT_JOYSTICK_L_R>AS580_KNOB_02_2</ANIM_NAME_LEFT_JOYSTICK_L_R>
				<ANIM_NAME_LEFT_JOYSTICK_DN_UP>AS580_KNOB_02_2</ANIM_NAME_LEFT_JOYSTICK_DN_UP>

				<NODE_ID_MIDDLE_KNOB>AS580_KNOB_03_2</NODE_ID_MIDDLE_KNOB>
				<ANIM_NAME_MIDDLE_KNOB>AS580_KNOB_02_L</ANIM_NAME_MIDDLE_KNOB>
				<ANIM_NAME_MIDDLE_KNOB_PUSH>AS580_KNOB_02_L</ANIM_NAME_MIDDLE_KNOB_PUSH>
			</UseTemplate>
			<CameraTitle>MFD</CameraTitle>
		</Component>
		
		

		<Component ID="AS3000_GTC1">

			<UseTemplate Name="WT_G3000_GTC_Vertical_SubTemplate">
				<ID>1</ID>
				<INPUT_EVENT_ID_SOURCE>AS3000_TSC_Vertical_1</INPUT_EVENT_ID_SOURCE>
				<NODE_ID_RIGHT_OUTER_KNOB>AS580_KNOB_01_1</NODE_ID_RIGHT_OUTER_KNOB>
				<ANIM_NAME_RIGHT_OUTER_KNOB>AS580_KNOB_01_1</ANIM_NAME_RIGHT_OUTER_KNOB>

				<NODE_ID_RIGHT_INNER_KNOB>AS580_KNOB_02_Small_1</NODE_ID_RIGHT_INNER_KNOB>
				<ANIM_NAME_RIGHT_INNER_KNOB>AS580_KNOB_02_Small_1</ANIM_NAME_RIGHT_INNER_KNOB>
				<ANIM_NAME_RIGHT_INNER_KNOB_PUSH>AS580_push_KNOB_02_Small_1</ANIM_NAME_RIGHT_INNER_KNOB_PUSH>

				<NODE_ID_LEFT_JOYSTICK>AS580_KNOB_02_1</NODE_ID_LEFT_JOYSTICK>
				<PAN_NODE_ID_LEFT_JOYSTICK>GTC_R_PAN</PAN_NODE_ID_LEFT_JOYSTICK>
				<ANIM_NAME_LEFT_JOYSTICK_KNOB>AS580_KNOB_02_1</ANIM_NAME_LEFT_JOYSTICK_KNOB>
				<ANIM_NAME_LEFT_JOYSTICK_PUSH>AS580_KNOB_02_1</ANIM_NAME_LEFT_JOYSTICK_PUSH>
				<ANIM_NAME_LEFT_JOYSTICK_L_R>AS580_KNOB_02_1</ANIM_NAME_LEFT_JOYSTICK_L_R>
				<ANIM_NAME_LEFT_JOYSTICK_DN_UP>AS580_KNOB_02_1</ANIM_NAME_LEFT_JOYSTICK_DN_UP>

				<NODE_ID_MIDDLE_KNOB>AS580_KNOB_03_1</NODE_ID_MIDDLE_KNOB>
				<ANIM_NAME_MIDDLE_KNOB>AS580_KNOB_02_R</ANIM_NAME_MIDDLE_KNOB>
				<ANIM_NAME_MIDDLE_KNOB_PUSH>AS580_KNOB_02_R</ANIM_NAME_MIDDLE_KNOB_PUSH>
			</UseTemplate>
			<CameraTitle>MFD</CameraTitle>
		</Component>

		<!-- HANDLING ################################### -->
		<Component ID="HANDLING_Yokes">
			<Component ID="HANDLING_Yoke_Anim">
				<UseTemplate Name="ASOBO_HANDLING_Yoke_Template">
					<ANIM_NAME_YOKE_X>lever_stick_l_rAction</ANIM_NAME_YOKE_X>
					<ANIM_NAME_YOKE_Y>lever_stick_fore_aftAction</ANIM_NAME_YOKE_Y>
					<NODE_ID>yoke_left</NODE_ID>
					<AP_CAN_DRIVE_ANIMATION>True</AP_CAN_DRIVE_ANIMATION>
				</UseTemplate>
			</Component>
			<Component ID="HANDLING_Yoke_Stick_Left">
				<UseTemplate Name="ASOBO_HANDLING_Yoke_Hideable_Template">
					<NODE_ID>yoke_left</NODE_ID>
					<YOKE_HIDER_NODE_ID>YOKE_LEFT_VISIBILITY</YOKE_HIDER_NODE_ID>
					<YOKE_NODE_ID>yoke_left</YOKE_NODE_ID>
					<ANIM_NAME_YOKE_X>lever_stick_l_r</ANIM_NAME_YOKE_X>
					<ANIM_NAME_YOKE_Y>lever_stick_fore_aft</ANIM_NAME_YOKE_Y>
					<AP_CAN_DRIVE_ANIMATION>True</AP_CAN_DRIVE_ANIMATION>
					<ID>1</ID>
				</UseTemplate>

				<UseTemplate Name="ASOBO_HANDLING_Push_Timer_Template">
					<NODE_ID>YOKE_PUSH_TIMER</NODE_ID>
					<ANIM_NAME>YOKE_PUSH_TIMER</ANIM_NAME>
					<TOOLTIPID>TT:COCKPIT.TOOLTIPS.YOKE_BUTTON_TIMER_START</TOOLTIPID>


				</UseTemplate>
				<UseTemplate Name="ASOBO_HANDLING_Push_StormClear_Template">
					<NODE_ID>YOKE_PUSH_STORM_CLR_LEFT</NODE_ID>
					<ANIM_NAME>YOKE_PUSH_STORM_CLR_LEFT</ANIM_NAME>
				</UseTemplate>

				<UseTemplate Name="ASOBO_HANDLING_Push_CWS_Template">
					<NODE_ID>YOKE_PUSH_CWS_LEFT</NODE_ID>
					<ANIM_NAME>YOKE_PUSH_CWS_LEFT</ANIM_NAME>
				</UseTemplate>

				<UseTemplate Name="ASOBO_HANDLING_Push_Ident_Template">
					<NODE_ID>YOKE_PUSH_IDENT_LEFT</NODE_ID>
					<ANIM_NAME>YOKE_PUSH_IDENT_LEFT</ANIM_NAME>
				</UseTemplate>

				<UseTemplate Name="ASOBO_HANDLING_Joystick_YawPitch_Template">
					<ID>1</ID>
					<NODE_ID>YOKE_PUSH_NOSE_LEFT</NODE_ID>
					<ANIM_NAME_L_R>YOKE_L_PUSH_NOSE_L_R</ANIM_NAME_L_R>
					<ANIM_NAME_DN_UP>YOKE_L_PUSH_NOSE_DN_UP</ANIM_NAME_DN_UP>
				</UseTemplate>

				<UseTemplate Name="ASOBO_HANDLING_Push_AP_Trim_Disc_Template">
					<NODE_ID>YOKE_AP_BUTTON</NODE_ID>
					<ANIM_NAME>YOKE_AP_BUTTON</ANIM_NAME>
				</UseTemplate>

				<UseTemplate Name="ASOBO_HANDLING_Push_Swap_Template">
					<NODE_ID>YOKE_PUSH_BACK_R_LEFT</NODE_ID>
					<ANIM_NAME>YOKE_PUSH_BACK_R_LEFT</ANIM_NAME>
				</UseTemplate>
			</Component>

			<Component ID="HANDLING_Yoke_Stick_Right">
				<UseTemplate Name="ASOBO_HANDLING_Yoke_Hideable_Template">
					<NODE_ID>yoke_right</NODE_ID>
					<YOKE_HIDER_NODE_ID>YOKE_RIGHT_VISIBILITY</YOKE_HIDER_NODE_ID>
					<YOKE_NODE_ID>yoke_right</YOKE_NODE_ID>
					<ID>2</ID>
					<ONLY_HIDEABLE />
				</UseTemplate>

				<UseTemplate Name="ASOBO_HANDLING_Push_Timer_Template">
					<NODE_ID>YOKE_PUSH_TIMER_RIGHT</NODE_ID>
					<ANIM_NAME>YOKE_PUSH_TIMER_RIGHT</ANIM_NAME>
				</UseTemplate>

				<UseTemplate Name="ASOBO_HANDLING_Push_StormClear_Template">
					<NODE_ID>YOKE_PUSH_STORM_CLR_RIGHT</NODE_ID>
					<ANIM_NAME>YOKE_PUSH_STORM_CLR_RIGHT</ANIM_NAME>
					<TOOLTIPID>TT:COCKPIT.TOOLTIPS.YOKE_BUTTON_STORM_CLEAR</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="ASOBO_HANDLING_Push_CWS_Template">
					<NODE_ID>YOKE_PUSH_CWS_RIGHT</NODE_ID>
					<ANIM_NAME>YOKE_PUSH_CWS_RIGHT</ANIM_NAME>
					<TOOLTIPID>TT:COCKPIT.TOOLTIPS.YOKE_BUTTON_CWS</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="ASOBO_HANDLING_Push_Ident_Template">
					<NODE_ID>YOKE_PUSH_IDENT_RIGHT</NODE_ID>
					<ANIM_NAME>YOKE_PUSH_IDENT_RIGHT</ANIM_NAME>
					<TOOLTIPID>TT:COCKPIT.TOOLTIPS.YOKE_BUTTON_IDENT</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="ASOBO_HANDLING_Joystick_YawPitch_Template">
					<ID>2</ID>
					<NODE_ID>YOKE_PUSH_NOSE_RIGHT</NODE_ID>
					<ANIM_NAME_L_R>YOKE_R_PUSH_NOSE_L_R</ANIM_NAME_L_R>
					<ANIM_NAME_DN_UP>YOKE_R_PUSH_NOSE_DN_UP</ANIM_NAME_DN_UP>
					<TOOLTIPID>TT:COCKPIT.TOOLTIPS.YOKE_PUSH_NOSE</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="ASOBO_HANDLING_Push_AP_Trim_Disc_Template">
					<NODE_ID>YOKE_PUSH_AP_TRIM_DISC_RIGHT</NODE_ID>
					<ANIM_NAME>YOKE_PUSH_AP_TRIM_DISC_RIGHT</ANIM_NAME>
					<TOOLTIPID>TT:COCKPIT.TOOLTIPS.YOKE_AP_TRIM_DISC</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="ASOBO_HANDLING_Push_Swap_Template">
					<NODE_ID>YOKE_PUSH_BACK_R_RIGHT</NODE_ID>
					<ANIM_NAME>YOKE_PUSH_BACK_R_RIGHT</ANIM_NAME>
				</UseTemplate>
			</Component>
			<CameraTitle>Yokes</CameraTitle>
		</Component>

		<Component ID="HANDLING_Pedestal">
			<UseTemplate Name="ASOBO_HANDLING_RudderPedals_Template">
				<RUDDERPEDALS_TYPE>MIXED</RUDDERPEDALS_TYPE>
				<NODE_ID_L_BRAKE_1>lever_pedals_Brake_1_1</NODE_ID_L_BRAKE_1>
				<NODE_ID_L_BRAKE_2>lever_pedals_Brake_1_2</NODE_ID_L_BRAKE_2>
				<NODE_ID_R_BRAKE_1>lever_pedals_Brake_2_1</NODE_ID_R_BRAKE_1>
				<NODE_ID_R_BRAKE_2>lever_pedals_Brake_2_2</NODE_ID_R_BRAKE_2>
				<NODE_ID_L_RUDDER>lever_pedals_1</NODE_ID_L_RUDDER>
				<NODE_ID_R_RUDDER>lever_pedals_2</NODE_ID_R_RUDDER>
				<NODE_ID>lever_pedals_1</NODE_ID>
				<ANIM_NAME>HANDLING_RudderPedals_L_R</ANIM_NAME>
			</UseTemplate>
			<UseTemplate Name="ASOBO_HANDLING_RudderPedals_Template">
				<ANIM_NAME>HANDLING_RudderPedals_l_r</ANIM_NAME>
				<ID>2</ID>
				<NODE_ID>lever_pedals_2</NODE_ID>
			</UseTemplate>
			<UseTemplate Name="ASOBO_HANDLING_Lever_Flaps_Template">
				<ANIM_NAME>lever_flap</ANIM_NAME>
				<NODE_ID>hitbox_lever_flaps</NODE_ID>
				<ANIMREF_ID>0</ANIMREF_ID>
				<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.FLAPS_LEVER_UP</ANIMTIP_0>
				<ANIMTIP_0_ON_PERCENT>0</ANIMTIP_0_ON_PERCENT>
				<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.FLAPS_LEVER_TO</ANIMTIP_1>
				<ANIMTIP_1_ON_PERCENT>0.5</ANIMTIP_1_ON_PERCENT>
				<ANIMTIP_2>TT:COCKPIT.TOOLTIPS.FLAPS_LEVER_LDG</ANIMTIP_2>
				<ANIMTIP_2_ON_PERCENT>1</ANIMTIP_2_ON_PERCENT>


			</UseTemplate>

			<CameraTitle>Pedestal</CameraTitle>
		</Component>
		<!-- 	<Component ID="HANDLING_Overhead"> 
		<Component ID="HANDLING_Switch_AutopilotTrim" Node="aptrims_switch"> 
			<UseTemplate Name="ASOBO_GT_Switch_XStates">
				<NUM_STATES>3</NUM_STATES>
				<PART_ID>HANDLING_Switch_AutopilotTrim</PART_ID>
				<SWITCH_POSITION_TYPE>L</SWITCH_POSITION_TYPE>
				<SWITCH_POSITION_VAR>XMLVAR_APTrim</SWITCH_POSITION_VAR>
				<ANIM_NAME>aptrims_switch</ANIM_NAME>
				<WWISE_EVENT>aptrims_switch</WWISE_EVENT> 
				<CODE_POS_0>
					(A:AUTOPILOT DISENGAGED, Bool) if{ (&gt;K:AUTOPILOT_DISENGAGE_TOGGLE) }
				</CODE_POS_0>
				<CODE_POS_1>
					(A:AUTOPILOT DISENGAGED, Bool) ! if{ (&gt;K:AUTOPILOT_DISENGAGE_TOGGLE) }
					(A:RUDDER TRIM DISABLED, Bool) if{ 0 (&gt;K:RUDDER_TRIM_DISABLED_SET) }
					(A:AILERON TRIM DISABLED, Bool) if{ 0 (&gt;K:AILERON_TRIM_DISABLED_SET) }
				</CODE_POS_1>
				<CODE_POS_2>
					(A:AUTOPILOT DISENGAGED, Bool) ! if{ (&gt;K:AUTOPILOT_DISENGAGE_TOGGLE) }
					(A:RUDDER TRIM DISABLED, Bool) ! if{ 1 (&gt;K:RUDDER_TRIM_DISABLED_SET) }
					(A:AILERON TRIM DISABLED, Bool) ! if{ 1 (&gt;K:AILERON_TRIM_DISABLED_SET) }
				</CODE_POS_2>
				<STATE0_TEST>
					(A:AUTOPILOT DISENGAGED, Bool) !
				</STATE0_TEST>
				<STATE1_TEST>
					(A:AUTOPILOT DISENGAGED, Bool) 
					(A:RUDDER TRIM DISABLED, Bool) ! and
					(A:AILERON TRIM DISABLED, Bool) ! and
				</STATE1_TEST>
				<STATE2_TEST>
					(A:AUTOPILOT DISENGAGED, Bool) 
					(A:RUDDER TRIM DISABLED, Bool) and
					(A:AILERON TRIM DISABLED, Bool) and
				</STATE2_TEST>
				<ANIMREF_ID>0</ANIMREF_ID>
				<ANIMTIP_0_ON_PERCENT>0</ANIMTIP_0_ON_PERCENT>
				<ANIMTIP_2_ON_PERCENT>.5</ANIMTIP_2_ON_PERCENT>
				<ANIMTIP_2_ON_PERCENT>1</ANIMTIP_2_ON_PERCENT>
				<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.APTRIM_TURN_ON</ANIMTIP_0>
				<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.APTRIM_TURN_OFF_AP</ANIMTIP_1>
				<ANIMTIP_2>TT:COCKPIT.TOOLTIPS.APTRIM_TURN_OFF_ALL</ANIMTIP_2>
			</UseTemplate>
		</Component>
		<CameraTitle>Overhead</CameraTitle>
	</Component>
 -->
		<!-- LANDING_GEAR ############################### -->
		<Macro Name="DimmerLightIntensity"> 0.1 </Macro>
		<Component ID="LANDING_GEAR">
			<UseTemplate Name="ASOBO_LANDING_GEAR_Switch_ParkingBrake_Template">
				<NODE_ID>parkbrake_knob_l</NODE_ID>
				<ANIM_NAME>parkbrake_knob_l</ANIM_NAME>
				<ANIM_SIMVAR_SCALE>100</ANIM_SIMVAR_SCALE>
				<ANIM_LAG>100</ANIM_LAG>

			</UseTemplate>


			<CameraTitle>PFD</CameraTitle>

		</Component>

		<!-- PRESSURIZATION ############################# -->
		<Component ID="PRESSURIZATION">
			<UseTemplate Name="ASOBO_PRESSURIZATION_Switch_Bleed_Template">
				<NODE_ID>pressurization_switch_bleed</NODE_ID>
				<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.PRESSURIZATION_PANEL_BLEED_MODE_AUTO</ANIMTIP_0>
				<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.PRESSURIZATION_PANEL_BLEED_MODE_MAXDIFF</ANIMTIP_1>
				<ANIMTIP_2>TT:COCKPIT.TOOLTIPS.PRESSURIZATION_PANEL_BLEED_MODE_OFF</ANIMTIP_2>

			</UseTemplate>
			<UseTemplate Name="ASOBO_PRESSURIZATION_Push_Dump_Template">
				<NODE_ID>PRESSURIZATION_PUSH_DUMP</NODE_ID>

				<TOOLTIPID>%((A:PRESSURIZATION DUMP SWITCH, bool))%{if}TT:COCKPIT.TOOLTIPS.PRESSURIZATION_PANEL_DUMP_BUTTON_ON%{else}TT:COCKPIT.TOOLTIPS.PRESSURIZATION_PANEL_DUMP_BUTTON_OFF%{end}</TOOLTIPID>


			</UseTemplate>
			<UseTemplate Name="ASOBO_PRESSURIZATION_Push_Dump_Cover_Template">
				<NODE_ID>PRESSURIZATION_PUSH_DUMP_cover</NODE_ID>
				<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.PRESSURIZATION_PANEL_DUMP_GUARD_ON</ANIMTIP_0>
				<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.PRESSURIZATION_PANEL_DUMP_GUARD_OFF</ANIMTIP_1>

			</UseTemplate>
			<UseTemplate Name="ASOBO_PRESSURIZATION_Push_Norm_Emissive_Template">
				<NODE_ID>PRESSURIZATION_PUSH_NORM_text</NODE_ID>
			</UseTemplate>
			<UseTemplate Name="ASOBO_PRESSURIZATION_Push_Dump_Emissive_Template">
				<NODE_ID>PRESSURIZATION_PUSH_DUMP_text</NODE_ID>
			</UseTemplate>
			<UseTemplate Name="ASOBO_PRESSURIZATION_Push_MicroMask_Cover_Template">
				<NODE_ID>PUSH_BUTTON_cover</NODE_ID>
				<ANIM_NAME>PUSH_BUTTON_cover</ANIM_NAME>
				<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.MIC_MASK_BUTTON_GUARD_ON</ANIMTIP_0>
				<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.MIC_MASK_BUTTON_GUARD_OFF</ANIMTIP_1>
			</UseTemplate>
			<UseTemplate Name="ASOBO_PRESSURIZATION_Push_MicroMask_Template">
				<NODE_ID>PUSH_BUTTON</NODE_ID>
				<ANIM_NAME>PUSH_BUTTON</ANIM_NAME>
				<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.MIC_MASK_BUTTON_MIC</ANIMTIP_0>
				<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.MIC_MASK_BUTTON_MASK</ANIMTIP_1>
			</UseTemplate>
			<UseTemplate Name="ASOBO_PRESSURIZATION_Push_Micro_Emissive_Template">
				<NODE_ID>PUSH_MICRO_text</NODE_ID>
			</UseTemplate>
			<UseTemplate Name="ASOBO_PRESSURIZATION_Push_Mask_Emissive_Template">
				<NODE_ID>PUSH_MASK_text</NODE_ID>
			</UseTemplate>
			<CameraTitle>PFD</CameraTitle>
		</Component>
		<Component ID="PRESSURIZATION_Overhead">

			<UseTemplate Name="ASOBO_PRESSURIZATION_Switch_Deploy_Template">
				<ANIM_NAME>TOPNOPANEL_SWITCH_DEPLOY</ANIM_NAME>
				<NODE_ID>TOPNOPANEL_SWITCH_DEPLOY</NODE_ID>
				<PART_ID>OXYGEN_Switch_Passenger</PART_ID>
				<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.PASSENGER_OXYGEN_TURN_ON</ANIMTIP_0>
				<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.PASSENGER_OXYGEN_TURN_OFF</ANIMTIP_1>
			</UseTemplate>

			<UseTemplate Name="ASOBO_PRESSURIZATION_Switch_Oxygen_Template">
				<ANIM_NAME>TOPNOPANEL_SWITCH_OXYGEN</ANIM_NAME>
				<NODE_ID>TOPNOPANEL_SWITCH_OXYGEN</NODE_ID>
				<PART_ID>OXYGEN_Switch_Copilot</PART_ID>
				<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.OXYGEN_TURN_ON</ANIMTIP_0>
				<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.OXYGEN_TURN_OFF</ANIMTIP_1>
			</UseTemplate>

			<CameraTitle>Overhead</CameraTitle>
		</Component>

		<Macro Name="PosTransition"> 100 </Macro>
		<!-- == PARAMS == -->
		<Macro Name="XSpeed"> 2.6 </Macro>
		<Macro Name="YSpeed"> 2.6 </Macro>
		<Macro Name="ReverseSpeedFactor"> 0.15 </Macro>
		<!-- Unfeathered -->
		<Macro Name="ThrottleValPropLeverChange"> 0 </Macro>

		<!-- Feathered -->
		<Macro Name="ConditionPosIdleHI"> 30 </Macro>
		<Macro Name="ConditionPosIdleLO"> 0 </Macro>
		<Macro Name="ConditionPosCutoff"> 0 </Macro>

		<!-- Other -->
		<Macro Name="PosIsUnFeathered"> 100 </Macro>
		<Macro Name="PosIsFeathered"> -25 </Macro>

		<Macro Name="LeverSpeedThrottle"> 80 </Macro>
		<Macro Name="LeverSpeedProp"> 2048 </Macro>

		<Macro Name="AutoMoveSpeed"> 30 </Macro>
		<Macro Name="AutoMoveSpeedCondition"> 2 </Macro>
		<Macro Name="AutoMoveSpeedProp"> 20 </Macro>
		<Macro Name="PropSideDragMin">15</Macro>
		<Macro Name="ThrottleDragMin">15</Macro>

		<Macro Name="ManOverrideTreshhold">50</Macro>

		<!-- == 16k CONVERSIONS == -->
		<Macro Name="ConvertTo16k"> 163.84 * flr </Macro>
		<Macro Name="ThrottleValPropLeverChange16k"> @ThrottleValPropLeverChange @ConvertTo16k </Macro>
		<Macro Name="ThrottleGateBeta"> @ThrottleValPropLeverChange </Macro>
		<Macro Name="ThrottleGateBeta16k"> @ThrottleGateBeta @ConvertTo16k </Macro>
		<Macro Name="GateTolerance"> 15 </Macro>
		<Macro Name="GateTolerance16k"> @GateTolerance @ConvertTo16k </Macro>
		<Macro Name="ConditionPosCutoff16k"> @ConditionPosCutoff @ConvertTo16k </Macro>
		<Macro Name="ConditionPosIdleLO16k"> @ConditionPosIdleLO @ConvertTo16k </Macro>
		<Macro Name="ConditionPosIdleHI16k"> @ConditionPosIdleHI @ConvertTo16k </Macro>
		<Macro Name="PosIsUnFeathered16k"> @PosIsUnFeathered @ConvertTo16k </Macro>
		<Macro Name="PosIsFeathered16k"> @PosIsFeathered @ConvertTo16k </Macro>

		<!-- == SHORTHANDS == -->
		<Macro Name="dMoveX">l2</Macro>
		<Macro Name="dMoveY">l3</Macro>
		<Macro Name="IsFeathered">l4</Macro>
		<Macro Name="IsUnFeathered">l5</Macro>
		<Macro Name="IsOnCutoff">l6</Macro>
		<Macro Name="IsOnIdleLO">l7</Macro>
		<Macro Name="IsOnIdleHI">l8</Macro>
		<Macro Name="IsAtPropJunctionInThrust">l9</Macro>
		<Macro Name="IsAtPropJunctionInCondition">l10</Macro>

		<!-- == FUNCTIONS == -->
		<Macro Name="ResetGate">
		(L:LEVER_MAN_OVRD) @ManOverrideTreshhold &gt;
		(I:XMLVAR_ThrottlePos_Disconnected_YAxis) @ThrottleGateBeta @GateTolerance + &gt;= and

		(L:LEVER_MAN_OVRD) @ManOverrideTreshhold &lt;=
		l0 @ThrottleGateBeta16k @GateTolerance16k + &gt;= and or if{
			0 (&gt;O:GateStep)
		}
	</Macro>
		<Macro Name="SetToGateReverse">
		(L:LEVER_MAN_OVRD) @ManOverrideTreshhold &gt; if{
			@ThrottleGateBeta (&gt;I:XMLVAR_ThrottlePos_Disconnected_YAxis)
		} els{
			@ThrottleGateBeta16k (&gt;K:THROTTLE1_SET) 
		}
	</Macro>
		<Macro Name="ThrottleMovement16k">@LeverSpeedThrottle @dMoveY abs *</Macro>
		<Macro Name="ThrottleMovement">@LeverSpeedThrottle 163.84 / @dMoveY abs *</Macro>
		<Macro Name="IsAtReverseGate">
		(L:LEVER_MAN_OVRD) @ManOverrideTreshhold &gt;
		(I:XMLVAR_ThrottlePos_Disconnected_YAxis) @ThrottleGateBeta &gt;=
		(I:XMLVAR_ThrottlePos_Disconnected_YAxis) @ThrottleMovement - @ThrottleGateBeta &lt; and and

		(L:LEVER_MAN_OVRD) @ManOverrideTreshhold &lt;=
		l0 @ThrottleGateBeta16k &gt;=
		l0 @ThrottleMovement16k - @ThrottleGateBeta16k &lt; and and or
	</Macro>
		<Macro Name="ResetThrottleAnimValue">
		(L:LEVER_MAN_OVRD) @ManOverrideTreshhold &gt; if{
			(I:XMLVAR_ThrottlePos_Disconnected_YAxis) (&gt;L:XMLVAR_ThrottlePos_YAxis)
		} els{
			(A:GENERAL ENG THROTTLE LEVER POSITION:1, percent) (&gt;L:XMLVAR_ThrottlePos_YAxis)
		}
	</Macro>

		<Macro Name="SetNeedsToRelease"> 1 (&gt;O:NeedsToRelease) </Macro>
		<Macro Name="SetLimitedToCutoff"> 1 (&gt;O:IsLimitedToCutoff) 1 (&gt;O:IsLimitedToAny) </Macro>
		<Macro Name="SetLimitedToIdleLO"> 1 (&gt;O:IsLimitedToIdleLO) 1 (&gt;O:IsLimitedToAny) </Macro>
		<Macro Name="SetLimitedToIdleHI"> 1 (&gt;O:IsLimitedToIdleHI) 1 (&gt;O:IsLimitedToAny) </Macro>
		<Macro Name="CanMoveToCutoff"> (O:IsLimitedToCutoff) 1 == (O:IsLimitedToAny) 0 == or </Macro>
		<Macro Name="CanMoveToIdleLO"> (O:IsLimitedToIdleLO) 1 == (O:IsLimitedToAny) 0 == or </Macro>
		<Macro Name="CanMoveToIdleHI"> (O:IsLimitedToIdleHI) 1 == (O:IsLimitedToAny) 0 == or </Macro>
		<Macro Name="ToggleFuelValve"> 
		(&gt;K:TOGGLE_FUEL_VALVE_ENG1)
	</Macro>
		<Macro Name="OpenFuelValve"> 
		(A:GENERAL ENG FUEL VALVE:1, Bool) ! if{ 
			@ToggleFuelValve
		}
	</Macro>
		<Macro Name="CloseFuelValve"> 
		(A:GENERAL ENG FUEL VALVE:1, Bool) if{ 
			@ToggleFuelValve
		}
	</Macro>
		<Macro Name="SetToConditionPosCutoff_Sim"> 
		@ConditionPosCutoff16k (&gt;K:THROTTLE1_SET)
		@CloseFuelValve
	</Macro>
		<Macro Name="SetToConditionPosCutoff"> 
		@CanMoveToCutoff if{ 
			(L:LEVER_MAN_OVRD) @ManOverrideTreshhold &gt; if{
				@ConditionPosCutoff (&gt;I:XMLVAR_ThrottlePos_Disconnected_YAxis)
			} els{
				@SetToConditionPosCutoff_Sim
			}
			@SetLimitedToCutoff 
		}
	</Macro>
		<Macro Name="SetToConditionPosIdleLO">
		@CanMoveToIdleLO if{ 
			(L:LEVER_MAN_OVRD) @ManOverrideTreshhold &gt; if{
				@ConditionPosIdleLO (&gt;I:XMLVAR_ThrottlePos_Disconnected_YAxis)
			} els{
				@ConditionPosIdleLO16k (&gt;K:THROTTLE1_SET)
				@OpenFuelValve
			}
			@SetLimitedToIdleLO 
		}
	</Macro>
		<Macro Name="SetToConditionPosIdleHI"> 
		@CanMoveToIdleHI if{ 
			(L:LEVER_MAN_OVRD) @ManOverrideTreshhold &gt; if{
				@ConditionPosIdleHI (&gt;I:XMLVAR_ThrottlePos_Disconnected_YAxis)
			} els{
				@ConditionPosIdleHI16k (&gt;K:THROTTLE1_SET)
			}
			@SetLimitedToIdleHI 
		}
	</Macro>
		<Macro Name="SetToFeathered">
		0 (&gt;O:NeedsToRelease)
			(L:LEVER_MAN_OVRD) @ManOverrideTreshhold &gt; if{
				@PosIsFeathered (&gt;I:XMLVAR_ThrottlePos_Disconnected_XAxis)
				@SetToConditionPosIdleHI 
			} els{
				@PosIsFeathered16k (&gt;K:PROP_PITCH_SET)
				@SetToConditionPosIdleHI 
			}
			@ResetThrottleAnimValue 
	</Macro>
		<Macro Name="SetToUnFeatheredSim"> @PosIsUnFeathered16k (&gt;K:PROP_PITCH_SET) </Macro>
		<Macro Name="SetToUnFeathered">
		0 (&gt;O:NeedsToRelease)
			(L:LEVER_MAN_OVRD) @ManOverrideTreshhold &gt; if{
				@PosIsUnFeathered (&gt;I:XMLVAR_ThrottlePos_Disconnected_XAxis)
				@ThrottleValPropLeverChange (&gt;I:XMLVAR_ThrottlePos_Disconnected_YAxis)
			} els{
				@SetToUnFeatheredSim
				@ThrottleValPropLeverChange16k (&gt;K:THROTTLE1_SET)
			} 
			@ResetThrottleAnimValue 
	</Macro>
		<Macro Name="SetToFeatheredSim"> @PosIsFeathered16k (&gt;K:PROP_PITCH_SET) </Macro>

		<Macro Name="IsOnPos"> - abs 0.1 &lt; </Macro>
		<Macro Name="IsOnConditionCutoffPos"> (A:GENERAL ENG FUEL VALVE:1, Bool) ! </Macro>
		<Macro Name="IsOnConditionIdleLOPos"> (A:GENERAL ENG FUEL VALVE:1, Bool) @ConditionPosIdleHI (L:XMLVAR_ThrottlePos_YAxis) - 1 &gt;= and </Macro>
		<Macro Name="IsOnConditionIdleHIPos"> (A:GENERAL ENG FUEL VALVE:1, Bool) @ConditionPosIdleHI (L:XMLVAR_ThrottlePos_YAxis) - 1 &lt; and </Macro>

		<Macro Name="MoveThrottleDown">
		l0 0 &lt;= if{ @ReverseSpeedFactor (&gt;O:ReverseSpeedFactor) } els{ 1 (&gt;O:ReverseSpeedFactor) }
		
		(L:LEVER_MAN_OVRD) @ManOverrideTreshhold &gt; if{
			(I:XMLVAR_ThrottlePos_Disconnected_YAxis) @ThrottleMovement (O:ReverseSpeedFactor) * - -25 max (&gt;I:XMLVAR_ThrottlePos_Disconnected_YAxis)
		} els{
			l0 @ThrottleMovement16k (O:ReverseSpeedFactor) * - (&gt;K:THROTTLE1_SET)
		}
	</Macro>
		<Macro Name="MoveThrottleUp">
		l0 0 &lt; if{ @ReverseSpeedFactor (&gt;O:ReverseSpeedFactor) } els{ 1 (&gt;O:ReverseSpeedFactor) }
		
		(L:LEVER_MAN_OVRD) @ManOverrideTreshhold &gt; if{
			(I:XMLVAR_ThrottlePos_Disconnected_YAxis) @ThrottleMovement (O:ReverseSpeedFactor) * + 100 min (&gt;I:XMLVAR_ThrottlePos_Disconnected_YAxis)
		} els{
			l0 @ThrottleMovement16k (O:ReverseSpeedFactor) * + (&gt;K:THROTTLE1_SET)
		}
	</Macro>
		<Macro Name="SmoothThrottleMovement">
		l1 (L:XMLVAR_ThrottlePos_YAxis) - abs l2 &lt; if{
			l1 (&gt;L:XMLVAR_ThrottlePos_YAxis)
		} els{
			l1 (L:XMLVAR_ThrottlePos_YAxis) - 0 &lt; if{
				(L:XMLVAR_ThrottlePos_YAxis) l2 - (&gt;L:XMLVAR_ThrottlePos_YAxis)
			} els{ l1 (L:XMLVAR_ThrottlePos_YAxis) - 0 &gt; if{
				(L:XMLVAR_ThrottlePos_YAxis) l2 + (&gt;L:XMLVAR_ThrottlePos_YAxis)
			} }
		}
	</Macro>
		<Macro Name="SmoothPropMovement">
		l0 (L:XMLVAR_ThrottlePos_XAxis) - abs @AutoMoveSpeedProp &lt; if{
			l0 (&gt;L:XMLVAR_ThrottlePos_XAxis)
		} els{
			l0 (L:XMLVAR_ThrottlePos_XAxis) - 0 &lt; if{
				(L:XMLVAR_ThrottlePos_XAxis) @AutoMoveSpeedProp - (&gt;L:XMLVAR_ThrottlePos_XAxis)
				@ConditionPosIdleHI (&gt;L:XMLVAR_ThrottlePos_YAxis)
			} els{ l0 (L:XMLVAR_ThrottlePos_XAxis) - 0 &gt; if{
				(L:XMLVAR_ThrottlePos_XAxis) @AutoMoveSpeedProp + (&gt;L:XMLVAR_ThrottlePos_XAxis)
				@ThrottleValPropLeverChange (&gt;L:XMLVAR_ThrottlePos_YAxis)
			} }
		}
	</Macro>
		<Macro Name="HandleGateDown">
	(O:GateStep) 0 == if{
		1 (&gt;O:GateStep)
	} els{
		(O:GateStep) 2 == if{ @MoveThrottleDown @ResetGate }
	}
	</Macro>

		<!-- ENGINE ##################################### -->

		<Component ID="ENGINE_Overhead">
			<!--
			TODO: Faire un autre event !

			L'event TOGGLE_MASTER_STARTER_SWITCH actuel pose probleme, car il fait trop de choses.
			voir turbine.cpp : set_individual_master_turbine_starter_switch
			pTurbEng->bMasterEngineStarter = bOn;
			pGenEng->m_Starter.SetStarterSwitch(bOn);
			pGenEng->EngCntrls.bFuelValve = bOn;
			pGenEng->EngCntrls.mixture_lever_pos = bOn ? 1.0 : 0.0;
		-->


			<!-- AIRCRAFT ################################### -->

			<!-- Commented, as doors are not to be opened anymore
		<UseTemplate name="ASOBO_AIRCRAFT_Lever_Exit_0_Template">
			<NODE_ID>FRONT_DOOR_HANDLE</NODE_ID>
			<ANIM_NAME>DOOR_FRONT_HANDLE</ANIM_NAME>
			<ANIM_CODE>
					(A:EXIT OPEN:0, Percent) 10 * 2 / 100 min 0 max
			</ANIM_CODE>      			 
			<ANIM_LENGTH>100</ANIM_LENGTH>
			<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.INOP TT:COCKPIT.TOOLTIPS.DOOR_OPEN</ANIMTIP_0>							
			<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.INOP TT:COCKPIT.TOOLTIPS.DOOR_CLOSE</ANIMTIP_1>
		</UseTemplate> -->
			<!-- 
		IRL This needs to be unlocked while using the Handle.
		We cannot do both with a mouse, so instead it can be 
		used as a substitute to the handle
		-->
			<!-- Commented. Doors are not to be opened anymore <UseTemplate Name="ASOBO_AIRCRAFT_Lever_Exit_0_Template">
			<NODE_ID>push_door_unlock</NODE_ID>
			<ANIM_NAME>push_door_unlock</ANIM_NAME>
			<ANIM_CODE>
					(A:EXIT OPEN:0, Percent) 10 * 2 / 100 min 0 max
			</ANIM_CODE>      			 
			<ANIM_LENGTH>100</ANIM_LENGTH>
			<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.INOP TT:COCKPIT.TOOLTIPS.DOOR_OPEN</ANIMTIP_0>							
			<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.INOP TT:COCKPIT.TOOLTIPS.DOOR_CLOSE</ANIMTIP_1>
		</UseTemplate> -->
			<Component ID="AIRCRAFT_FrontDoor">
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>DOOR_FRONT</ANIM_NAME>
					<ANIM_CODE>					
						(A:EXIT OPEN:0, Percent) 20 - 10 * 8 / 100 min 0 max
				</ANIM_CODE>
					<WWISE_EVENT>doorknob_unlock</WWISE_EVENT>
				</UseTemplate>
			</Component>
			<UseTemplate Name="ASOBO_AIRFRAME_Warning_Door_Unlock_Template">
				<TYPE>Front</TYPE>
			</UseTemplate>
			<Component ID="AIRCRAFT_RearDoor" Node="REAR_DOOR">
				<UseTemplate name="ASOBO_GT_Anim_Code">
					<PART_ID>REAR_DOOR</PART_ID>
					<ANIM_NAME>DOOR_REAR</ANIM_NAME>
					<ANIM_CODE>
						(A:EXIT OPEN:0, Percent)
				</ANIM_CODE>
					<ANIM_LENGTH>100</ANIM_LENGTH>
					<WWISE_EVENT>doorknob_unlock</WWISE_EVENT>
				</UseTemplate>
			</Component>
			<UseTemplate Name="ASOBO_AIRFRAME_Warning_Door_Unlock_Template">
				<TYPE>Rear</TYPE>
			</UseTemplate>
			<CameraTitle>Pilot</CameraTitle>
		</Component>

		<!-- FUEL ####################################### -->
		<!--
		Selector operation
		When the system is operated, AUTO SEL CAS message disappears ; the
		sequencer chooses a tank (R or L) and through the actuator, positions the fuel unit
		selector on the selected tank. The sequencer controls the time during which the
		selected tank will operate. This time varies, depending on airplane conditions.
		Airplane on ground : tank is changed every minute and 15 seconds.
		Airplane in flight : tank is changed every five minutes, as long as a fuel low level
		FUEL LOW L or FUEL LOW R CAS message does not appear. When the first
		low level CAS message lights on, the sequencer immediately selects the other tank.
		The selected tank will operate until the second low level CAS message lights on.
		When both low level FUEL LOW L-R CAS messages are visible, the sequencer
		changes tanks every minute and 15 seconds.
	-->
		<Macro Name="Fuel_Tank_Select_Heavier">
		(A:FUEL TANK SELECTOR:1, Enum) 0 != if{
			(A:FUEL LEFT QUANTITY, gallons) (A:FUEL RIGHT QUANTITY, gallons) &gt;
			 if{ (&gt;K:FUEL_SELECTOR_LEFT) }
			els{ (&gt;K:FUEL_SELECTOR_RIGHT) }
		}
		0 (&gt;I:XMLVAR_FuelSelectorAutoTimer)
	</Macro>
		<Component ID="FUEL_Pedestal">
			<Update Frequency="1">
			(A:GENERAL ENG MIXTURE LEVER POSITION:1, Percent over 100) 0.9 &lt; if{ (&gt;K:MIXTURE1_RICH) }
			(A:FUEL TANK SELECTOR:1, Enum) 1 == if{ (&gt;K:FUEL_SELECTOR_RIGHT) }
		</Update>
			<UseTemplate Name="ASOBO_FUEL_Switch_Selector_Template">
				<ANIM_NAME>knob_fuel_tank_selection</ANIM_NAME>
				<NODE_ID>knob_fuel_tank_selection</NODE_ID>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>300</ANIM_LAG>
				<INVERT_ANIM>1</INVERT_ANIM>
				<LEFTARROW>TurnLeft</LEFTARROW>
				<RIGHTARROW>TurnRight</RIGHTARROW>
				<ANIMREF_ID>0</ANIMREF_ID>
				<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
				<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.FUEL_SELECTOR_CLOSE</ANIMTIP_0>
				<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.FUEL_SELECTOR_R_TANK</ANIMTIP_1>
				<ANIMTIP_2>TT:COCKPIT.TOOLTIPS.FUEL_SELECTOR_L_TANK</ANIMTIP_2>


			</UseTemplate>
			<CameraTitle>Pedestal</CameraTitle>
		</Component>
		<Component ID="FUEL_Overhead">

			<!-- Auto selector update -->
			<!--
			TODO: Note: pour le moment j'en ai deduit que en position OFF,
			le selector auto ne devait pas fonctionner.
		-->
			<Update Frequency="1">
			(L:XMLVAR_FuelSelectorAuto) 0 != if{
				(I:XMLVAR_FuelSelectorAutoTimer) 1 + (&gt;I:XMLVAR_FuelSelectorAutoTimer)
				(A:SIM ON GROUND, Bool) 0 != if{ 75 } els{ 300 } (I:XMLVAR_FuelSelectorAutoTimer) &lt;= if{ @Fuel_Tank_Select_Heavier }
			}
		</Update>

			<UseTemplate Name="ASOBO_FUEL_Switch_Pump_Template">
				<SWITCH_TYPE>OFF_AUTO_ON</SWITCH_TYPE>
				<VARIANT_TYPE>OFF_ON_AUTO</VARIANT_TYPE>
				<PART_ID>FUEL_Switch_AUXBP</PART_ID>
				<NODE_ID>FUEL_Switch_AUXBP</NODE_ID>
				<ANIM_NAME>FUEL_Switch_AUXBP</ANIM_NAME>
				<SWITCH_POSITION_TYPE>L</SWITCH_POSITION_TYPE>
				<SWITCH_POSITION_VAR>XMLVAR_BoostFuelPump</SWITCH_POSITION_VAR>
				<ANIMTIP_0_3STATES>TT:COCKPIT.TOOLTIPS.AUXBP_SET_AUTO</ANIMTIP_0_3STATES>
				<ANIMTIP_1_3STATES>TT:COCKPIT.TOOLTIPS.AUXBP_TURN_ON</ANIMTIP_1_3STATES>
				<ANIMTIP_2_3STATES>TT:COCKPIT.TOOLTIPS.AUXBP_TURN_OFF</ANIMTIP_2_3STATES>
			</UseTemplate>

			<Component ID="FUEL_Push_Small" Node="fuel_push_small">
				<!-- Switch fuel tank to the heavier -->
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<PART_ID>FUEL_Push_Small</PART_ID>
					<ANIM_NAME>fuel_push_small</ANIM_NAME>
					<LEFT_SINGLE_CODE>
					(A:FUEL TANK SELECTOR:1, Enum) 2 == if{
						(&gt;K:FUEL_SELECTOR_RIGHT)
					} els{
						(&gt;K:FUEL_SELECTOR_LEFT)
					}
					0 (&gt;I:XMLVAR_FuelSelectorAutoTimer)
				</LEFT_SINGLE_CODE>
					<SWITCH_POSITION_TYPE>L</SWITCH_POSITION_TYPE>
					<SWITCH_POSITION_VAR>_FuelTankShiftPressed</SWITCH_POSITION_VAR>
					<TOOLTIPID>TT:COCKPIT.TOOLTIPS.SHIFTFUELTANK_SELECTED</TOOLTIPID>
					<WWISE_EVENT_1>fuel_push_button_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>fuel_push_button_off</WWISE_EVENT_2>
				</UseTemplate>
			</Component>

			<Component ID="FUEL_Switch_Selector" Node="fuel_push_fuelsel">
				<!-- Fuel tank selection manually or auto -->
				<!-- TODO voir simvar FUEL SELECTED TRANSFER MODE -->
				<UseTemplate Name="ASOBO_GT_Switch_Code">
					<PART_ID>FUEL_Switch_Selector</PART_ID>
					<ANIM_NAME>fuel_push_fuelsel</ANIM_NAME>
					<ANIM_LENGTH>100</ANIM_LENGTH>
					<!-- anim frames 0 MANUAL, 1 AUTO -->
					<ANIM_CODE>(L:XMLVAR_FuelSelectorAuto) 0 == if{ 0 } els{ 100 }</ANIM_CODE>
					<LEFT_SINGLE_CODE>(L:XMLVAR_FuelSelectorAuto) ! (&gt;L:XMLVAR_FuelSelectorAuto)</LEFT_SINGLE_CODE>
					<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.FUELSELECTOR_SET_AUTO</ANIMTIP_0>
					<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.FUELSELECTOR_SET_MANUAL</ANIMTIP_1>
					<WWISE_EVENT_1>fuel_fuelsel_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>fuel_fuelsel_switch_off</WWISE_EVENT_2>
				</UseTemplate>
			</Component>

			<CameraTitle>Overhead</CameraTitle>
		</Component>

		<!-- LIGHTING ################################### -->

		<Component ID="LIGHTING_Lights">
			<UseTemplate Name="ASOBO_LIGHTING_Switch_Light_Wing_Template">
				<ANIM_NAME>DEICESYSTEM_SWITCH_LIGHT_WING</ANIM_NAME>
				<PART_ID>DEICE_Switch_Light</PART_ID>
				<NODE_ID>DEICESYSTEM_SWITCH_LIGHT_WING</NODE_ID>
				<ANIMREF_ID>0</ANIMREF_ID>
				<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.PANEL_DEICE_ICE_LIGHT_OFF</ANIMTIP_0>
				<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.PANEL_DEICE_ICE_LIGHT_ON</ANIMTIP_1>


			</UseTemplate>
			<CameraTitle>PFD</CameraTitle>
		</Component>


		<!-- ELECTRICAL ##############  MARWAN  ################### -->


		<!-- AUTOPILOT ################################## -->
		<Component ID="AUTOPILOT">
			<DefaultTemplateParameters>
				<DONT_APPEND_ID>True</DONT_APPEND_ID>
			</DefaultTemplateParameters>

			<!-- BARO - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<UseTemplate Name="ASOBO_AUTOPILOT_Knob_Baro_Template">
				<NODE_ID>KNOB_BARO_STD_1</NODE_ID>
				<ANIM_NAME_KNOB>KNOB_BARO_STD_1</ANIM_NAME_KNOB>
				<ANIM_NAME_PUSH>KNOB_BARO_STD_1_PUSH</ANIM_NAME_PUSH>
				<ID>1</ID>
				<PUSH />

				<ANIMREF_ID>-1</ANIMREF_ID>
				<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.AUTOPILOT_PANEL_BARO_KNOB_INCREASE</ANIMTIP_0>
				<ANIMTIP_0_ON_CURSOR>TurnRight</ANIMTIP_0_ON_CURSOR>
				<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.AUTOPILOT_PANEL_BARO_KNOB_DECREASE</ANIMTIP_1>
				<ANIMTIP_1_ON_CURSOR>TurnLeft</ANIMTIP_1_ON_CURSOR>
				<ANIMTIP_3>TT:COCKPIT.TOOLTIPS.AUTOPILOT_PANEL_BARO_KNOB_PUSH</ANIMTIP_3>
				<ANIMTIP_3_ON_CURSOR>Hand</ANIMTIP_3_ON_CURSOR>

			</UseTemplate>

			<UseTemplate Name="ASOBO_AUTOPILOT_Knob_Baro_Template">
				<NODE_ID>KNOB_BARO_STD_2</NODE_ID>
				<ANIM_NAME_KNOB>KNOB_BARO_STD_2</ANIM_NAME_KNOB>
				<ANIM_NAME_PUSH>KNOB_BARO_STD_2_PUSH</ANIM_NAME_PUSH>
				<ID>2</ID>
				<PUSH />
				<BARO_ID>1</BARO_ID>

				<ANIMREF_ID>-1</ANIMREF_ID>
				<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.AUTOPILOT_PANEL_BARO_KNOB_INCREASE</ANIMTIP_0>
				<ANIMTIP_0_ON_CURSOR>TurnRight</ANIMTIP_0_ON_CURSOR>
				<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.AUTOPILOT_PANEL_BARO_KNOB_DECREASE</ANIMTIP_1>
				<ANIMTIP_1_ON_CURSOR>TurnLeft</ANIMTIP_1_ON_CURSOR>
				<ANIMTIP_3>TT:COCKPIT.TOOLTIPS.AUTOPILOT_PANEL_BARO_KNOB_PUSH</ANIMTIP_3>
				<ANIMTIP_3_ON_CURSOR>Hand</ANIMTIP_3_ON_CURSOR>

			</UseTemplate>

			<UseTemplate Name="ASOBO_AUTOPILOT_Knob_Baro_Template">
				<NODE_ID>knob_STBY_panel</NODE_ID>
				<ANIM_NAME>KNOB_stby_panel</ANIM_NAME>
				<ID>3</ID>
				<BARO_ID>2</BARO_ID>

				<ANIMREF_ID>-1</ANIMREF_ID>
				<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.STBY_TUNING_KNOB_INCREASE</ANIMTIP_0>
				<ANIMTIP_0_ON_CURSOR>TurnRight</ANIMTIP_0_ON_CURSOR>
				<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.STBY_TUNING_KNOB_DECREASE</ANIMTIP_1>
				<ANIMTIP_1_ON_CURSOR>TurnLeft</ANIMTIP_1_ON_CURSOR>

			</UseTemplate>

			<!-- ENGAGE/DISENGAGE - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<UseTemplate Name="ASOBO_AUTOPILOT_Push_Autopilot_Template">
				<ANIM_NAME>PUSH_AUTOPILOT_AP</ANIM_NAME>
				<NODE_ID>push_autopilot_ap</NODE_ID>
				<TOOLTIPID>%((A:AUTOPILOT MASTER, bool))%{if}TT:COCKPIT.TOOLTIPS.AUTOPILOT_PANEL_AP_ON%{else}TT:COCKPIT.TOOLTIPS.AUTOPILOT_PANEL_AP_OFF%{end}</TOOLTIPID>
			</UseTemplate>

			<!-- HEADING - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<!-- 		<UseTemplate Name="ASOBO_AUTOPILOT_Push_Heading_Template">
		<IS_USING_L_VAR_FOR_STATE>true</IS_USING_L_VAR_FOR_STATE>
			<ANIM_NAME>push_autopilot_hdg</ANIM_NAME>
			<NODE_ID>push_autopilot_hdg</NODE_ID>
			<TOOLTIPID>%((A:AUTOPILOT HEADING LOCK, BOOL))%{if}TT:COCKPIT.TOOLTIPS.AUTOPILOT_PANEL_HDG_BUTTON_ON%{else}TT:COCKPIT.TOOLTIPS.AUTOPILOT_PANEL_HDG_BUTTON_OFF%{end}</TOOLTIPID>
		</UseTemplate> -->

			<Component ID="push_autopilot_hdg" Node="push_autopilot_hdg">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>push_autopilot_hdg</NODE_ID>
					<ANIM_NAME>push_autopilot_hdg</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(&gt;K:AP_HDG_HOLD)
				</LEFT_SINGLE_CODE>
					<TOOLTIPID>HDG</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
				</UseTemplate>
			</Component>

			<UseTemplate Name="ASOBO_AUTOPILOT_Knob_Heading_Template">
				<ANIM_NAME_KNOB>knob_autopilot_hdg</ANIM_NAME_KNOB>
				<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.AUTOPILOT_PANEL_HDG_TUNING_LEFT</ANIMTIP_0>
				<ANIMTIP_0_ON_CURSOR>TurnLeft</ANIMTIP_0_ON_CURSOR>
				<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.AUTOPILOT_PANEL_HDG_TUNING_RIGHT</ANIMTIP_1>
				<ANIMTIP_1_ON_CURSOR>TurnRight</ANIMTIP_1_ON_CURSOR>
				<ANIM_NAME_PUSH>knob_autopilot_hdg_push</ANIM_NAME_PUSH>
				<NODE_ID>knob_autopilot_hdg</NODE_ID>
				<ANIMTIP_3>TT:COCKPIT.TOOLTIPS.AUTOPILOT_PANEL_HDG_PUSH</ANIMTIP_3>
				<ANIMTIP_3_ON_CURSOR>Hand</ANIMTIP_3_ON_CURSOR>


				<PUSH />
			</UseTemplate>

			<!-- BANK - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<!-- 
			TBM Automatically switches to low bank angle when above 25k ft
			And back to high bank angle when below 25ft
			-->
			<Update Frequency="1">
				(A:INDICATED ALTITUDE, feet) 25000 &gt;
				(O:LastAltitude) 25000 &gt; != 
				(A:INDICATED ALTITUDE, feet) 25000 &lt;
				(A:AUTOPILOT MAX BANK, degrees) 30 - abs 0.1 &lt; != and
				if{
					(&gt;K:AP_MAX_BANK_INC)
				}
				(A:INDICATED ALTITUDE, feet) (&gt;O:LastAltitude)
		</Update>
			<UseTemplate Name="ASOBO_AUTOPILOT_Push_Bank_Template">
				<ANIM_NAME>push_autopilot_bank</ANIM_NAME>
				<NODE_ID>push_autopilot_bank</NODE_ID>
				<VAR_NAME>XMLVAR_LTS_Test</VAR_NAME>
				<REVERSE_ACTIVE_CONDITION>True</REVERSE_ACTIVE_CONDITION>
				<TOOLTIPID>%((A:AUTOPILOT MAX BANK, degrees) 26 &gt;=)%{if}TT:COCKPIT.TOOLTIPS.AUTOPILOT_PANEL_BANK_OFF%{else}TT:COCKPIT.TOOLTIPS.AUTOPILOT_PANEL_BANK_ON%{end}</TOOLTIPID>
			</UseTemplate>


			<!-- BACKCOURSE - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<UseTemplate Name="ASOBO_AUTOPILOT_Push_BackCourse_Template">
				<ANIM_NAME>push_autopilot_bc</ANIM_NAME>
				<NODE_ID>push_autopilot_bc</NODE_ID>
				<TOOLTIPID>%((A:AUTOPILOT BACKCOURSE HOLD, bool))%{if}TT:COCKPIT.TOOLTIPS.AUTOPILOT_PANEL_BC_ON%{else}TT:COCKPIT.TOOLTIPS.AUTOPILOT_PANEL_BC_OFF%{end}</TOOLTIPID>
			</UseTemplate>


			<!-- YAW DAMPER - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<UseTemplate Name="ASOBO_AUTOPILOT_Push_YawDamper_Template">
				<ANIM_NAME>push_autopilot_yd</ANIM_NAME>
				<NODE_ID>push_autopilot_yd</NODE_ID>
			</UseTemplate>

			<!-- ALTITUDE - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<!-- 		<UseTemplate Name="ASOBO_AUTOPILOT_Push_Altitude_Template">
			<ANIM_NAME>push_autopilot_alt</ANIM_NAME>
			<SET_STATE_EXTERNAL>(&gt;K:AP_ALT_HOLD) 0 (&gt;L:XMLVAR_VNAVButtonValue,bool)</SET_STATE_EXTERNAL>
			<NODE_ID>push_autopilot_alt</NODE_ID>
		</UseTemplate> -->

			<Component ID="push_autopilot_alt" Node="push_autopilot_alt">

				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>push_autopilot_alt</NODE_ID>
					<ANIM_NAME>push_autopilot_alt</ANIM_NAME>
					<LEFT_SINGLE_CODE>
									(&gt;K:AP_ALT_HOLD)
						</LEFT_SINGLE_CODE>
					<TOOLTIPID>ALT HOLD</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
				</UseTemplate>
			</Component>

			<!-- 		<Component ID="knob_autopilot_altsel" Node="knob_autopilot_altsel"> 

			<UseTemplate Name="ASOBO_AUTOPILOT_Knob_Template">
				<ANIM_NAME>knob_autopilot_altsel</ANIM_NAME>
				<NODE_ID>knob_autopilot_altsel</NODE_ID>
				<INCREMENT>100</INCREMENT>
				<HEADING_INDEX>0</HEADING_INDEX>
				<KNOB_ID>Altitude</KNOB_ID>	
				<SET_STATE>
				1 -1 p0 0 &gt; ? sp0 
				0 (A:AUTOPILOT ALTITUDE LOCK VAR:0, feet) 100 l0 * + (&gt;L:HJET_AP_ALT_VAR,number)
				p0 0 &gt; if{ (&gt;H:AP_KNOB_Up) } els{ (&gt;H:AP_KNOB_Down) }
				</SET_STATE>
				<KNOB_ID>Altitude</KNOB_ID>
<INC_CODE>p0 (&gt;L:HJET_AP_ALT_VAR,number)</INC_CODE>	
<DEC_CODE>p0 -1 * (&gt;L:HJET_AP_ALT_VAR,number)</DEC_CODE>				
				<BINDING_INC_0>Inc_Event</BINDING_INC_0>
				<BINDING_INC_0_PARAM_0>1</BINDING_INC_0_PARAM_0>
				<BINDING_INC_0_EVENT_ID>AP_ALT_VAR_INC</BINDING_INC_0_EVENT_ID>	
				<BINDING_INC_0_EVENT_ID_ONLY>True</BINDING_INC_0_EVENT_ID_ONLY>	
				<BINDING_DEC_0>Dec_Event</BINDING_DEC_0>
				<BINDING_DEC_0_PARAM_0>1</BINDING_DEC_0_PARAM_0>
				<BINDING_DEC_0_EVENT_ID>AP_ALT_VAR_DEC</BINDING_DEC_0_EVENT_ID>	
				<BINDING_DEC_0_EVENT_ID_ONLY>True</BINDING_DEC_0_EVENT_ID_ONLY>	
				<TT_DESCRIPTION_ID>@TT_Package.AUTOPILOT_KNOB_ALTITUDESELECTED_ACTION_ADJUST</TT_DESCRIPTION_ID>
				<TOOLTIP_TITLE>@TT_Package.AUTOPILOT_KNOB_ALTITUDESELECTED_TITLE</TOOLTIP_TITLE>
				<GET_TT_VALUE_STATE>(A:AUTOPILOT ALTITUDE LOCK VAR:0, feet) sp0</GET_TT_VALUE_STATE>
				<FORMAT_VALUE>l0 '%d ft' @sprintf</FORMAT_VALUE>

			</UseTemplate>
		</Component> -->
		<!-- <UseTemplate Name="ASOBO_AUTOPILOT_Knob_Altitude_Template">
			<INCREMENT>100</INCREMENT>
			<NODE_ID>knob_autopilot_altsel</NODE_ID>
			<ANIM_NAME>knob_autopilot_altsel</ANIM_NAME>
		</UseTemplate> -->

		<UseTemplate Name="WT_G3000_Knob_Altitude_Template">
			<ANIM_NAME>knob_autopilot_altsel</ANIM_NAME>
			<NODE_ID>knob_autopilot_altsel</NODE_ID>
			<INCREMENT>100</INCREMENT>
		  </UseTemplate>

			<!-- <UseTemplate Name="ASOBO_AUTOPILOT_Knob_Altitude_Template">
				<ANIM_NAME>knob_autopilot_altsel</ANIM_NAME>
				<NODE_ID>knob_autopilot_altsel</NODE_ID>
				<INCREMENT>100</INCREMENT>
				<HEADING_INDEX>0</HEADING_INDEX>
				<SET_CODE>
			1 -1 p0 0 &gt; ? sp0 
			0 (L:HJET_AP_ALT_VAR,number) 100 l0 * + (&gt;L:HJET_AP_ALT_VAR,number)
			p0 0 &gt; if{ (&gt;H:AP_KNOB_Up) } els{ (&gt;H:AP_KNOB_Down) }
			(O:_KnobAnimVar) 10 p0 * + dnor (>O:_KnobAnimVar)
			</SET_CODE>
				<SET_STATE>
			1 -1 p0 0 &gt; ? sp0 
			0 (L:HJET_AP_ALT_VAR,number) 100 l0 * + (&gt;L:HJET_AP_ALT_VAR,number)
			p0 0 &gt; if{ (&gt;H:AP_KNOB_Up) } els{ (&gt;H:AP_KNOB_Down) }
			</SET_STATE>
				<ON_STATE_CHANGED>
			1 -1 p0 0 &gt; ? sp0 
			0 (L:HJET_AP_ALT_VAR,number) 100 l0 * + (&gt;L:HJET_AP_ALT_VAR,number)
			p0 0 &gt; if{ (&gt;H:AP_KNOB_Up) } els{ (&gt;H:AP_KNOB_Down) }
			(O:_KnobAnimVar) 10 p0 * + dnor (>O:_KnobAnimVar)
			</ON_STATE_CHANGED>
				<INC_CODE>p0 (>B:AUTOPILOT_Altitude_100_set)</INC_CODE>
				<DEC_CODE>p0 -1 * (>B:AUTOPILOT_Altitude_100_set)</DEC_CODE>

			</UseTemplate> -->

			<!-- FLIGHT LEVEL CHANGE - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<!-- 		<UseTemplate Name="ASOBO_AUTOPILOT_Push_FlightLevelChange_Template">
			<ANIM_NAME>push_autopilot_flc</ANIM_NAME>
			<NODE_ID>push_autopilot_flc</NODE_ID>
			
		</UseTemplate> -->

			<Component ID="push_autopilot_flc" Node="push_autopilot_flc">

				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>push_autopilot_flc</NODE_ID>
					<ANIM_NAME>push_autopilot_flc</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(&gt;K:FLIGHT_LEVEL_CHANGE)
						</LEFT_SINGLE_CODE>
					<TOOLTIPID>FLC</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
				</UseTemplate>
			</Component>

			<!-- VERTICAL SPEED - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<!-- 		<UseTemplate Name="ASOBO_AUTOPILOT_Push_VerticalSpeed_Template">
			<ANIM_NAME>push_autopilot_vs</ANIM_NAME>
			<NODE_ID>push_autopilot_vs</NODE_ID>
		</UseTemplate>
		 -->
			<Component ID="push_autopilot_vs" Node="push_autopilot_vs">

				<UseTemplate Name="ASOBO_GT_Push_Button">
					<NODE_ID>push_autopilot_vs</NODE_ID>
					<ANIM_NAME>push_autopilot_vs</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(&gt;K:AP_VS_HOLD)
						</LEFT_SINGLE_CODE>
					<TOOLTIPID>VS</TOOLTIPID>
					<WWISE_EVENT_1>battery_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>battery_switch_off</WWISE_EVENT_2>
				</UseTemplate>
			</Component>


			<UseTemplate Name="ASOBO_AUTOPILOT_Knob_VerticalSpeed_Template">
				<HITBOX_UP_NODE_ID>hitbox_wheel_autopilot_vs_DN</HITBOX_UP_NODE_ID>
				<HITBOX_DOWN_NODE_ID>hitbox_wheel_autopilot_vs_UP</HITBOX_DOWN_NODE_ID>
				<ANIM_NAME>wheel_autopilot_vs</ANIM_NAME>
				<NODE_ID>wheel_autopilot_vs</NODE_ID>
				<UP_DEC_DN_INC>True</UP_DEC_DN_INC>
				<SET_AIRSPEED_ON_FLC>True</SET_AIRSPEED_ON_FLC>
			</UseTemplate>


			<!-- SPEED - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<UseTemplate Name="ASOBO_AUTOPILOT_Push_SpeedToggle_Template">
				<ANIM_NAME>push_autopilot_spd</ANIM_NAME>
				<NODE_ID>push_autopilot_spd</NODE_ID>
			</UseTemplate>

			<!-- Wing Leveler - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<UseTemplate Name="ASOBO_AUTOPILOT_Push_Level_Template">
				<ANIM_NAME>push_autopilot_LVL</ANIM_NAME>
				<NODE_ID>push_autopilot_LVL</NODE_ID>
				<ACTIVE_NODE_ID>push_autopilot_LVL_Text</ACTIVE_NODE_ID>
				<NO_TEXT_EMISSIVE>True</NO_TEXT_EMISSIVE>
			</UseTemplate>

			<!-- AP Transfer - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<UseTemplate Name="ASOBO_AUTOPILOT_Push_Transfer_Template">
				<NODE_ID>push_autopilot_XFR</NODE_ID>
				<ANIM_NAME>push_autopilot_XFR</ANIM_NAME>
			</UseTemplate>

			<UseTemplate Name="ASOBO_AUTOPILOT_Push_Transfer_Light_Template">
				<NODE_ID>push_XFR_light_l</NODE_ID>
				<EMISSIVE_CODE>(L:XMLVAR_PushXFR) !</EMISSIVE_CODE>
				<!-- <LIGHT_ID>l</LIGHT_ID> uncomment when the NODE_ID has been updated to AUTOPILOT_Push_Transfer_Light_ -->
			</UseTemplate>

			<UseTemplate Name="ASOBO_AUTOPILOT_Push_Transfer_Light_Template">
				<NODE_ID>push_XFR_light_r</NODE_ID>
				<EMISSIVE_CODE>(L:XMLVAR_PushXFR)</EMISSIVE_CODE>
				<!-- <LIGHT_ID>r</LIGHT_ID> uncomment when the NODE_ID has been updated to AUTOPILOT_Push_Transfer_Light_ -->
			</UseTemplate>

			<!-- COURSE - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->


			<CameraTitle>AutoPilot</CameraTitle>
		</Component>

		<!-- DEICE_SYSTEM ############################### -->
		<Component ID="DEICE_SYSTEM">
			<UseTemplate Name="ASOBO_DEICE_Switch_Airframe_Template">
				<ANIM_NAME>DEICESYSTEM_SWITCH_AIRFRAME</ANIM_NAME>
				<ANIM_EVENT_EFFECT_NAME>CAM_DEICESYSTEM_SWITCH_AIRFRAME</ANIM_EVENT_EFFECT_NAME>
				<NODE_ID>DEICESYSTEM_SWITCH_AIRFRAME</NODE_ID>
				<NORMALIZED_TIME>0.1</NORMALIZED_TIME>
			</UseTemplate>

			<UseTemplate Name="ASOBO_DEICE_Switch_Propeller_Template">
				<ANIM_NAME>DEICESYSTEM_SWITCH_PROP</ANIM_NAME>
				<NODE_ID>DEICESYSTEM_SWITCH_PROP</NODE_ID>
			</UseTemplate>

			<UseTemplate Name="ASOBO_DEICE_Switch_Windshield_Template">
				<ANIM_NAME>DEICESYSTEM_SWITCH_WINDSHIELD</ANIM_NAME>
				<NODE_ID>DEICESYSTEM_SWITCH_WINDSHIELD</NODE_ID>
				<VAR_SCOPE>L</VAR_SCOPE>
			</UseTemplate>

			<!-- Only one pitot in FSX but pitot should have indexes -->
			<UseTemplate Name="ASOBO_DEICE_Switch_Pitot_Template">
				<NUM_PITOTS>2</NUM_PITOTS>
				<NODE_ID_LEFT_PITOT>DEICESYSTEM_SWITCH_PITOT_L</NODE_ID_LEFT_PITOT>
				<NODE_ID_RIGHT_PITOT>DEICESYSTEM_SWITCH_PITOT_R</NODE_ID_RIGHT_PITOT>
				<ANIM_NAME_LEFT_PITOT>DEICESYSTEM_SWITCH_PITOT_L</ANIM_NAME_LEFT_PITOT>
				<ANIM_NAME_RIGHT_PITOT>DEICESYSTEM_SWITCH_PITOT_R</ANIM_NAME_RIGHT_PITOT>
			</UseTemplate>
			<UseTemplate Name="ASOBO_DEICE_Switch_InertSep_Template">
				<NODE_ID>deicesystem_switch_inertsep</NODE_ID>
				<ANIM_NAME>deicesystem_switch_inertsep</ANIM_NAME>
			</UseTemplate>
			<!-- DEICE Lights -->
			<!-- 
			This update is used to create a pattern in the lights of the DeIce Airframe left and right wings : 
			1. 1 sec nothing
			2. 2 sec Left Light
			3. 1 sec nothing
			4. 2 sec Right Light
			5. Back to step 1
		-->
			<Update Frequency="1">
			(A:STRUCTURAL DEICE SWITCH, Bool) if{
				(I:XMLVAR_DeiceAirframeOperationStep) ++ 67 % (&gt;I:XMLVAR_DeiceAirframeOperationStep) 
				(I:XMLVAR_DeiceAirframeOperationStep) 0 &gt;= 
				(I:XMLVAR_DeiceAirframeOperationStep) 2 &lt;= and if{
					1 (&gt;L:XMLVAR_IsDeiceAirFrame)
					0 (&gt;L:XMLVAR_IsDeiceAirFrame2)
				} els{
					0 (&gt;L:XMLVAR_IsDeiceAirFrame)
					(I:XMLVAR_DeiceAirframeOperationStep) 5 &gt; 
					(I:XMLVAR_DeiceAirframeOperationStep) 7 &lt;= and if{
						1 (&gt;L:XMLVAR_IsDeiceAirFrame2)
					} els{
						0 (&gt;L:XMLVAR_IsDeiceAirFrame2)
					}
				}
			} els{
				0 (&gt;I:XMLVAR_DeiceAirframeOperationStep) 
				0 (&gt;L:XMLVAR_IsDeiceAirFrame)
				0 (&gt;L:XMLVAR_IsDeiceAirFrame2)
			}
		</Update>
			<UseTemplate Name="ASOBO_DEICE_Switch_Light_Template">
				<ID>1</ID>
				<NODE_ID>DEICESYSTEM_SWITCH_AIRFRAME_light01</NODE_ID>
				<TARGET_ID>Airframe</TARGET_ID>
				<EMISSIVE_CODE>
				(L:XMLVAR_IsDeiceAirFrame) 
			</EMISSIVE_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_DEICE_Switch_Light_Template">
				<ID>2</ID>
				<NODE_ID>DEICESYSTEM_SWITCH_AIRFRAME_light02</NODE_ID>
				<TARGET_ID>Airframe</TARGET_ID>
				<EMISSIVE_CODE>
				(L:XMLVAR_IsDeiceAirframe2) 
			</EMISSIVE_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_DEICE_Switch_Light_Template">
				<ID>1</ID>
				<NODE_ID>DEICESYSTEM_SWITCH_WINDSHIELD_light01</NODE_ID>
				<TARGET_ID>Windshield</TARGET_ID>
				<EMISSIVE_CODE>
				(A:WINDSHIELD DEICE SWITCH, Bool)
			</EMISSIVE_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_DEICE_Switch_Light_Template">
				<ID>2</ID>
				<NODE_ID>DEICESYSTEM_SWITCH_WINDSHIELD_light02</NODE_ID>
				<TARGET_ID>Windshield</TARGET_ID>
				<EMISSIVE_CODE>
				(A:WINDSHIELD DEICE SWITCH, Bool)
			</EMISSIVE_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_DEICE_Switch_Light_Template">
				<NODE_ID>DEICESYSTEM_SWITCH_PROP_light</NODE_ID>
				<TARGET_ID>Propeller</TARGET_ID>
				<EMISSIVE_CODE>
				(A:PROP DEICE SWITCH:1, Bool)
			</EMISSIVE_CODE>
			</UseTemplate>
			<!-- ######### -->

			<!-- Is actually a switch for the light of the circuit breakers -->
			<UseTemplate Name="ASOBO_GT_Switch_Dummy">
				<NODE_ID>SWITCH_LIGHT_CABIN</NODE_ID>
				<ANIM_NAME>SWITCH_LIGHT_CABIN</ANIM_NAME>
				<WWISE_EVENT_1>light_cabin_switch_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>light_cabin_switch_off</WWISE_EVENT_2>
				<ANIMREF_ID>0</ANIMREF_ID>
				<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.CIRCUIT_BREAKER_LIGHT_SWITCH_ON</ANIMTIP_1>
				<ANIMTIP_1_ON_PERCENT>1</ANIMTIP_1_ON_PERCENT>
				<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.CIRCUIT_BREAKER_LIGHT_SWITCH_OFF</ANIMTIP_0>
				<ANIMTIP_0_ON_PERCENT>0</ANIMTIP_0_ON_PERCENT>
				<SWITCH_POSITION_TYPE>I</SWITCH_POSITION_TYPE>
				<SWITCH_POSITION_VAR>XMLVAR_CircuitBreaker_Light_ON</SWITCH_POSITION_VAR>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Component_Emissive_Gauge">
				<NODE_ID>LIGHTING_Panel_Emissive</NODE_ID>
				<EMISSIVE_CODE>(I:XMLVAR_CircuitBreaker_Light_ON)</EMISSIVE_CODE>
			</UseTemplate>
			<CameraTitle>PFD</CameraTitle>
		</Component>

		<!-- AS3000 ######################################-->
		<Component ID="AS3000_MFD">
			<UseTemplate Name="ASOBO_AS3000_MFD">
				<DONT_APPEND_ID>True</DONT_APPEND_ID>
				<USE_STATIC_SCREEN_EMISSIVE />
				<SCREEN_NODE_ID>AS1000_MFD</SCREEN_NODE_ID>
			</UseTemplate>
			<CameraTitle>MFD</CameraTitle>
		</Component>

		<Component ID="AS3000_PFD">
			<DefaultTemplateParameters>
				<DONT_APPEND_ID>True</DONT_APPEND_ID>
			</DefaultTemplateParameters>

			<UseTemplate Name="ASOBO_AS3000_PFD">
				<ID>1</ID>
				<KEY_PREFIX>AS3000_PFD_1</KEY_PREFIX>
				<USE_STATIC_SCREEN_EMISSIVE />
				<SCREEN_NODE_ID>AS1000_PFD_1</SCREEN_NODE_ID>
			</UseTemplate>
			<UseTemplate Name="ASOBO_AS3000_PFD">
				<ID>2</ID>
				<USE_STATIC_SCREEN_EMISSIVE />
				<SCREEN_NODE_ID>AS1000_PFD_2</SCREEN_NODE_ID>
			</UseTemplate>
			<CameraTitle>PFD</CameraTitle>
		</Component>

		<Component ID="AS3000_TSC">
			<UseTemplate Name="ASOBO_AS3000_TSC">
				<USE_STATIC_SCREEN_EMISSIVE />
				<ID>1</ID>
			</UseTemplate>
			<UseTemplate Name="ASOBO_AS3000_TSC">
				<USE_STATIC_SCREEN_EMISSIVE />
				<ID>2</ID>
			</UseTemplate>
			<CameraTitle>MFD</CameraTitle>
		</Component>

		<Component ID="AS1000_PFD_1_Emissive" Node="AS1000_PFD_1">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.5 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) *</EMISSIVE_CODE>
			</UseTemplate>

		</Component>

		<Component ID="EADI_Emissive" Node="EADI">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.5 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) *</EMISSIVE_CODE>
			</UseTemplate>

		</Component>
		<Component ID="AS1000_PFD_2_Emissive" Node="AS1000_PFD_2">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.5 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) *</EMISSIVE_CODE>
			</UseTemplate>

		</Component>
		<Component ID="AS1000_MFD_Emissive" Node="AS1000_MFD">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.5 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) *</EMISSIVE_CODE>
			</UseTemplate>

		</Component>

		<Component ID="cover2_Emissive" Node="cover2">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.5 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<Component ID="cover1_Emissive" Node="cover1">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>0.5 (L:AS3000_Brightness, number) * (L:XMLVAR_AS3000_DisplayLighting) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<!-- AS580 #####################################-->
		<Component ID="AS580">
			<DefaultTemplateParameters>
				<DONT_APPEND_ID>True</DONT_APPEND_ID>
			</DefaultTemplateParameters>

			<UseTemplate Name="ASOBO_AS580" />
			<CameraTitle>MFD</CameraTitle>
		</Component>

		<!-- GLASS_COCKPIT ##############################-->
		<Component ID="GLASS_COCKPIT">
			<Component ID="GLASS_COCKPIT_Screen_Attitude_Text" Node="AttitudeDisplay">
				<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
					<EMISSIVE_CODE>0.5</EMISSIVE_CODE>
				</UseTemplate>
			</Component>

			<Component ID="GLASS_COCKPIT_Screen_Speed_Text" Node="SpeedDisplay">
				<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
					<EMISSIVE_CODE>0.5</EMISSIVE_CODE>
				</UseTemplate>
			</Component>
		</Component>

		<!-- SAFETY #####################################-->
		<Component ID="SAFETY">
			<UseTemplate Name="ASOBO_SAFETY_Push_Warning_Template">
				<VAR_SCOPE>L</VAR_SCOPE>
				<VAR_NAME>XMLVAR_LTS_Test</VAR_NAME>
				<NODE_ID>Master_warning_push</NODE_ID>
				<ANIM_NAME>master_push_warning</ANIM_NAME>
			</UseTemplate>

			<UseTemplate Name="ASOBO_SAFETY_Push_Caution_Template">
				<VAR_SCOPE>L</VAR_SCOPE>
				<VAR_NAME>XMLVAR_LTS_Test</VAR_NAME>
				<NODE_ID>Master_caution_push</NODE_ID>
				<ANIM_NAME>master_push_caution</ANIM_NAME>
			</UseTemplate>

			<UseTemplate Name="ASOBO_SAFETY_Push_Test_Template">
				<ANIM_NAME>DEICESYSTEM_LTS_TEST</ANIM_NAME>
				<NODE_ID>DEICESYSTEM_LTS_TEST</NODE_ID>
			</UseTemplate>

			<CameraTitle>PFD</CameraTitle>
		</Component>

		<Component ID="AC">
			<!-- Those are all dummy buttons for now -->
			<!-- 
		<Component ID="DISPLAYBACKUP_PUSH_L" Node="DISPLAYBACKUP_PUSH_L">
			<UseTemplate Name="ASOBO_GT_Push_Button">
				<PART_ID>DISPLAYBACKUP_PUSH_L</PART_ID>
				<ANIM_NAME>DISPLAYBACKUP_PUSH_L</ANIM_NAME>
				<LEFT_SINGLE_CODE>0</LEFT_SINGLE_CODE>
				<TOOLTIPID>TT:COCKPIT.TOOLTIPS.DISPLAY_BACKUP_BUTTON_ON</TOOLTIPID>
				
			</UseTemplate>
		</Component>
		
		<Component ID="DISPLAYBACKUP_PUSH_R" Node="DISPLAYBACKUP_PUSH_R">
			<UseTemplate Name="ASOBO_GT_Push_Button">
				<PART_ID>DISPLAYBACKUP_PUSH_R</PART_ID>
				<ANIM_NAME>DISPLAYBACKUP_PUSH_R</ANIM_NAME>
				<LEFT_SINGLE_CODE>0</LEFT_SINGLE_CODE>
				<TOOLTIPID>TT:COCKPIT.TOOLTIPS.DISPLAY_BACKUP_BUTTON_ON</TOOLTIPID>
			</UseTemplate>
		</Component>
	 -->
			<Component ID="PASSENGER_Switch_Ventilation" Node="AC_SWITCH_CTRL">
				<UseTemplate Name="ASOBO_GT_Switch_3States">
					<PART_ID>AC_SWITCH_CTRL</PART_ID>
					<ANIM_NAME>AC_SWITCH_CTRL</ANIM_NAME>
					<WWISE_EVENT>ac_ctrl_switch</WWISE_EVENT>
					<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.PANEL_AC_SWITCH_PILOT</ANIMTIP_0>
					<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.PANEL_AC_SWITCH_PLTPAX</ANIMTIP_1>
					<ANIMTIP_2>TT:COCKPIT.TOOLTIPS.PANEL_AC_SWITCH_OFF</ANIMTIP_2>

				</UseTemplate>
			</Component>

			<UseTemplate Name="ASOBO_GT_Knob_Finite_Dummy">
				<KNOB_NAME>AC_KNOB_FAN</KNOB_NAME>
				<ANIMREF_ID>0</ANIMREF_ID>
				<ANIMCURSOR_DIR>1</ANIMCURSOR_DIR>

				<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.PANEL_AC_FAN_DECREASE</ANIMTIP_0>
				<ANIMTIP_0_ON_CURSOR>TurnLeft</ANIMTIP_0_ON_CURSOR>
				<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.PANEL_AC_FAN_INCREASE</ANIMTIP_1>
				<ANIMTIP_1_ON_CURSOR>TurnRight</ANIMTIP_1_ON_CURSOR>
				<WWISE_EVENT>AC_knob_fan</WWISE_EVENT>
				<COUNT>25</COUNT>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Knob_Finite_Dummy">
				<KNOB_NAME>AC_KNOB_TEMP</KNOB_NAME>
				<ANIMREF_ID>0</ANIMREF_ID>
				<ANIMCURSOR_DIR>1</ANIMCURSOR_DIR>
				<ANIMCURSOR_MIN>0</ANIMCURSOR_MIN>
				<ANIMCURSOR_MAX>1</ANIMCURSOR_MAX>
				<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.PANEL_AC_TEMP_KNOB_DECREASE</ANIMTIP_0>
				<ANIMTIP_0_ON_CURSOR>TurnLeft</ANIMTIP_0_ON_CURSOR>
				<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.PANEL_AC_TEMP_KNOB_INCREASE</ANIMTIP_1>
				<ANIMTIP_1_ON_CURSOR>TurnRight</ANIMTIP_1_ON_CURSOR>
				<WWISE_EVENT>AC_knob_temp</WWISE_EVENT>
				<COUNT>25</COUNT>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Knob_Finite_Dummy">
				<KNOB_NAME>HOTAIRFLOW_KNOB</KNOB_NAME>
				<ANIMREF_ID>0</ANIMREF_ID>
				<ANIMCURSOR_DIR>1</ANIMCURSOR_DIR>
				<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.HOT_AIR_FLOW_WINDSHIELD</ANIMTIP_0>
				<ANIMTIP_0_ON_CURSOR>TURNLEFT</ANIMTIP_0_ON_CURSOR>
				<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.HOT_AIR_FLOW_CABIN</ANIMTIP_1>
				<ANIMTIP_1_ON_CURSOR>TURNRIGHT</ANIMTIP_1_ON_CURSOR>
				<WWISE_EVENT>hotairflow_knob</WWISE_EVENT>
				<COUNT>25</COUNT>
			</UseTemplate>
		</Component>

		<Component ID="Copilot_Controls">
			<Component ID="PARKBRAKE_KNOB_R" Node="PARKBRAKE_KNOB_R">
				<UseTemplate Name="ASOBO_GT_Switch_Code">
					<ANIM_NAME>PARKBRAKE_KNOB_R</ANIM_NAME>
					<ANIM_CODE>(A:ALTERNATE STATIC SOURCE OPEN, Bool) 100 *</ANIM_CODE>
					<LEFT_SINGLE_CODE>(&gt;K:TOGGLE_ALTERNATE_STATIC)</LEFT_SINGLE_CODE>
					<ANIMREF_ID>0</ANIMREF_ID>
					<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.ALTERNATE_STATIC_LEVER_TO_ALTERNATE</ANIMTIP_0>
					<ANIMTIP_0_ON_CURSOR>Hand</ANIMTIP_0_ON_CURSOR>
					<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.ALTERNATE_STATIC_LEVER_TO_STATIC</ANIMTIP_1>
					<ANIMTIP_1_ON_CURSOR>Hand</ANIMTIP_1_ON_CURSOR>
				</UseTemplate>
			</Component>
			<UseTemplate Name="ASOBO_GT_Switch_Dummy">
				<NODE_ID>EMERGENCY_PUSH_RAMAIR</NODE_ID>
				<ANIM_NAME>EMERGENCY_PUSH_RAMAIR</ANIM_NAME>
				<ANIMREF_ID>0</ANIMREF_ID>
				<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.EMERGENCY_RAM_AIR_OPEN</ANIMTIP_0>
				<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.EMERGENCY_RAM_AIR_CLOSE</ANIMTIP_1>
			</UseTemplate>
		</Component>


	</Behaviors>
</ModelInfo>